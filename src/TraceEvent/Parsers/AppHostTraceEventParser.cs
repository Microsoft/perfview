using System;
using System.Text;
using System.Diagnostics;
using Microsoft.Diagnostics.Tracing;
using Microsoft.Diagnostics.Tracing.Parsers.AppHost;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "1.0")]
    public sealed class AppHostTraceEventParser : TraceEventParser
    {
        public new static string ProviderName = "Microsoft-Windows-AppHost";
        public static Guid ProviderGuid = new Guid(unchecked((int)0x98e0765d), unchecked((short)0x8c42), unchecked((short)0x44a3), 0xa5, 0x7b, 0x76, 0x0d, 0x7f, 0x93, 0x22, 0x5a);
        public enum Keywords : long
        {
            WWAHOST_KEYWORD = 0x1, // DAVID: original name was WwaHost
            AppHostApplication = 0x2,
            WwaHost = 0x00010000,
        };

        public AppHostTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<EmptyTraceData> CommandlineIncorrect
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 100, 1, "Initialize", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 100, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<EmptyTraceData> InstalledPackageInvalid
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 101, 1, "Initialize", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<GeneralLaunchFailureTraceData> GeneralLaunchFailure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GeneralLaunchFailureTraceData(value, 102, 1, "Initialize", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WrapperProtocolFailedTraceData> WrapperProtocolFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WrapperProtocolFailedTraceData(value, 103, 10, "Navigation.WrapperProtocol", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureActiveXDeniedTraceData> HostEnforcementFailureActiveXDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureActiveXDeniedTraceData(value, 104, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<LauncherAPIDeniedTraceData> LauncherAPIDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherAPIDeniedTraceData(value, 105, 13, "LauncherAPI", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorForAboutBlankTraceData> NavigationErrorForAboutBlank
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorForAboutBlankTraceData(value, 106, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorForGenericErrorPageTraceData> NavigationErrorForGenericErrorPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorForGenericErrorPageTraceData(value, 107, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorProcessingCustomErrorPageTraceData> NavigationErrorProcessingCustomErrorPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorProcessingCustomErrorPageTraceData(value, 108, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorForCustomErrorPageTraceData> NavigationErrorForCustomErrorPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorForCustomErrorPageTraceData(value, 109, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorProcessingGenericErrorPageTraceData> NavigationErrorProcessingGenericErrorPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorProcessingGenericErrorPageTraceData(value, 110, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationErrorOccurredTraceData> NavigationErrorOccurred
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationErrorOccurredTraceData(value, 111, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WWAJSERacReportTraceData> WWAJSERacReport
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WWAJSERacReportTraceData(value, 112, 8, "Telemetry.WERReporting", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureJavaScriptURIDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 113, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 113, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureZoneElevationDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 114, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureDocumentEncodingDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 115, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 115, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMixedContentDeniedTraceData> HostEnforcementFailureSubResourceDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMixedContentDeniedTraceData(value, 116, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 116, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMixedContentDeniedTraceData> HostEnforcementFailureMixedContentDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMixedContentDeniedTraceData(value, 117, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 117, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureGeolocationDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 118, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 118, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureClipboardDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 119, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 119, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureCloseDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 120, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 120, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData> WinRTIntegrationNamespaceEnumerationFailureBadWinmdFile
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData(value, 121, 23, "WinRTIntegration", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData> WinRTIntegrationNamespaceEnumerationFailureUnknown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData(value, 122, 23, "WinRTIntegration", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 122, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<EmptyTraceData> SuspendingIncompleteSubdownloads
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 123, 18, "Suspending", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 123, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<NavigationToWebContextDisallowedInTopFrameTraceData> NavigationToWebContextDisallowedInTopFrame
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationToWebContextDisallowedInTopFrameTraceData(value, 124, 16, "Navigation.Error", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 124, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureHttpsOnlyViolation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 125, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 125, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<UnHandledExceptionReportTraceData> UnHandledExceptionReport
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new UnHandledExceptionReportTraceData(value, 126, 8, "Telemetry.WERReporting", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 126, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<TerminateAppReportTraceData> TerminateAppReport
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TerminateAppReportTraceData(value, 127, 8, "Telemetry.WERReporting", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 127, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<PackageStateNotModifiedTraceData> EvaluationInfrastructureFailure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PackageStateNotModifiedTraceData(value, 128, 8, "Telemetry.WERReporting", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 128, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<PackageStateNotModifiedTraceData> PackageStateModified
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PackageStateNotModifiedTraceData(value, 129, 8, "Telemetry.WERReporting", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 129, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<PackageStateNotModifiedTraceData> PackageStateNotModified
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PackageStateNotModifiedTraceData(value, 130, 8, "Telemetry.WERReporting", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 130, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> HostEnforcementFailureMediaCaptureDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostEnforcementFailureMediaCaptureDeniedTraceData(value, 131, 11, "HostEnforcement", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 131, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<VersioningDocTypeDifferenceTraceData> VersioningDocTypeDifference
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new VersioningDocTypeDifferenceTraceData(value, 300, 17, "VersioningCompatibility", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 300, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<HostModuleLifecycleTraceData> HostModuleLifecycle
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostModuleLifecycleTraceData(value, 500, 6, "Infrastructure.Lifecycle", new Guid(), 11, "WwaHost Operation Succeeded", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 500, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, new Guid());
            }
        }
        public event Action<HostModuleLifecycleFailedTraceData> HostModuleLifecycleFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HostModuleLifecycleFailedTraceData(value, 501, 6, "Infrastructure.Lifecycle", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 501, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WebModuleLifecycleTraceData> WebModuleLifecycle
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WebModuleLifecycleTraceData(value, 502, 6, "Infrastructure.Lifecycle", new Guid(), 11, "WwaHost Operation Succeeded", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 502, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, new Guid());
            }
        }
        public event Action<WebModuleLifecycleFailedTraceData> WebModuleLifecycleFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WebModuleLifecycleFailedTraceData(value, 503, 6, "Infrastructure.Lifecycle", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 503, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<WebPlatformLifecycleTraceData> WebPlatformLifecycle
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WebPlatformLifecycleTraceData(value, 504, 6, "Infrastructure.Lifecycle", new Guid(), 11, "WwaHost Operation Succeeded", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 504, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, new Guid());
            }
        }
        public event Action<WebPlatformLifecycleFailedTraceData> WebPlatformLifecycleFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WebPlatformLifecycleFailedTraceData(value, 505, 6, "Infrastructure.Lifecycle", new Guid(), 12, "WwaHost Operation Failed", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 505, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppObjectNotificationSuspend
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 506, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 506, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> BeforeCallingSuspendingHandler
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 507, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 507, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> AfterCompletingSuspendingHandler
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 508, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 508, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<BeforeAskingPlmForMoreTimeTraceData> BeforeAskingPlmForMoreTime
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BeforeAskingPlmForMoreTimeTraceData(value, 509, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 509, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<SuspendingNextExecutionStateTraceData> SuspendingNextExecutionState
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SuspendingNextExecutionStateTraceData(value, 510, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 510, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> BeforeAskingTridentToSuspendDocument
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 511, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 511, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> AfterAskingTridentToSuspendDocument
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 512, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 512, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> BeforeCompletingSuspendingOperation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 513, 18, "Suspending", new Guid(), 14, "WwaHost Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 513, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, new Guid());
            }
        }
        public event Action<EmptyTraceData> NavigationDecisionStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1001, 2, "Navigation.NavigationDomain.Decision", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> NavigationDecisionStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1002, 2, "Navigation.NavigationDomain.Decision", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PackageToFileUriStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1003, 3, "MswwaProtocol.PackageToFileUri", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PackageToFileUriStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1004, 3, "MswwaProtocol.PackageToFileUri", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1004, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActivationModuleInitializationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1007, 4, "Activation.ModuleInitialization", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1007, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActivationModuleInitializationStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1008, 4, "Activation.ModuleInitialization", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1008, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SetupStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1009, 5, "Infrastructure.Host.Setup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1009, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SetupStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1010, 5, "Infrastructure.Host.Setup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1010, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<NavigationStopTraceData> NavigationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationStopTraceData(value, 1011, 12, "Navigation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<NavigationStopTraceData> NavigationStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NavigationStopTraceData(value, 1012, 12, "Navigation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1013, 7, "Sharing", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1014, 7, "Sharing", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1014, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> JavaScriptWERReportingStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1015, 8, "Telemetry.WERReporting", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> JavaScriptWERReportingStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1016, 8, "Telemetry.WERReporting", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1016, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> UptimeStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1017, 9, "Infrastructure.Host.Uptime", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1017, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> UptimeStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1018, 9, "Infrastructure.Host.Uptime", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1018, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ApplicationActivateEventStopTraceData> ApplicationActivateEventStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ApplicationActivateEventStopTraceData(value, 1019, 14, "ApplicationActivateEvent", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1019, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ApplicationActivateEventStopTraceData> ApplicationActivateEventStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ApplicationActivateEventStopTraceData(value, 1020, 14, "ApplicationActivateEvent", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1020, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ApplicationTerminationStopTraceData> ApplicationTerminationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ApplicationTerminationStopTraceData(value, 1021, 15, "ApplicationTermination", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1021, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ApplicationTerminationStopTraceData> ApplicationTerminationStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ApplicationTerminationStopTraceData(value, 1022, 15, "ApplicationTermination", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1022, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SuspendingStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1023, 18, "Suspending", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1023, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SuspendingStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1024, 18, "Suspending", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1024, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ResumingStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1025, 19, "Resuming", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1025, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ResumingStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1026, 19, "Resuming", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1026, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> WebInstanceSetupStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1027, 20, "Infrastructure.WebInstance.Setup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1027, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> WebInstanceSetupStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1028, 20, "Infrastructure.WebInstance.Setup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1028, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> InputPanelShowStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1029, 21, "InputPanelShow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1029, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> InputPanelShowStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1030, 21, "InputPanelShow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1030, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> InputPanelHideStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1031, 22, "InputPanelHide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1031, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> InputPanelHideStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1032, 22, "InputPanelHide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1032, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SuspendingPlusSubDownloadsStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1033, 30, "SuspendingPlusSubDownloads", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1033, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SuspendingPlusSubDownloadsStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1034, 30, "SuspendingPlusSubDownloads", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1034, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> JavaScriptTerminateAppStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1035, 24, "TerminateApp", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1035, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> JavaScriptTerminateAppStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1036, 24, "TerminateApp", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1036, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppDataToFileUriStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1037, 25, "MswwaProtocol.AppDataToFileUri", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1037, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppDataToFileUriStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1038, 25, "MswwaProtocol.AppDataToFileUri", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1038, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> EvaluatePackageStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1039, 26, "EvaluatePackage", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1039, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> EvaluatePackageStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1040, 26, "EvaluatePackage", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1040, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppHostApplicationInformationTraceData> AppHostApplicationError
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppHostApplicationInformationTraceData(value, 0xFFFF, 27, "ApplicationTracing.Error", new Guid(), 15, "AppHost Application Error", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, new Guid());
            }
        }
        public event Action<AppHostApplicationInformationTraceData> AppHostApplicationWarning
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppHostApplicationInformationTraceData(value, 0xFFFF, 28, "ApplicationTracing.Warning", new Guid(), 16, "AppHost Application Warning", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, new Guid());
            }
        }
        public event Action<AppHostApplicationInformationTraceData> AppHostApplicationInformation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppHostApplicationInformationTraceData(value, 0xFFFF, 29, "ApplicationTracing.Informational", new Guid(), 17, "AppHost Application Information", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, new Guid());
            }
        }

        #region Event ID Definitions
        public const TraceEventID CommandlineIncorrectEventID = (TraceEventID)100;
        public const TraceEventID InstalledPackageInvalidEventID = (TraceEventID)101;
        public const TraceEventID GeneralLaunchFailureEventID = (TraceEventID)102;
        public const TraceEventID WrapperProtocolFailedEventID = (TraceEventID)103;
        public const TraceEventID HostEnforcementFailureActiveXDeniedEventID = (TraceEventID)104;
        public const TraceEventID LauncherAPIDeniedEventID = (TraceEventID)105;
        public const TraceEventID NavigationErrorForAboutBlankEventID = (TraceEventID)106;
        public const TraceEventID NavigationErrorForGenericErrorPageEventID = (TraceEventID)107;
        public const TraceEventID NavigationErrorProcessingCustomErrorPageEventID = (TraceEventID)108;
        public const TraceEventID NavigationErrorForCustomErrorPageEventID = (TraceEventID)109;
        public const TraceEventID NavigationErrorProcessingGenericErrorPageEventID = (TraceEventID)110;
        public const TraceEventID NavigationErrorOccurredEventID = (TraceEventID)111;
        public const TraceEventID WWAJSERacReportEventID = (TraceEventID)112;
        public const TraceEventID HostEnforcementFailureJavaScriptURIDeniedEventID = (TraceEventID)113;
        public const TraceEventID HostEnforcementFailureZoneElevationDeniedEventID = (TraceEventID)114;
        public const TraceEventID HostEnforcementFailureDocumentEncodingDeniedEventID = (TraceEventID)115;
        public const TraceEventID HostEnforcementFailureSubResourceDeniedEventID = (TraceEventID)116;
        public const TraceEventID HostEnforcementFailureMixedContentDeniedEventID = (TraceEventID)117;
        public const TraceEventID HostEnforcementFailureGeolocationDeniedEventID = (TraceEventID)118;
        public const TraceEventID HostEnforcementFailureClipboardDeniedEventID = (TraceEventID)119;
        public const TraceEventID HostEnforcementFailureCloseDeniedEventID = (TraceEventID)120;
        public const TraceEventID WinRTIntegrationNamespaceEnumerationFailureBadWinmdFileEventID = (TraceEventID)121;
        public const TraceEventID WinRTIntegrationNamespaceEnumerationFailureUnknownEventID = (TraceEventID)122;
        public const TraceEventID SuspendingIncompleteSubdownloadsEventID = (TraceEventID)123;
        public const TraceEventID NavigationToWebContextDisallowedInTopFrameEventID = (TraceEventID)124;
        public const TraceEventID HostEnforcementFailureHttpsOnlyViolationEventID = (TraceEventID)125;
        public const TraceEventID UnHandledExceptionReportEventID = (TraceEventID)126;
        public const TraceEventID TerminateAppReportEventID = (TraceEventID)127;
        public const TraceEventID EvaluationInfrastructureFailureEventID = (TraceEventID)128;
        public const TraceEventID PackageStateModifiedEventID = (TraceEventID)129;
        public const TraceEventID PackageStateNotModifiedEventID = (TraceEventID)130;
        public const TraceEventID HostEnforcementFailureMediaCaptureDeniedEventID = (TraceEventID)131;
        public const TraceEventID VersioningDocTypeDifferenceEventID = (TraceEventID)300;
        public const TraceEventID HostModuleLifecycleEventID = (TraceEventID)500;
        public const TraceEventID HostModuleLifecycleFailedEventID = (TraceEventID)501;
        public const TraceEventID WebModuleLifecycleEventID = (TraceEventID)502;
        public const TraceEventID WebModuleLifecycleFailedEventID = (TraceEventID)503;
        public const TraceEventID WebPlatformLifecycleEventID = (TraceEventID)504;
        public const TraceEventID WebPlatformLifecycleFailedEventID = (TraceEventID)505;
        public const TraceEventID AppObjectNotificationSuspendEventID = (TraceEventID)506;
        public const TraceEventID BeforeCallingSuspendingHandlerEventID = (TraceEventID)507;
        public const TraceEventID AfterCompletingSuspendingHandlerEventID = (TraceEventID)508;
        public const TraceEventID BeforeAskingPlmForMoreTimeEventID = (TraceEventID)509;
        public const TraceEventID SuspendingNextExecutionStateEventID = (TraceEventID)510;
        public const TraceEventID BeforeAskingTridentToSuspendDocumentEventID = (TraceEventID)511;
        public const TraceEventID AfterAskingTridentToSuspendDocumentEventID = (TraceEventID)512;
        public const TraceEventID BeforeCompletingSuspendingOperationEventID = (TraceEventID)513;
        public const TraceEventID NavigationDecisionStartEventID = (TraceEventID)1001;
        public const TraceEventID NavigationDecisionStopEventID = (TraceEventID)1002;
        public const TraceEventID PackageToFileUriStartEventID = (TraceEventID)1003;
        public const TraceEventID PackageToFileUriStopEventID = (TraceEventID)1004;
        public const TraceEventID ActivationModuleInitializationStartEventID = (TraceEventID)1007;
        public const TraceEventID ActivationModuleInitializationStopEventID = (TraceEventID)1008;
        public const TraceEventID SetupStartEventID = (TraceEventID)1009;
        public const TraceEventID SetupStopEventID = (TraceEventID)1010;
        public const TraceEventID NavigationStartEventID = (TraceEventID)1011;
        public const TraceEventID NavigationStopEventID = (TraceEventID)1012;
        public const TraceEventID SharingStartEventID = (TraceEventID)1013;
        public const TraceEventID SharingEndEventID = (TraceEventID)1014;
        public const TraceEventID JavaScriptWERReportingStartEventID = (TraceEventID)1015;
        public const TraceEventID JavaScriptWERReportingStopEventID = (TraceEventID)1016;
        public const TraceEventID UptimeStartEventID = (TraceEventID)1017;
        public const TraceEventID UptimeStopEventID = (TraceEventID)1018;
        public const TraceEventID ApplicationActivateEventStartEventID = (TraceEventID)1019;
        public const TraceEventID ApplicationActivateEventStopEventID = (TraceEventID)1020;
        public const TraceEventID ApplicationTerminationStartEventID = (TraceEventID)1021;
        public const TraceEventID ApplicationTerminationStopEventID = (TraceEventID)1022;
        public const TraceEventID SuspendingStartEventID = (TraceEventID)1023;
        public const TraceEventID SuspendingStopEventID = (TraceEventID)1024;
        public const TraceEventID ResumingStartEventID = (TraceEventID)1025;
        public const TraceEventID ResumingStopEventID = (TraceEventID)1026;
        public const TraceEventID WebInstanceSetupStartEventID = (TraceEventID)1027;
        public const TraceEventID WebInstanceSetupStopEventID = (TraceEventID)1028;
        public const TraceEventID InputPanelShowStartEventID = (TraceEventID)1029;
        public const TraceEventID InputPanelShowStopEventID = (TraceEventID)1030;
        public const TraceEventID InputPanelHideStartEventID = (TraceEventID)1031;
        public const TraceEventID InputPanelHideStopEventID = (TraceEventID)1032;
        public const TraceEventID SuspendingPlusSubDownloadsStartEventID = (TraceEventID)1033;
        public const TraceEventID SuspendingPlusSubDownloadsStopEventID = (TraceEventID)1034;
        public const TraceEventID JavaScriptTerminateAppStartEventID = (TraceEventID)1035;
        public const TraceEventID JavaScriptTerminateAppStopEventID = (TraceEventID)1036;
        public const TraceEventID AppDataToFileUriStartEventID = (TraceEventID)1037;
        public const TraceEventID AppDataToFileUriStopEventID = (TraceEventID)1038;
        public const TraceEventID EvaluatePackageStartEventID = (TraceEventID)1039;
        public const TraceEventID EvaluatePackageStopEventID = (TraceEventID)1040;
        public const TraceEventID AppHostApplicationErrorEventID = (TraceEventID)10000;
        public const TraceEventID AppHostApplicationWarningEventID = (TraceEventID)10001;
        public const TraceEventID AppHostApplicationInformationEventID = (TraceEventID)10002;
        #endregion

        #region private
        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.AppHost
{
    public sealed class GeneralLaunchFailureTraceData : TraceEvent
    {
        public int HResult { get { return GetInt32At(0); } }

        #region Private
        internal GeneralLaunchFailureTraceData(Action<GeneralLaunchFailureTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GeneralLaunchFailureTraceData> Action;
        #endregion
    }
    public sealed class WrapperProtocolFailedTraceData : TraceEvent
    {
        public string Uri { get { return GetUnicodeStringAt(0); } }
        public string Function { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string ErrorCode { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal WrapperProtocolFailedTraceData(Action<WrapperProtocolFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Uri", Uri);
            XmlAttrib(sb, "Function", Function);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Uri", "Function", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Uri;
                case 1:
                    return Function;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WrapperProtocolFailedTraceData> Action;
        #endregion
    }
    public sealed class HostEnforcementFailureActiveXDeniedTraceData : TraceEvent
    {
        public string ContextUri { get { return GetUnicodeStringAt(0); } }
        public string ClassID { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal HostEnforcementFailureActiveXDeniedTraceData(Action<HostEnforcementFailureActiveXDeniedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextUri", ContextUri);
            XmlAttrib(sb, "ClassID", ClassID);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextUri", "ClassID" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextUri;
                case 1:
                    return ClassID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HostEnforcementFailureActiveXDeniedTraceData> Action;
        #endregion
    }
    public sealed class LauncherAPIDeniedTraceData : TraceEvent
    {
        public string Uri { get { return GetUnicodeStringAt(0); } }
        public int HResult { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal LauncherAPIDeniedTraceData(Action<LauncherAPIDeniedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Uri", Uri);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Uri", "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Uri;
                case 1:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherAPIDeniedTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorForAboutBlankTraceData : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal NavigationErrorForAboutBlankTraceData(Action<NavigationErrorForAboutBlankTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorForAboutBlankTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorForGenericErrorPageTraceData : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal NavigationErrorForGenericErrorPageTraceData(Action<NavigationErrorForGenericErrorPageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorForGenericErrorPageTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorProcessingCustomErrorPageTraceData : TraceEvent
    {
        public int HResult { get { return GetInt32At(0); } }

        #region Private
        internal NavigationErrorProcessingCustomErrorPageTraceData(Action<NavigationErrorProcessingCustomErrorPageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorProcessingCustomErrorPageTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorForCustomErrorPageTraceData : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal NavigationErrorForCustomErrorPageTraceData(Action<NavigationErrorForCustomErrorPageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorForCustomErrorPageTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorProcessingGenericErrorPageTraceData : TraceEvent
    {
        public int HResult { get { return GetInt32At(0); } }

        #region Private
        internal NavigationErrorProcessingGenericErrorPageTraceData(Action<NavigationErrorProcessingGenericErrorPageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorProcessingGenericErrorPageTraceData> Action;
        #endregion
    }
    public sealed class NavigationErrorOccurredTraceData : TraceEvent
    {
        public string Uri { get { return GetUnicodeStringAt(0); } }
        public string ErrorCode { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal NavigationErrorOccurredTraceData(Action<NavigationErrorOccurredTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Uri", Uri);
            XmlAttrib(sb, "ErrorCode", ErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Uri", "ErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Uri;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationErrorOccurredTraceData> Action;
        #endregion
    }
    public sealed class WWAJSERacReportTraceData : TraceEvent
    {
        public string param1 { get { return GetUnicodeStringAt(0); } }
        public string param2 { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string param3 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string param4 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public string param5 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string param6 { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))); } }
        public int PID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))))); } }
        public string ProcessCreationTime { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))) + 4); } }
        public string ApplicationBinaryPath { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))) + 4)); } }

        #region Private
        internal WWAJSERacReportTraceData(Action<WWAJSERacReportTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))) + 4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))))) + 4))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "param1", param1);
            XmlAttrib(sb, "param2", param2);
            XmlAttrib(sb, "param3", param3);
            XmlAttrib(sb, "param4", param4);
            XmlAttrib(sb, "param5", param5);
            XmlAttrib(sb, "param6", param6);
            XmlAttrib(sb, "PID", PID);
            XmlAttrib(sb, "ProcessCreationTime", ProcessCreationTime);
            XmlAttrib(sb, "ApplicationBinaryPath", ApplicationBinaryPath);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "param1", "param2", "param3", "param4", "param5", "param6", "PID", "ProcessCreationTime", "ApplicationBinaryPath" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return param1;
                case 1:
                    return param2;
                case 2:
                    return param3;
                case 3:
                    return param4;
                case 4:
                    return param5;
                case 5:
                    return param6;
                case 6:
                    return PID;
                case 7:
                    return ProcessCreationTime;
                case 8:
                    return ApplicationBinaryPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WWAJSERacReportTraceData> Action;
        #endregion
    }
    public sealed class HostEnforcementFailureMediaCaptureDeniedTraceData : TraceEvent
    {
        public string ContextUri { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal HostEnforcementFailureMediaCaptureDeniedTraceData(Action<HostEnforcementFailureMediaCaptureDeniedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextUri", ContextUri);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextUri" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextUri;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HostEnforcementFailureMediaCaptureDeniedTraceData> Action;
        #endregion
    }
    public sealed class HostEnforcementFailureMixedContentDeniedTraceData : TraceEvent
    {
        public string ContextUri { get { return GetUnicodeStringAt(0); } }
        public string FailureUri { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal HostEnforcementFailureMixedContentDeniedTraceData(Action<HostEnforcementFailureMixedContentDeniedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ContextUri", ContextUri);
            XmlAttrib(sb, "FailureUri", FailureUri);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextUri", "FailureUri" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextUri;
                case 1:
                    return FailureUri;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HostEnforcementFailureMixedContentDeniedTraceData> Action;
        #endregion
    }
    public sealed class WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData : TraceEvent
    {
        public int HResultErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData(Action<WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "HResultErrorCode", HResultErrorCode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HResultErrorCode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HResultErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WinRTIntegrationNamespaceEnumerationFailureUnknownTraceData> Action;
        #endregion
    }
    public sealed class NavigationToWebContextDisallowedInTopFrameTraceData : TraceEvent
    {
        public string Uri { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal NavigationToWebContextDisallowedInTopFrameTraceData(Action<NavigationToWebContextDisallowedInTopFrameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Uri", Uri);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Uri" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Uri;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationToWebContextDisallowedInTopFrameTraceData> Action;
        #endregion
    }
    public sealed class UnHandledExceptionReportTraceData : TraceEvent
    {
        public string DisplayName { get { return GetUnicodeStringAt(0); } }
        public string ApplicationName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string AppUserModelId { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string PackageMoniker { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string ErrorType { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4); } }
        public string ErrorDescription { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)); } }
        public string DocumentFile { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4))); } }
        public string SourceFile { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))); } }
        public int SourceLine { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4))))); } }
        public int SourceColumn { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))) + 4); } }
        public string StackTrace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))) + 8); } }

        #region Private
        internal UnHandledExceptionReportTraceData(Action<UnHandledExceptionReportTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))) + 8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))) + 8)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "DisplayName", DisplayName);
            XmlAttrib(sb, "ApplicationName", ApplicationName);
            XmlAttrib(sb, "AppUserModelId", AppUserModelId);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ErrorType", ErrorType);
            XmlAttrib(sb, "ErrorDescription", ErrorDescription);
            XmlAttrib(sb, "DocumentFile", DocumentFile);
            XmlAttrib(sb, "SourceFile", SourceFile);
            XmlAttrib(sb, "SourceLine", SourceLine);
            XmlAttrib(sb, "SourceColumn", SourceColumn);
            XmlAttrib(sb, "StackTrace", StackTrace);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayName", "ApplicationName", "AppUserModelId", "PackageMoniker", "ProcessId", "ErrorType", "ErrorDescription", "DocumentFile", "SourceFile", "SourceLine", "SourceColumn", "StackTrace" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayName;
                case 1:
                    return ApplicationName;
                case 2:
                    return AppUserModelId;
                case 3:
                    return PackageMoniker;
                case 4:
                    return ProcessId;
                case 5:
                    return ErrorType;
                case 6:
                    return ErrorDescription;
                case 7:
                    return DocumentFile;
                case 8:
                    return SourceFile;
                case 9:
                    return SourceLine;
                case 10:
                    return SourceColumn;
                case 11:
                    return StackTrace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UnHandledExceptionReportTraceData> Action;
        #endregion
    }
    public sealed class TerminateAppReportTraceData : TraceEvent
    {
        public string DisplayName { get { return GetUnicodeStringAt(0); } }
        public string ApplicationName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string AppUserModelId { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string PackageMoniker { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        public string ErrorDescription { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4); } }
        public string DocumentFile { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)); } }
        public string StackTrace { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4))); } }

        #region Private
        internal TerminateAppReportTraceData(Action<TerminateAppReportTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "DisplayName", DisplayName);
            XmlAttrib(sb, "ApplicationName", ApplicationName);
            XmlAttrib(sb, "AppUserModelId", AppUserModelId);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ErrorDescription", ErrorDescription);
            XmlAttrib(sb, "DocumentFile", DocumentFile);
            XmlAttrib(sb, "StackTrace", StackTrace);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayName", "ApplicationName", "AppUserModelId", "PackageMoniker", "ProcessId", "ErrorDescription", "DocumentFile", "StackTrace" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayName;
                case 1:
                    return ApplicationName;
                case 2:
                    return AppUserModelId;
                case 3:
                    return PackageMoniker;
                case 4:
                    return ProcessId;
                case 5:
                    return ErrorDescription;
                case 6:
                    return DocumentFile;
                case 7:
                    return StackTrace;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TerminateAppReportTraceData> Action;
        #endregion
    }
    public sealed class PackageStateNotModifiedTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal PackageStateNotModifiedTraceData(Action<PackageStateNotModifiedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "PackageFullName", PackageFullName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PackageStateNotModifiedTraceData> Action;
        #endregion
    }
    public sealed class VersioningDocTypeDifferenceTraceData : TraceEvent
    {
        public string Uri { get { return GetUnicodeStringAt(0); } }
        public int WwaHostDocMode { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int DocumentDocMode { get { return GetInt32At(SkipUnicodeString(0) + 4); } }

        #region Private
        internal VersioningDocTypeDifferenceTraceData(Action<VersioningDocTypeDifferenceTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Uri", Uri);
            XmlAttrib(sb, "WwaHostDocMode", WwaHostDocMode);
            XmlAttrib(sb, "DocumentDocMode", DocumentDocMode);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Uri", "WwaHostDocMode", "DocumentDocMode" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Uri;
                case 1:
                    return WwaHostDocMode;
                case 2:
                    return DocumentDocMode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VersioningDocTypeDifferenceTraceData> Action;
        #endregion
    }
    public sealed class HostModuleLifecycleTraceData : TraceEvent
    {
        public string Function { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal HostModuleLifecycleTraceData(Action<HostModuleLifecycleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Function", Function);
            XmlAttrib(sb, "Module", Module);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Module" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Module;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HostModuleLifecycleTraceData> Action;
        #endregion
    }
    public sealed class HostModuleLifecycleFailedTraceData : TraceEvent
    {
        public string Function { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int HResult { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal HostModuleLifecycleFailedTraceData(Action<HostModuleLifecycleFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Function", Function);
            XmlAttrib(sb, "Module", Module);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Module", "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Module;
                case 2:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HostModuleLifecycleFailedTraceData> Action;
        #endregion
    }
    public sealed class WebModuleLifecycleTraceData : TraceEvent
    {
        public string Function { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int WebInstance { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal WebModuleLifecycleTraceData(Action<WebModuleLifecycleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Function", Function);
            XmlAttrib(sb, "Module", Module);
            XmlAttrib(sb, "WebInstance", WebInstance);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Module", "WebInstance" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Module;
                case 2:
                    return WebInstance;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WebModuleLifecycleTraceData> Action;
        #endregion
    }
    public sealed class WebModuleLifecycleFailedTraceData : TraceEvent
    {
        public string Function { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int WebInstance { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int HResult { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)) + 4); } }

        #region Private
        internal WebModuleLifecycleFailedTraceData(Action<WebModuleLifecycleFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Function", Function);
            XmlAttrib(sb, "Module", Module);
            XmlAttrib(sb, "WebInstance", WebInstance);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Function", "Module", "WebInstance", "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Function;
                case 1:
                    return Module;
                case 2:
                    return WebInstance;
                case 3:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WebModuleLifecycleFailedTraceData> Action;
        #endregion
    }
    public sealed class WebPlatformLifecycleTraceData : TraceEvent
    {
        //public string Action { get { return GetUnicodeStringAt(0); } }
        public int WebInstance { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal WebPlatformLifecycleTraceData(Action<WebPlatformLifecycleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Action", Action);
            XmlAttrib(sb, "WebInstance", WebInstance);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Action", "WebInstance" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Action;
                case 1:
                    return WebInstance;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WebPlatformLifecycleTraceData> Action;
        #endregion
    }
    public sealed class WebPlatformLifecycleFailedTraceData : TraceEvent
    {
        public int WebInstance { get { return GetInt32At(0); } }
        public int HResult { get { return GetInt32At(4); } }

        #region Private
        internal WebPlatformLifecycleFailedTraceData(Action<WebPlatformLifecycleFailedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "WebInstance", WebInstance);
            XmlAttrib(sb, "HResult", HResult);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "WebInstance", "HResult" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return WebInstance;
                case 1:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WebPlatformLifecycleFailedTraceData> Action;
        #endregion
    }
    public sealed class BeforeAskingPlmForMoreTimeTraceData : TraceEvent
    {
        public int NewTimeout { get { return GetInt32At(0); } }
        public int CurrentTimeout { get { return GetInt32At(4); } }

        #region Private
        internal BeforeAskingPlmForMoreTimeTraceData(Action<BeforeAskingPlmForMoreTimeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "NewTimeout", NewTimeout);
            XmlAttrib(sb, "CurrentTimeout", CurrentTimeout);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NewTimeout", "CurrentTimeout" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NewTimeout;
                case 1:
                    return CurrentTimeout;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BeforeAskingPlmForMoreTimeTraceData> Action;
        #endregion
    }
    public sealed class SuspendingNextExecutionStateTraceData : TraceEvent
    {
        public int NextExecutionState { get { return GetInt32At(0); } }

        #region Private
        internal SuspendingNextExecutionStateTraceData(Action<SuspendingNextExecutionStateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "NextExecutionState", NextExecutionState);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NextExecutionState" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NextExecutionState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SuspendingNextExecutionStateTraceData> Action;
        #endregion
    }
    public sealed class NavigationStopTraceData : TraceEvent
    {
        public long ObjectWWA { get { return GetInt64At(0); } }
        public int Counter { get { return GetInt32At(8); } }
        public string PackageMoniker { get { return GetUnicodeStringAt(12); } }
        public string AppID { get { return GetUnicodeStringAt(SkipUnicodeString(12)); } }
        public int NavigationInfo { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(12))); } }

        #region Private
        internal NavigationStopTraceData(Action<NavigationStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(12)) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(12)) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ObjectWWA", ObjectWWA);
            XmlAttrib(sb, "Counter", Counter);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "AppID", AppID);
            XmlAttrib(sb, "NavigationInfo", NavigationInfo);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ObjectWWA", "Counter", "PackageMoniker", "AppID", "NavigationInfo" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ObjectWWA;
                case 1:
                    return Counter;
                case 2:
                    return PackageMoniker;
                case 3:
                    return AppID;
                case 4:
                    return NavigationInfo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NavigationStopTraceData> Action;
        #endregion
    }
    public sealed class ApplicationActivateEventStopTraceData : TraceEvent
    {
        public string PackageMoniker { get { return GetUnicodeStringAt(0); } }
        public string AppID { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string ContractID { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int IsReactivation { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }

        #region Private
        internal ApplicationActivateEventStopTraceData(Action<ApplicationActivateEventStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))) + 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "AppID", AppID);
            XmlAttrib(sb, "ContractID", ContractID);
            XmlAttrib(sb, "IsReactivation", IsReactivation);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageMoniker", "AppID", "ContractID", "IsReactivation" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageMoniker;
                case 1:
                    return AppID;
                case 2:
                    return ContractID;
                case 3:
                    return IsReactivation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ApplicationActivateEventStopTraceData> Action;
        #endregion
    }
    public sealed class ApplicationTerminationStopTraceData : TraceEvent
    {
        public string PackageMoniker { get { return GetUnicodeStringAt(0); } }
        public string AppID { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal ApplicationTerminationStopTraceData(Action<ApplicationTerminationStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "AppID", AppID);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageMoniker", "AppID" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageMoniker;
                case 1:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ApplicationTerminationStopTraceData> Action;
        #endregion
    }
    public sealed class AppHostApplicationInformationTraceData : TraceEvent
    {
        public string DisplayName { get { return GetUnicodeStringAt(0); } }
        public string ApplicationName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string AppUserModelId { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string PackageMoniker { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }
        public int ProcessId { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))); } }
        new public string Source { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4); } }
        public string DocumentFile { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)); } }
        public int Line { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4))); } }
        public int Column { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)) + 4); } }
        public int MessageId { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)) + 8); } }
        public string Message { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)) + 12); } }

        #region Private
        internal AppHostApplicationInformationTraceData(Action<AppHostApplicationInformationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)) + 12)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))) + 4)) + 12)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "DisplayName", DisplayName);
            XmlAttrib(sb, "ApplicationName", ApplicationName);
            XmlAttrib(sb, "AppUserModelId", AppUserModelId);
            XmlAttrib(sb, "PackageMoniker", PackageMoniker);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "Source", Source);
            XmlAttrib(sb, "DocumentFile", DocumentFile);
            XmlAttrib(sb, "Line", Line);
            XmlAttrib(sb, "Column", Column);
            XmlAttrib(sb, "MessageId", MessageId);
            XmlAttrib(sb, "Message", Message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayName", "ApplicationName", "AppUserModelId", "PackageMoniker", "ProcessId", "Source", "DocumentFile", "Line", "Column", "MessageId", "Message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayName;
                case 1:
                    return ApplicationName;
                case 2:
                    return AppUserModelId;
                case 3:
                    return PackageMoniker;
                case 4:
                    return ProcessId;
                case 5:
                    return Source;
                case 6:
                    return DocumentFile;
                case 7:
                    return Line;
                case 8:
                    return Column;
                case 9:
                    return MessageId;
                case 10:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppHostApplicationInformationTraceData> Action;
        #endregion
    }

}
