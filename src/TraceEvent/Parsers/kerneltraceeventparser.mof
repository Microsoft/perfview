// This file came from the Vista windows source code tree 

[Dynamic,
 Description("Windows Kernel Trace") : amended,
 Guid("{9e814aad-3204-11d2-9a82-006008a86939}")
]
class MSNT_SystemTrace:EventTrace
{
    [Description ("Enable Flags") : amended,
        ValueDescriptions{
            "Process creations/deletions",
            "Thread creations/deletions",
            "Image load",
            "Process counters",
            "Context switches",
            "Deferred procedure calls",
            "Interrupts",
            "System calls",
            "Disk IO",
            "File details",
            "Disk IO entry",
            "Page faults",
            "Hard page faults",
            "Network TCP/IP",
            "Registry details",
            "ALPC",
            "Split IO",
            "Driver delays",
            "Sample based profiling",
            "File IO completion",
            "File IO"
            } : amended,
         DefineValues{
            "EVENT_TRACE_FLAG_PROCESS",
            "EVENT_TRACE_FLAG_THREAD",
            "EVENT_TRACE_FLAG_IMAGE_LOAD",
            "EVENT_TRACE_FLAG_PROCESS_COUNTERS",
            "EVENT_TRACE_FLAG_CSWITCH",
            "EVENT_TRACE_FLAG_DPC",
            "EVENT_TRACE_FLAG_INTERRUPT",
            "EVENT_TRACE_FLAG_SYSTEMCALL",
            "EVENT_TRACE_FLAG_DISK_IO",
            "EVENT_TRACE_FLAG_DISK_FILE_IO",
            "EVENT_TRACE_FLAG_DISK_IO_INIT",
            "EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS",
            "EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS",
            "EVENT_TRACE_FLAG_NETWORK_TCPIP",
            "EVENT_TRACE_FLAG_REGISTRY",
            "EVENT_TRACE_FLAG_ALPC",
            "EVENT_TRACE_FLAG_SPLIT_IO",
            "EVENT_TRACE_FLAG_DRIVER",
            "EVENT_TRACE_FLAG_PROFILE",
            "EVENT_TRACE_FLAG_FILE_IO",
            "EVENT_TRACE_FLAG_FILE_IO_INIT"
            },
        Values{
            "process",
            "thread",
            "img",
            "proccntr",
            "cswitch",
            "dpc",
            "isr",
            "syscall",
            "disk",
            "file",
            "diskinit",
            "pf",
            "hf",
            "net",
            "registry",
            "alpc",
            "splitio",
            "driver",
            "profile",
            "fileiocompletion",
            "fileio"
            },
        ValueMap{
            "0x00000001",
            "0x00000002",
            "0x00000004",
            "0x00000008",
            "0x00000010",
            "0x00000020",
            "0x00000040",
            "0x00000080",
            "0x00000100",
            "0x00000200",
            "0x00000400",
            "0x00001000",
            "0x00002000",
            "0x00010000",
            "0x00020000",
            "0x00100000",
            "0x00200000",
            "0x00800000",
            "0x01000000",
            "0x02000000",
            "0x04000000"
            }
    ]
    uint32 Flags;

};

[Dynamic,
 Description("Event Trace Event") : amended,
 Guid("{68fdd900-4a3e-11d1-84f4-0000f80464e3}"),
 DisplayName("EventTrace") : amended
]
class EventTraceEvent:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Event Trace Event") : amended,
 EventType(0),
 EventTypeName("Header") :amended
]
class EventTrace_Header:EventTraceEvent
{
    [WmiDataId(1),
     Description("Buffer Size in Bytes") : amended,
     read]
     uint32  BufferSize;
    [WmiDataId(2),
     Description("Event Trace Version") : amended,
     read]
     uint32  Version;
    [WmiDataId(3),
     Description("Windows Build Number") : amended,
     read]
     uint32  ProviderVersion;
    [WmiDataId(4),
     Description("Number Of Processors") : amended,
     read]
     uint32  NumberOfProcessors;
    [WmiDataId(5),
     Description("Collection End Time") : amended,
     read]
     uint64  EndTime;
    [WmiDataId(6),
     Description("Timer Resolution") : amended,
     read]
     uint32  TimerResolution;
    [WmiDataId(7),
     Description("Maximum File Size in MBytes") : amended,
     read]
     uint32  MaxFileSize;
    [WmiDataId(8),
     Description("LogFileMode") : amended,
     format("x"),
     read]
     uint32  LogFileMode;
    [WmiDataId(9),
     Description("Number of Buffers Written") : amended,
     read]
     uint32  BuffersWritten;
    [WmiDataId(10),
     Description("Buffer Number with earliest TimeStamp for a Cicular LogFile") : amended,
     read]
     uint32  StartBuffers;
    [WmiDataId(11),
     Description("Pointer Size in Bytes") : amended,
     read]
     uint32  PointerSize;
    [WmiDataId(12),
     Description("Number of Events Lost during collection") : amended,
     read]
     uint32  EventsLost;
    [WmiDataId(13),
     Description("CPU Speed in MHz") : amended,
     read]
     uint32  CPUSpeed;
    [WmiDataId(14),
     Description("Logger Name") : amended,
     pointer,
     read]
     uint32  LoggerName;
    [WmiDataId(15),
     Description("LogFile Name") : amended,
     pointer,
     read]
     uint32  LogFileName;
    [WmiDataId(16),
     Description("TimeZoneInformation") : amended,
     extension("NoPrint"),
     read]
     uint8 TimeZoneInformation[176];
    [WmiDataId(17),
     Description("BootTime") : amended,
     read]
     uint64  BootTime;
    [WmiDataId(18),
     Description("Performance counter frequency in counts per second") : amended,
     read]
     uint64  PerfFreq;
    [WmiDataId(19),
     Description("StartTime") : amended,
     read]
     uint64  StartTime;
    [WmiDataId(20),
     Description("ReservedFlags") : amended,
     format("x"),
     read]
     uint32  ReservedFlags;
    [WmiDataId(21),
     Description("Number of Buffers Lost during collection") : amended,
     read]
     uint32  BuffersLost;
    [WmiDataId(22),
     Description("SessionNameString") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  SessionNameString;
    [WmiDataId(23),
     Description("LogFileNameString") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  LogFileNameString;
};

[Dynamic,
 Description("Event Trace Header Extension") : amended,
 EventType{5, 32},
 EventTypeName{"Extension", "EndExtension"} :amended
]
class Header_Extension_TypeGroup:EventTraceEvent
{
    [WmiDataId(1),
     Description("GroupMask1") : amended,
     format("x"),
     read]
     uint32  GroupMask1;
    [WmiDataId(2),
     Description("GroupMask2") : amended,
     format("x"),
     read]
     uint32  GroupMask2;
    [WmiDataId(3),
     Description("GroupMask3") : amended,
     format("x"),
     read]
     uint32  GroupMask3;
    [WmiDataId(4),
     Description("GroupMask4") : amended,
     format("x"),
     read]
     uint32  GroupMask4;
    [WmiDataId(5),
     Description("GroupMask5") : amended,
     format("x"),
     read]
     uint32  GroupMask5;
    [WmiDataId(6),
     Description("GroupMask6") : amended,
     format("x"),
     read]
     uint32  GroupMask6;
    [WmiDataId(7),
     Description("GroupMask7") : amended,
     format("x"),
     read]
     uint32  GroupMask7;
    [WmiDataId(8),
     Description("GroupMask8") : amended,
     format("x"),
     read]
     uint32  GroupMask8;
    [WmiDataId(9),
     Description("KernelEventVersion") : amended,
     format("x"),
     read]
     uint32  KernelEventVersion;
};

[Dynamic,
 Description("Event Trace Rundown Complete") : amended,
 EventType(8),
 EventTypeName("RDComplete") :amended
]
class RDComplete:EventTraceEvent
{

};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 Guid("{3d6fa8d0-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(0),
 DisplayName("Process") : amended
]
class Process_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 EventType{1, 2, 3, 4},
 EventTypeName{"Start", "End", "DCStart", "DCEnd"} : amended
]
class Process_V0_TypeGroup1:Process_V0
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     pointer,
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("Parent Process ID") : amended,
     pointer,
     read]
     uint32  ParentId;
    [WmiDataId(3),
     Description("User SID") : amended,
     extension("Sid"),
     read]
     object  UserSID;
    [WmiDataId(4),
     Description("ImageFileName") : amended,
     StringTermination("NullTerminated"),
     read]
     string  ImageFileName;
};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 Guid("{3d6fa8d0-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(1),
 DisplayName("Process") : amended
]
class Process_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 EventType{1, 2, 3, 4},
 EventTypeName{"Start", "End", "DCStart", "DCEnd"} : amended
]
class Process_V1_TypeGroup1:Process_V1
{
    [WmiDataId(1),
     Description("PageDirectoryBase") : amended,
     pointer,
     read]
     uint32  PageDirectoryBase;
    [WmiDataId(2),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(3),
     Description("ParentId") : amended,
     format("x"),
     read]
     uint32  ParentId;
    [WmiDataId(4),
     Description("SessionId") : amended,
     read]
     uint32  SessionId;
    [WmiDataId(5),
     Description("ExitStatus") : amended,
     read]
     sint32  ExitStatus;
    [WmiDataId(6),
     Description("UserSID") : amended,
     extension("Sid"),
     read]
     object  UserSID;
    [WmiDataId(7),
     Description("ImageFileName") : amended,
     StringTermination("NullTerminated"),
     read]
     string  ImageFileName;
};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 Guid("{3d6fa8d0-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(2),
 DisplayName("Process") : amended
]
class Process:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Process Create/Exit Event") : amended,
 EventType{1, 2, 3, 4, 39},
 EventTypeName{"Start", "End", "DCStart", "DCEnd", "Defunct"} : amended
]
class Process_TypeGroup1:Process
{
    [WmiDataId(1),
     Description("UniqueProcessKey") : amended,
     pointer,
     read]
     uint32  UniqueProcessKey;
    [WmiDataId(2),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(3),
     Description("ParentId") : amended,
     format("x"),
     read]
     uint32  ParentId;
    [WmiDataId(4),
     Description("SessionId") : amended,
     read]
     uint32  SessionId;
    [WmiDataId(5),
     Description("ExitStatus") : amended,
     read]
     sint32  ExitStatus;
    [WmiDataId(6),
     Description("UserSID") : amended,
     extension("Sid"),
     read]
     object  UserSID;
    [WmiDataId(7),
     Description("ImageFileName") : amended,
     StringTermination("NullTerminated"),
     read]
     string  ImageFileName;
    [WmiDataId(8),
     Description("CommandLine") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  CommandLine;
};

[Dynamic,
 Description("Process Performance Counters") : amended,
 EventType{32, 33},
 EventTypeName{"PerfCtr", "PerfCtrRundown"} : amended
]
class Process_TypeGroup2:Process
{
    [WmiDataId(1),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("PageFaultCount") : amended,
     read]
     uint32  PageFaultCount;
    [WmiDataId(3),
     Description("HandleCount") : amended,
     read]
     uint32  HandleCount;
    [WmiDataId(4),
     Description("Reserved") : amended,
     read]
     uint32  Reserved;
    [WmiDataId(5),
     Description("PeakVirtualSize") : amended,
     extension("SizeT"),
     read]
     object  PeakVirtualSize;
    [WmiDataId(6),
     Description("PeakWorkingSetSize") : amended,
     extension("SizeT"),
     read]
     object  PeakWorkingSetSize;
    [WmiDataId(7),
     Description("PeakPagefileUsage") : amended,
     extension("SizeT"),
     read]
     object  PeakPagefileUsage;
    [WmiDataId(8),
     Description("QuotaPeakPagedPoolUsage") : amended,
     extension("SizeT"),
     read]
     object  QuotaPeakPagedPoolUsage;
    [WmiDataId(9),
     Description("QuotaPeakNonPagedPoolUsage") : amended,
     extension("SizeT"),
     read]
     object  QuotaPeakNonPagedPoolUsage;
    [WmiDataId(10),
     Description("VirtualSize") : amended,
     extension("SizeT"),
     read]
     object  VirtualSize;
    [WmiDataId(11),
     Description("WorkingSetSize") : amended,
     extension("SizeT"),
     read]
     object  WorkingSetSize;
    [WmiDataId(12),
     Description("PagefileUsage") : amended,
     extension("SizeT"),
     read]
     object  PagefileUsage;
    [WmiDataId(13),
     Description("QuotaPagedPoolUsage") : amended,
     extension("SizeT"),
     read]
     object  QuotaPagedPoolUsage;
    [WmiDataId(14),
     Description("QuotaNonPagedPoolUsage") : amended,
     extension("SizeT"),
     read]
     object  QuotaNonPagedPoolUsage;
    [WmiDataId(15),
     Description("PrivatePageCount") : amended,
     extension("SizeT"),
     read]
     object  PrivatePageCount;
};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 Guid("{3d6fa8d1-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(0),
 DisplayName("Thread") : amended
]
class Thread_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 EventType{1, 2, 3, 4},
 EventTypeName{"Start", "End", "DCStart", "DCEnd"} : amended
]
class Thread_V0_TypeGroup1:Thread_V0
{
    [WmiDataId(1),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(2),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 Guid("{3d6fa8d1-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(1),
 DisplayName("Thread") : amended
]
class Thread_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 EventType{1, 3},
 EventTypeName{"Start", "DCStart"} : amended
]
class Thread_V1_TypeGroup1:Thread_V1
{
    [WmiDataId(1),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(3),
     Description("StackBase") : amended,
     pointer,
     read]
     uint32  StackBase;
    [WmiDataId(4),
     Description("StackLimit") : amended,
     pointer,
     read]
     uint32  StackLimit;
    [WmiDataId(5),
     Description("UserStackBase") : amended,
     pointer,
     read]
     uint32  UserStackBase;
    [WmiDataId(6),
     Description("UserStackLimit") : amended,
     pointer,
     read]
     uint32  UserStackLimit;
    [WmiDataId(7),
     Description("StartAddr") : amended,
     pointer,
     read]
     uint32  StartAddr;
    [WmiDataId(8),
     Description("Win32StartAddr") : amended,
     pointer,
     read]
     uint32  Win32StartAddr;
    [WmiDataId(9),
     Description("WaitMode") : amended,
     read]
     sint8  WaitMode;
};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 EventType{2, 4},
 EventTypeName{"End", "DCEnd"} : amended
]
class Thread_V1_TypeGroup2:Thread_V1
{
    [WmiDataId(1),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
};


[Dynamic,
 Description("Context Switch Event") : amended,
 EventType(36),
 EventTypeName("CSwitch") : amended
]
class CSwitch_V1:Thread_V1
{
    [WmiDataId(1),
     Description("NewThreadId") : amended,
     format("x"),
     read]
     uint32  NewThreadId;
    [WmiDataId(2),
     Description("OldThreadId") : amended,
     format("x"),
     read]
     uint32  OldThreadId;
    [WmiDataId(3),
     Description("NewThreadPriority") : amended,
     read]
     sint8  NewThreadPriority;
    [WmiDataId(4),
     Description("OldThreadPriority") : amended,
     read]
     sint8  OldThreadPriority;
    [WmiDataId(5),
     Description("NewThreadQuantum") : amended,
     read]
     sint8  NewThreadQuantum;
    [WmiDataId(6),
     Description("OldThreadQuantum") : amended,
     read]
     sint8  OldThreadQuantum;
    [WmiDataId(7),
     Description("OldThreadWaitReason") : amended,
     read]
     sint8  OldThreadWaitReason;
    [WmiDataId(8),
     Description("OldThreadWaitMode") : amended,
     read]
     sint8  OldThreadWaitMode;
    [WmiDataId(9),
     Description("OldThreadState") : amended,
     read]
     sint8  OldThreadState;
    [WmiDataId(10),
     Description("OldThreadWaitIdealProcessor") : amended,
     read]
     sint8  OldThreadWaitIdealProcessor;
    [WmiDataId(11),
     Description("NewThreadWaitTime") : amended,
     format("x"),
     read]
     uint32  NewThreadWaitTime;
};

[Dynamic,
 Description("Worker Thread Event") : amended,
 EventType(57),
 EventTypeName("WorkerThread") : amended
]
class WorkerThread_V1:Thread_V1
{
    [WmiDataId(1),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(2),
     Description("StartTime") : amended,
     read]
     uint64  StartTime;
    [WmiDataId(3),
     Description("ThreadRoutine") : amended,
     pointer,
     read]
     uint32  ThreadRoutine;
};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 Guid("{3d6fa8d1-fe05-11d0-9dda-00c04fd7ba7c}"),
 EventVersion(2),
 DisplayName("Thread") : amended
]
class Thread:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Thread Create/Exit Event") : amended,
 EventType{1, 2, 3, 4},
 EventTypeName{"Start", "End", "DCStart", "DCEnd"} : amended
]
class Thread_TypeGroup1:Thread
{
    [WmiDataId(1),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(3),
     Description("StackBase") : amended,
     pointer,
     read]
     uint32  StackBase;
    [WmiDataId(4),
     Description("StackLimit") : amended,
     pointer,
     read]
     uint32  StackLimit;
    [WmiDataId(5),
     Description("UserStackBase") : amended,
     pointer,
     read]
     uint32  UserStackBase;
    [WmiDataId(6),
     Description("UserStackLimit") : amended,
     pointer,
     read]
     uint32  UserStackLimit;
    [WmiDataId(7),
     Description("StartAddr") : amended,
     pointer,
     read]
     uint32  StartAddr;
    [WmiDataId(8),
     Description("Win32StartAddr") : amended,
     pointer,
     read]
     uint32  Win32StartAddr;
    [WmiDataId(9),
     Description("TebBase") : amended,
     pointer,
     read]
     uint32  TebBase;
    [WmiDataId(10),
     Description("SubProcessTag") : amended,
     format("x"),
     read]
     uint32  SubProcessTag;
};

[Dynamic,
 Description("Context Switch Event") : amended,
 EventType(36),
 EventTypeName("CSwitch") : amended
]
class CSwitch:Thread
{
    [WmiDataId(1),
     Description("NewThreadId") : amended,
     format("x"),
     read]
     uint32  NewThreadId;
    [WmiDataId(2),
     Description("OldThreadId") : amended,
     format("x"),
     read]
     uint32  OldThreadId;
    [WmiDataId(3),
     Description("NewThreadPriority") : amended,
     read]
     sint8  NewThreadPriority;
    [WmiDataId(4),
     Description("OldThreadPriority") : amended,
     read]
     sint8  OldThreadPriority;
    [WmiDataId(5),
     Description("PreviousCState") : amended,
     read]
     uint8  PreviousCState;
    [WmiDataId(6),
     Description("SpareByte") : amended,
     read]
     sint8  SpareByte;
    [WmiDataId(7),
     Description("OldThreadWaitReason") : amended,
     read]
     sint8  OldThreadWaitReason;
    [WmiDataId(8),
     Description("OldThreadWaitMode") : amended,
     read]
     sint8  OldThreadWaitMode;
    [WmiDataId(9),
     Description("OldThreadState") : amended,
     read]
     sint8  OldThreadState;
    [WmiDataId(10),
     Description("OldThreadWaitIdealProcessor") : amended,
     read]
     sint8  OldThreadWaitIdealProcessor;
    [WmiDataId(11),
     Description("NewThreadWaitTime") : amended,
     format("x"),
     read]
     uint32  NewThreadWaitTime;
    [WmiDataId(12),
     Description("Reserved") : amended,
     read]
     uint32  Reserved;
};

[Dynamic,
 Description("Compressed CS Event") : amended,
 EventType(37),
 EventTypeName("CompCS") : amended
]
class CompCS:Thread
{
};

[Dynamic,
 Description("Worker Thread Event") : amended,
 EventType(57),
 EventTypeName("WorkerThread") : amended
]
class WorkerThread:Thread
{
    [WmiDataId(1),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(2),
     Description("StartTime") : amended,
     read]
     uint64  StartTime;
    [WmiDataId(3),
     Description("ThreadRoutine") : amended,
     pointer,
     read]
     uint32  ThreadRoutine;
};

[Dynamic,
 Description("Processor Reserve Create Event") : amended,
 EventType(48),
 EventTypeName("ReserveCreate") : amended
]
class ReserveCreate:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("Period") : amended,
     read]
     uint32  Period;
    [WmiDataId(3),
     Description("Budget") : amended,
     read]
     uint32  Budget;
    [WmiDataId(4),
     Description("ObjectFlags") : amended,
     read]
     uint32  ObjectFlags;
    [WmiDataId(5),
     Description("Processor") : amended,
     read]
     sint8  Processor;
};

[Dynamic,
 Description("Processor Reserve Delete Event") : amended,
 EventType(49),
 EventTypeName("ReserveDelete") : amended
]
class ReserveDelete:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
};

[Dynamic,
 Description("Processor Reserve JoinThread Event") : amended,
 EventType(52),
 EventTypeName("ReserveJoinThread") : amended
]
class ReserveJoinThread:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
};

[Dynamic,
 Description("Processor Reserve DisjoinThread Event") : amended,
 EventType(53),
 EventTypeName("ReserveDisjoinThread") : amended
]
class ReserveDisjoinThread:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
};

[Dynamic,
 Description("Processor Reserve State Event") : amended,
 EventType(54),
 EventTypeName("ReserveState") : amended
]
class ReserveState:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("DispatchState") : amended,
     read]
     sint8  DispatchState;
    [WmiDataId(3),
     Description("Replenished") : amended,
     read]
     boolean  Replenished;
};

[Dynamic,
 Description("Processor Reserve Bandwidth Event") : amended,
 EventType(55),
 EventTypeName("ReserveBandwidth") : amended
]
class ReserveBandwidth:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("Period") : amended,
     read]
     uint32  Period;
    [WmiDataId(3),
     Description("Budget") : amended,
     read]
     uint32  Budget;
};

[Dynamic,
 Description("Processor Reserve LateCount Event") : amended,
 EventType(56),
 EventTypeName("ReserveLateCount") : amended
]
class ReserveLateCount:Thread
{
    [WmiDataId(1),
     Description("Reserve") : amended,
     pointer,
     read]
     uint32  Reserve;
    [WmiDataId(2),
     Description("LateCountIncrement") : amended,
     read]
     sint32  LateCountIncrement;
};

[Dynamic,
 Description("I/O Read/Write Event") : amended,
 Guid("{3d6fa8d4-fe05-11d0-9dda-00c04fd7ba7c}"),
 DisplayName("DiskIo") : amended
]
class DiskIo:MSNT_SystemTrace
{

};

[Dynamic,
 Description("I/O Read/Write Event") : amended,
 EventType{10, 11},
 EventTypeName{"Read", "Write"} : amended
]
class DiskIo_TypeGroup1:DiskIo
{
    [WmiDataId(1),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(2),
     Description("IrpFlags") : amended,
     format("x"),
     read]
     uint32  IrpFlags;
    [WmiDataId(3),
     Description("TransferSize") : amended,
     read]
     uint32  TransferSize;
    [WmiDataId(4),
     Description("Reserved") : amended,
     read]
     uint32  Reserved;
    [WmiDataId(5),
     Description("ByteOffset") : amended,
     read]
     uint64  ByteOffset;
    [WmiDataId(6),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(7),
     Description("IORequestPacket") : amended,
     pointer,
     read]
     uint32  Irp;
    [WmiDataId(8),
     Description("HighResResponseTime") : amended,
     read]
     uint64  HighResResponseTime;
};

[Dynamic,
 Description("I/O Read/Write/Flush Start Event") : amended,
 EventType{12, 13, 15},
 EventTypeName{"ReadInit", "WriteInit", "FlushInit"} : amended
]
class DiskIo_TypeGroup2:DiskIo
{
    [WmiDataId(1),
     Description("IORequestPacket") : amended,
     pointer,
     read]
     uint32  Irp;
};

[Dynamic,
 Description("I/O Flush Buffers Event") : amended,
 EventType(14),
 EventTypeName("FlushBuffers") : amended
]
class DiskIo_TypeGroup3:DiskIo
{
    [WmiDataId(1),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(2),
     Description("IrpFlags") : amended,
     format("x"),
     read]
     uint32  IrpFlags;
    [WmiDataId(3),
     Description("HighResResponseTime") : amended,
     read]
     uint64  HighResResponseTime;
    [WmiDataId(4),
     Description("IORequestPacket") : amended,
     pointer,
     read]
     uint32  Irp;
};

[Dynamic,
 Description("Driver Major Function Call") : amended,
 EventType(34),
 EventTypeName("DrvMjFnCall") : amended
]
class DriverMajorFunctionCall:DiskIo
{
    [WmiDataId(1),
     Description("MajorFunction") : amended,
     read]
     uint32  MajorFunction;
    [WmiDataId(2),
     Description("MinorFunction") : amended,
     read]
     uint32  MinorFunction;
    [WmiDataId(3),
     Description("RoutineAddr") : amended,
     pointer,
     read]
     uint32  RoutineAddr;
    [WmiDataId(4),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(5),
     Description("Irp") : amended,
     pointer,
     read]
     uint32  Irp;
    [WmiDataId(6),
     Description("UniqMatchId") : amended,
     read]
     uint32  UniqMatchId;
};

[Dynamic,
 Description("Driver Major Function Return") : amended,
 EventType(35),
 EventTypeName("DrvMjFnRet") : amended
]
class DriverMajorFunctionReturn:DiskIo
{
    [WmiDataId(1),
     Description("Irp") : amended,
     pointer,
     read]
     uint32  Irp;
    [WmiDataId(2),
     Description("UniqMatchId") : amended,
     read]
     uint32  UniqMatchId;
};

[Dynamic,
 Description("Driver Completion Routine") : amended,
 EventType(37),
 EventTypeName("DrvComplRout") : amended
]
class DriverCompletionRoutine:DiskIo
{
    [WmiDataId(1),
     Description("Routine") : amended,
     pointer,
     read]
     uint32  Routine;
    [WmiDataId(2),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(3),
     Description("UniqMatchId") : amended,
     read]
     uint32  UniqMatchId;
};

[Dynamic,
 Description("Driver Complete Request") : amended,
 EventType(52),
 EventTypeName("DrvComplReq") : amended
]
class DriverCompleteRequest:DiskIo
{
    [WmiDataId(1),
     Description("RoutineAddr") : amended,
     pointer,
     read]
     uint32  RoutineAddr;
    [WmiDataId(2),
     Description("Irp") : amended,
     pointer,
     read]
     uint32  Irp;
    [WmiDataId(3),
     Description("UniqMatchId") : amended,
     read]
     uint32  UniqMatchId;
};

[Dynamic,
 Description("Driver Delay Complete Request Return") : amended,
 EventType(53),
 EventTypeName("DrvComplReqRet") : amended
]
class DriverCompleteRequestReturn:DiskIo
{
    [WmiDataId(1),
     Description("Irp") : amended,
     pointer,
     read]
     uint32  Irp;
    [WmiDataId(2),
     Description("UniqMatchId") : amended,
     read]
     uint32  UniqMatchId;
};

[Dynamic,
 Description("Registry") : amended,
 Guid("{ae53722e-c863-11d2-8659-00c04fa321a1}"),
 EventVersion(0),
 DisplayName("Registry") : amended
]
class Registry_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Registry") : amended,
 EventType{10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21},
 EventTypeName{"Create", "Open", "Delete", "Query", "SetValue", "DeleteValue", "QueryValue", "EnumerateKey", "EnumerateValueKey", "QueryMultipleValue", "SetInformation", "Flush"} : amended
]
class Registry_V0_TypeGroup1:Registry_V0
{
    [WmiDataId(1),
     Description("Status") : amended,
     pointer,
     read]
     uint32  Status;
    [WmiDataId(2),
     Description("KeyHandle") : amended,
     pointer,
     read]
     uint32  KeyHandle;
    [WmiDataId(3),
     Description("ElapsedTime") : amended,
     read]
     sint64  ElapsedTime;
    [WmiDataId(4),
     Description("KeyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  KeyName;
};

[Dynamic,
 Description("Registry") : amended,
 Guid("{ae53722e-c863-11d2-8659-00c04fa321a1}"),
 EventVersion(1),
 DisplayName("Registry") : amended
]
class Registry_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Registry") : amended,
 EventType{10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22},
 EventTypeName{"Create", "Open", "Delete", "Query", "SetValue", "DeleteValue", "QueryValue", "EnumerateKey", "EnumerateValueKey", "QueryMultipleValue", "SetInformation", "Flush", "RunDown"} : amended
]
class Registry_V1_TypeGroup1:Registry_V1
{
    [WmiDataId(1),
     Description("Status") : amended,
     pointer,
     read]
     uint32  Status;
    [WmiDataId(2),
     Description("KeyHandle") : amended,
     pointer,
     read]
     uint32  KeyHandle;
    [WmiDataId(3),
     Description("ElapsedTime") : amended,
     read]
     sint64  ElapsedTime;
    [WmiDataId(4),
     Description("Index") : amended,
     read]
     uint32  Index;
    [WmiDataId(5),
     Description("KeyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  KeyName;
};

[Dynamic,
 Description("Registry") : amended,
 Guid("{ae53722e-c863-11d2-8659-00c04fa321a1}"),
 EventVersion(2),
 DisplayName("Registry") : amended
]
class Registry:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Registry") : amended,
 EventType{10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
 EventTypeName{"Create", "Open", "Delete", "Query", "SetValue", "DeleteValue", "QueryValue", "EnumerateKey", "EnumerateValueKey", "QueryMultipleValue", "SetInformation", "Flush", "KCBCreate", "KCBDelete", "KCBRundownBegin", "KCBRundownEnd", "Virtualize", "Close"} : amended
]
class Registry_TypeGroup1:Registry
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     read]
     sint64  InitialTime;

    [WmiDataId(2),
     Description("Status") : amended,
     read]
     uint32  Status;

    [WmiDataId(3),
     Description("Index") : amended,
     read]
     uint32  Index;

    [WmiDataId(4),
     Description("KeyHandle") : amended,
     pointer,
     read]
     uint32  KeyHandle;

    [WmiDataId(5),
     Description("KeyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  KeyName;
};


[Dynamic,
 Description("Split IO Event") : amended,
 Guid("{d837ca92-12b9-44a5-ad6a-3a65b3578aa8}"),
 DisplayName("SplitIo") : amended,
 locale("MS\\0x409")
]
class SplitIo:MSNT_SystemTrace
{
};

[Dynamic,
 Description("Split IO") : amended,
 EventType(32),
 EventTypeName("VolMgr") : amended,
 locale("MS\\0x409")
]
class SplitIo_Info:SplitIo
{
    [WmiDataId(1),
     Description("ParentIrp") : amended,
     pointer,
     read]
     uint32  ParentIrp;
    [WmiDataId(2),
     Description("ChildIrp") : amended,
     pointer,
     read]
     uint32  ChildIrp;
};

[Dynamic,
 Description("File Name") : amended,
 Guid("{90cbdc39-4a3e-11d1-84f4-0000f80464e3}"),
 EventVersion(0),
 DisplayName("FileIo") : amended
]
class FileIo_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("File Name") : amended,
 EventType(0),
 EventTypeName("Name") : amended
]
class FileIo_V0_Name:FileIo_V0
{
    [WmiDataId(1),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(2),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;
};

[Dynamic,
 Description("File Name") : amended,
 Guid("{90cbdc39-4a3e-11d1-84f4-0000f80464e3}"),
 EventVersion(1),
 DisplayName("FileIo") : amended
]
class FileIo_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("File Name") : amended,
 EventType{0, 32},
 EventTypeName{"Name", "FileCreate"} : amended
]
class FileIo_V1_Name:FileIo_V1
{
    [WmiDataId(1),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(2),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;
};

[Dynamic,
 Description("File Name") : amended,
 Guid("{90cbdc39-4a3e-11d1-84f4-0000f80464e3}"),
 EventVersion(2),
 DisplayName("FileIo") : amended
]
class FileIo:MSNT_SystemTrace
{

};

[Dynamic,
 Description("File Name") : amended,
 EventType{0, 32, 35, 36},
 EventTypeName{"Name", "FileCreate", "FileDelete", "FileRundown"} : amended
]
class FileIo_Name:FileIo
{
    [WmiDataId(1),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(2),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;
};

[Dynamic,
 Description("File Create") : amended,
 EventType(64),
 EventTypeName("Create") : amended
]
class FileIo_Create:FileIo
{
    [WmiDataId(1),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(2),
     Description("TTID") : amended,
     pointer,
     read]
     uint32  TTID;
    [WmiDataId(3),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(4),
     Description("CreateOptions") : amended,
     read]
     uint32  CreateOptions;
    [WmiDataId(5),
     Description("FileAttributes") : amended,
     read]
     uint32  FileAttributes;
    [WmiDataId(6),
     Description("ShareAccess") : amended,
     read]
     uint32  ShareAccess;
    [WmiDataId(7),
     Description("OpenPath") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  OpenPath;
};

[Dynamic,
 Description("File Simple Operation") : amended,
 EventType{65, 66, 73},
 EventTypeName{"Cleanup", "Close", "Flush"} : amended
]
class FileIo_SimpleOp:FileIo
{
    [WmiDataId(1),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(2),
     Description("TTID") : amended,
     pointer,
     read]
     uint32  TTID;
    [WmiDataId(3),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(4),
     Description("FileKey") : amended,
     pointer,
     read]
     uint32  FileKey;
};

[Dynamic,
 Description("File Read Write") : amended,
 EventType{67, 68},
 EventTypeName{"Read", "Write"} : amended
]
class FileIo_ReadWrite:FileIo
{
    [WmiDataId(1),
     Description("Offset") : amended,
     read]
     uint64  Offset;
    [WmiDataId(2),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(3),
     Description("TTID") : amended,
     pointer,
     read]
     uint32  TTID;
    [WmiDataId(4),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(5),
     Description("FileKey") : amended,
     pointer,
     read]
     uint32  FileKey;
    [WmiDataId(6),
     Description("IoSize") : amended,
     read]
     uint32  IoSize;
    [WmiDataId(7),
     Description("IoFlags") : amended,
     read]
     uint32  IoFlags;
};


[Dynamic,
 Description("File Information") : amended,
 EventType{69, 70, 71, 74, 75},
 EventTypeName{"SetInfo", "Delete", "Rename", "QueryInfo", "FSControl"} : amended
]
class FileIo_Info:FileIo
{
    [WmiDataId(1),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(2),
     Description("TTID") : amended,
     pointer,
     read]
     uint32  TTID;
    [WmiDataId(3),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(4),
     Description("FileKey") : amended,
     pointer,
     read]
     uint32  FileKey;
    [WmiDataId(5),
     Description("ExtraInfo") : amended,
     pointer,
     read]
     uint32  ExtraInfo;
    [WmiDataId(6),
     Description("InfoClass") : amended,
     read]
     uint32  InfoClass;
};

[Dynamic,
 Description("File Dir Enum") : amended,
 EventType{72, 77},
 EventTypeName{"DirEnum", "DirNotify"} : amended
]
class FileIo_DirEnum:FileIo
{
    [WmiDataId(1),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(2),
     Description("TTID") : amended,
     pointer,
     read]
     uint32  TTID;
    [WmiDataId(3),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(4),
     Description("FileKey") : amended,
     pointer,
     read]
     uint32  FileKey;
    [WmiDataId(5),
     Description("Length") : amended,
     read]
     uint32  Length;
    [WmiDataId(6),
     Description("InfoClass") : amended,
     read]
     uint32  InfoClass;
    [WmiDataId(7),
     Description("FileIndex") : amended,
     read]
     uint32  FileIndex;
    [WmiDataId(8),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;
};


[Dynamic,
 Description("File Operation End") : amended,
 EventType(76),
 EventTypeName("OperationEnd") : amended
]
class FileIo_OpEnd:FileIo
{
    [WmiDataId(1),
     Description("IrpPtr") : amended,
     pointer,
     read]
     uint32  IrpPtr;
    [WmiDataId(2),
     Description("ExtraInfo") : amended,
     pointer,
     read]
     uint32  ExtraInfo;
    [WmiDataId(3),
     Description("NtStatus") : amended,
     read]
     uint32  NtStatus;
};

[Dynamic,
 Description("TcpIp Send/Receive") : amended,
 Guid("{9a280ac0-c8e0-11d1-84e2-00c04fb998a2}"),
 EventVersion(0),
 DisplayName("TcpIp") : amended
]
class TcpIp_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("TcpIp Send/Receive") : amended,
 EventType{10, 11, 12, 13, 14, 15},
 EventTypeName{"Send", "Recv", "Connect", "Disconnect", "Retransmit", "Accept"} : amended
]
class TcpIp_V0_TypeGroup1:TcpIp_V0
{
    [WmiDataId(1),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(2),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(3),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(4),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(5),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(6),
     Description("Process ID") : amended,
     read]
     uint32  PID;
};

[Dynamic,
 Description("TcpIp Send/Receive") : amended,
 Guid("{9a280ac0-c8e0-11d1-84e2-00c04fb998a2}"),
 EventVersion(1),
 DisplayName("TcpIp") : amended
]
class TcpIp_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("TcpIp Receive") : amended,
  EventType(11),
  EventTypeName("Recv") : amended
]
class TcpIp_V1_Receive:TcpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
    [WmiDataId(8),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
};

[Dynamic,
 Description("TcpIp Disconnect") : amended,
  EventType{13, 14, 16},
  EventTypeName{"Disconnect", "Retransmit", "Reconnect"} : amended
]
class TcpIp_V1_TypeGroup1:TcpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
    [WmiDataId(8),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
};

[Dynamic,
 Description("TcpIp Connect/Accept") : amended,
 EventType{12, 15},
 EventTypeName{"Connect", "Accept"} : amended
]
class TcpIp_V1_TypeGroup2:TcpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
    Description("MSS") : amended,
    read]
    uint16 mss;
    [WmiDataId(8),
    Description("SACK Option") : amended,
    read]
    uint16 sackopt;
    [WmiDataId(9),
    Description("TimeStamp Option") : amended,
    read]
    uint16 tsopt;
    [WmiDataId(10),
    Description("WindowScale Option") : amended,
    read]
    uint16 wsopt;
    [WmiDataId(11),
    Description("TCP Window Size") : amended,
    read]
    uint32 rcvwin;
    [WmiDataId(12),
    Description("Receive Window Scale") : amended,
    read]
    sint16 rcvwinscale;
    [WmiDataId(13),
    Description("Send Window Scale") : amended,
    read]
    sint16 sndwinscale;
    [WmiDataId(14),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
    [WmiDataId(15),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
};

[Dynamic,
 Description("TcpIp Fail") : amended,
 EventType(17),
 EventTypeName("Fail") : amended
]
class TcpIp_V1_Fail:TcpIp_V1
{
    [WmiDataId(1),
     Description("Protocol") : amended,
     read]
     uint32  Proto;
};

[Dynamic,
 Description("TcpIp Send") : amended,
 EventType(10),
 EventTypeName("Send") : amended
]
class TcpIp_V1_Send:TcpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Start SendReq Time") : amended,
     read]
     uint32 startime;
    [WmiDataId(8),
     Description("End SendReq Time") : amended,
     read]
     uint32 endtime;
    [WmiDataId(9),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
    [WmiDataId(10),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
};

[Dynamic,
 Description("TcpIp Copy/ACK") : amended,
 EventType{18, 19, 20, 21, 22},
 EventTypeName{"TCPCopy", "ARPCopy", "FullACK", "PartACK", "DupACK"} : amended
]
class TcpIp_V1_TypeGroup3:TcpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
    [WmiDataId(8),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
};

[Dynamic,
 Description("TcpIp Send/Receive") : amended,
 Guid("{9a280ac0-c8e0-11d1-84e2-00c04fb998a2}"),
 EventVersion(2),
 DisplayName("TcpIp") : amended
]
class TcpIp:MSNT_SystemTrace
{

};

[Dynamic,
 Description("TcpIp IPV4 Send") : amended,
 EventType(10),
 EventTypeName("SendIPV4") : amended
]
class TcpIp_SendIPV4:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Start SendReq Time") : amended,
     read]
     uint32 startime;
    [WmiDataId(8),
     Description("End SendReq Time") : amended,
     read]
     uint32 endtime;
    [WmiDataId(9),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(10),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("TcpIp IPV4 Generic") : amended,
  EventType{11, 13, 14, 16, 18},
  EventTypeName{"RecvIPV4", "DisconnectIPV4", "RetransmitIPV4", "ReconnectIPV4", "TCPCopyIPV4"} : amended
]
class TcpIp_TypeGroup1:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(8),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("TcpIp IPV4 Connect/Accept") : amended,
 EventType{12, 15},
 EventTypeName{"ConnectIPV4", "AcceptIPV4"} : amended
]
class TcpIp_TypeGroup2:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("MSS") : amended,
     read]
     uint16 mss;
    [WmiDataId(8),
     Description("SACK Option") : amended,
     read]
     uint16 sackopt;
    [WmiDataId(9),
     Description("TimeStamp Option") : amended,
     read]
     uint16 tsopt;
    [WmiDataId(10),
     Description("WindowScale Option") : amended,
     read]
     uint16 wsopt;
    [WmiDataId(11),
     Description("TCP Window Size") : amended,
     read]
     uint32 rcvwin;
    [WmiDataId(12),
     Description("Receive Window Scale") : amended,
     read]
     sint16 rcvwinscale;
    [WmiDataId(13),
     Description("Send Window Scale") : amended,
     read]
     sint16 sndwinscale;
    [WmiDataId(14),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(15),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("TcpIp Fail") : amended,
 EventType(17),
 EventTypeName("Fail") : amended
]
class TcpIp_Fail:TcpIp
{
    [WmiDataId(1),
     Description("Protocol") : amended,
     read]
     uint16  Proto;
    [WmiDataId(2),
     Description("FailureCode") : amended,
     read]
     uint16  FailureCode;
};

[Dynamic,
 Description("TcpIp IPV6 Send") : amended,
 EventType(26),
 EventTypeName("SendIPV6") : amended
]
class TcpIp_SendIPV6:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Start SendReq Time") : amended,
     read]
     uint32 startime;
    [WmiDataId(8),
     Description("End SendReq Time") : amended,
     read]
     uint32 endtime;
    [WmiDataId(9),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(10),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("TcpIp IPV6 Generic") : amended,
  EventType{27, 29, 30, 32, 34},
  EventTypeName{"RecvIPV6", "DisconnectIPV6", "RetransmitIPV6", "ReconnectIPV6", "TCPCopyIPV6"} : amended
]
class TcpIp_TypeGroup3:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(8),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("TcpIp IPV6 Connect/Accept") : amended,
 EventType{28, 31},
 EventTypeName{"ConnectIPV6", "AcceptIPV6"} : amended
]
class TcpIp_TypeGroup4:TcpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("MSS") : amended,
     read]
     uint16 mss;
    [WmiDataId(8),
     Description("SACK Option") : amended,
     read]
     uint16 sackopt;
    [WmiDataId(9),
     Description("TimeStamp Option") : amended,
     read]
     uint16 tsopt;
    [WmiDataId(10),
     Description("WindowScale Option") : amended,
     read]
     uint16 wsopt;   
    [WmiDataId(11),
     Description("TCP Window Size") : amended,
     read]
     uint32 rcvwin;
    [WmiDataId(12),
     Description("Receive Window Scale") : amended,
     read]
     sint16 rcvwinscale;
    [WmiDataId(13),
     Description("Send Window Scale") : amended,
     read]
     sint16 sndwinscale;
    [WmiDataId(14),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(15),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("UdpIp Send/Receive") : amended,
 Guid("{bf3a50c5-a9c9-4988-a005-2df0b7c80f80}"),
 EventVersion(0),
 DisplayName("UdpIp") : amended
]
class UdpIp_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("UdpIp Send/Receive") : amended,
 EventType{10, 11},
 EventTypeName{"Send", "Recv"} : amended
]
class UdpIp_V0_TypeGroup1:UdpIp_V0
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     pointer,
     read]
     uint32  context;
    [WmiDataId(2),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(3),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(4),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint16  size;
    [WmiDataId(5),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(6),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(7),
     Description("Number of Bytes successfully sent") : amended,
     read]
     uint16  dsize;
};

[Dynamic,
 Description("UdpIp Send/Receive") : amended,
 Guid("{bf3a50c5-a9c9-4988-a005-2df0b7c80f80}"),
 EventVersion(1),
 DisplayName("UdpIp") : amended
]
class UdpIp_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("UdpIp Send/Receive") : amended,
 EventType{10, 11},
 EventTypeName{"Send", "Recv"} : amended
]
class UdpIp_V1_TypeGroup1:UdpIp_V1
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddr"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddr"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
};

[Dynamic,
 Description("UdpIp Send/Receive") : amended,
 Guid("{bf3a50c5-a9c9-4988-a005-2df0b7c80f80}"),
 EventVersion(2),
 DisplayName("UdpIp") : amended
]
class UdpIp:MSNT_SystemTrace
{

};

[Dynamic,
 Description("UdpIp IPV4 Send/Receive") : amended,
 EventType{10, 11},
 EventTypeName{"SendIPV4", "RecvIPV4"} : amended
]
class UdpIp_TypeGroup1:UdpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV4"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(8),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("UdpIp Fail") : amended,
 EventType(17),
 EventTypeName("Fail") : amended
]
class UdpIp_Fail:UdpIp
{
    [WmiDataId(1),
     Description("Protocol") : amended,
     read]
     uint16  Proto;
    [WmiDataId(2),
     Description("FailureCode") : amended,
     read]
     uint16  FailureCode;
};

[Dynamic,
 Description("UdpIp IPV6 Send/Receive") : amended,
 EventType{26, 27},
 EventTypeName{"SendIPV6", "RecvIPV6"} : amended
]
class UdpIp_TypeGroup2:UdpIp
{
    [WmiDataId(1),
     Description("Process ID") : amended,
     read]
     uint32  PID;
    [WmiDataId(2),
     Description("Transfer Size in Bytes") : amended,
     read]
     uint32  size;
    [WmiDataId(3),
     Description("Remote IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  daddr;
    [WmiDataId(4),
     Description("Local IP Address") : amended,
     extension("IPAddrV6"),
     read]
     object  saddr;
    [WmiDataId(5),
     Description("Remote Port") : amended,
     extension("Port"),
     read]
     object  dport;
    [WmiDataId(6),
     Description("Local Port") : amended,
     extension("Port"),
     read]
     object  sport;
    [WmiDataId(7),
     Description("Sequence Number") : amended,
     read]
     uint32 seqnum;
    [WmiDataId(8),
     Description("ConnID") : amended,
     PointerType,
     read]
     uint32 connid;
};

[Dynamic,
 Description("Image Load") : amended,
 Guid("{2cb15d1d-5fc1-11d2-abe1-00a0c911f518}"),
 EventVersion(0),
 DisplayName("Image") : amended
]
class Image_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Image Load") : amended,
 EventType(10),
 EventTypeName("Load") : amended
]
class Image_V0_Load:Image_V0
{
    [WmiDataId(1),
     Description("BaseAddress") : amended,
     pointer,
     read]
     uint32  BaseAddress;
    [WmiDataId(2),
     Description("ModuleSize") : amended,
     read]
     uint32  ModuleSize;
    [WmiDataId(3),
     Description("ImageFileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  ImageFileName;
};

[Dynamic,
 Description("Image Load") : amended,
 Guid("{2cb15d1d-5fc1-11d2-abe1-00a0c911f518}"),
 EventVersion(1),
 DisplayName("Image") : amended
]
class Image_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Image Load") : amended,
 EventType(10),
 EventTypeName("Load") : amended
]
class Image_V1_Load:Image_V1
{
    [WmiDataId(1),
     Description("ImageBase") : amended,
     pointer,
     read]
     uint32  ImageBase;
    [WmiDataId(2),
     Description("ImageSize") : amended,
     pointer,
     read]
     uint32  ImageSize;
    [WmiDataId(3),
     Description("ProcessId") : amended,
     read]
     uint32  ProcessId;
    [WmiDataId(4),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;

};

[Dynamic,
 Description("Image Load") : amended,
 Guid("{2cb15d1d-5fc1-11d2-abe1-00a0c911f518}"),
 EventVersion(2),
 DisplayName("Image") : amended
]
class Image:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Image Load") : amended,
 EventType{10, 2, 3, 4},
 EventTypeName{"Load", "UnLoad", "DCStart", "DCEnd"} : amended
]
class Image_Load:Image
{
    [WmiDataId(1),
     Description("ImageBase") : amended,
     pointer,
     read]
     uint32  ImageBase;
    [WmiDataId(2),
     Description("ImageSize") : amended,
     pointer,
     read]
     uint32  ImageSize;
    [WmiDataId(3),
     Description("ProcessId") : amended,
     read]
     uint32  ProcessId;
    [WmiDataId(4),
     Description("ImageChecksum") : amended,
     read]
     uint32  ImageChecksum;
    [WmiDataId(5),
     Description("TimeDateStamp") : amended,
     read]
     uint32  TimeDateStamp;
    [WmiDataId(6),
     Description("Reserved0") : amended,
     read]
     uint32  Reserved0;
    [WmiDataId(7),
     Description("DefaultBase") : amended,
     pointer,
     read]
     uint32  DefaultBase;
    [WmiDataId(8),
     Description("Reserved1") : amended,
     read]
     uint32  Reserved1;
    [WmiDataId(9),
     Description("Reserved2") : amended,
     read]
     uint32  Reserved2;
    [WmiDataId(10),
     Description("Reserved3") : amended,
     read]
     uint32  Reserved3;
    [WmiDataId(11),
     Description("Reserved4") : amended,
     read]
     uint32  Reserved4;
    [WmiDataId(12),
     Description("FileName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string  FileName;

};

[Dynamic,
 Description("Page Fault Event") : amended,
 Guid("{3d6fa8d3-fe05-11d0-9dda-00c04fd7ba7c}"),
 DisplayName("PageFault") : amended
]
class PageFault:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Page Fault Event") : amended,
 EventType{10, 11, 12, 13, 14, 15},
 EventTypeName{"TransitionFault", "DemandZeroFault", "CopyOnWrite", "GuardPageFault", "HardPageFault", "AccessViolation"} : amended
]
class PageFault_TypeGroup1:PageFault
{
    [WmiDataId(1),
     Description("VirtualAddress") : amended,
     pointer,
     read]
     uint32  VirtualAddress;
    [WmiDataId(2),
     Description("ProgramCounter") : amended,
     pointer,
     read]
     uint32  ProgramCounter;
};

[Dynamic,
 Description("Hard Page Fault Event") : amended,
 EventType(32),
 EventTypeName("HardFault") : amended
]
class PageFault_HardFault:PageFault
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     extension("WmiTime"),
     read]
     object  InitialTime;
    [WmiDataId(2),
     Description("ReadOffset") : amended,
     format("x"),
     read]
     uint64  ReadOffset;
    [WmiDataId(3),
     Description("VirtualAddress") : amended,
     pointer,
     read]
     uint32  VirtualAddress;
    [WmiDataId(4),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(5),
     Description("ThreadId") : amended,
     format("x"),
     read]
     uint32  TThreadId;
    [WmiDataId(6),
     Description("ByteCount") : amended,
     read]
     uint32  ByteCount;
};

[Dynamic,
 Description("Heap Range Rundown Event") : amended,
 EventType(100),
 EventTypeName("HRRundown") : amended
]
class PageFault_HeapRangeRundown:PageFault
{
    [WmiDataId(1),
     Description("HeapHandle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("HRFlags") : amended,
     format("x"),
     read]
     uint32  HRFlags;
    [WmiDataId(3),
     Description("HRPid") : amended,
     format("x"),
     read]
     uint32  HRPid;
    [WmiDataId(4),
     Description("HRRangeCount") : amended,
     read]
     uint32  HRRangeCount;
};

[Dynamic,
 Description("Heap Range Create Event") : amended,
 EventType(101),
 EventTypeName("HRCreate") : amended
]
class PageFault_HeapRangeCreate:PageFault
{
    [WmiDataId(1),
     Description("HeapHandle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("FirstRangeSize") : amended,
     extension("SizeT"),
     read]
     object  FirstRangeSize;
    [WmiDataId(3),
     Description("HRCreateFlags") : amended,
     format("x"),
     read]
     uint32  HRCreateFlags;
};

[Dynamic,
 Description("Heap Range Event") : amended,
 EventType{102, 103},
 EventTypeName{"HRReserve", "HRRelease"} : amended
]
class PageFault_HeapRangeTypeGroup:PageFault
{
    [WmiDataId(1),
     Description("HeapHandle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("HRAddress") : amended,
     pointer,
     read]
     uint32  HRAddress;
    [WmiDataId(3),
     Description("HRSize") : amended,
     extension("SizeT"),
     read]
     object  HRSize;
};

[Dynamic,
 Description("Heap Range Destroy Event") : amended,
 EventType(104),
 EventTypeName("HRDestroy") : amended
]
class PageFault_HeapRangeDestroy:PageFault
{
    [WmiDataId(1),
     Description("HeapHandle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
};

[Dynamic,
 Description("Image Load in PageFile Event") : amended,
 EventType(105),
 EventTypeName("ImageLoadBacked") : amended
]
class PageFault_ImageLoadBacked:PageFault
{
    [WmiDataId(1),
     Description("FileObject") : amended,
     pointer,
     read]
     uint32  FileObject;
    [WmiDataId(2),
     Description("DeviceChar") : amended,
     format("x"),
     read]
     uint32  DeviceChar;
    [WmiDataId(3),
     Description("FileChar") : amended,
     format("x"),
     read]
     uint16  FileChar;
    [WmiDataId(4),
     Description("LoadFlags") : amended,
     format("x"),
     read]
     uint16  LoadFlags;
};

[Dynamic,
 Description("PerfInfo Event") : amended,
 Guid("{ce1dbfb4-137e-4da6-87b0-3f59aa102cbc}"),
 EventVersion(1),
 DisplayName("PerfInfo") : amended
]
class PerfInfo_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("ISR") : amended,
 EventType(67),
 EventTypeName("ISR") : amended
]
class ISR_V1:PerfInfo_V1
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     extension("WmiTime"),
     read]
     object  InitialTime;
    [WmiDataId(2),
     Description("Routine") : amended,
     pointer,
     read]
     uint32  Routine;
    [WmiDataId(3),
     Description("Return Value") : amended,
     read]
     uint32  ReturnValue;
};


[Dynamic,
 Description("DPC") : amended,
 EventType{68, 69},
 EventTypeName{"DPC", "TimerDPC"} : amended
]
class DPC_V1:PerfInfo_V1
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     extension("WmiTime"),
     read]
     object  InitialTime;
    [WmiDataId(2),
     Description("Routine") : amended,
     pointer,
     read]
     uint32  Routine;
};

[Dynamic,
 Description("PerfInfo Event") : amended,
 Guid("{ce1dbfb4-137e-4da6-87b0-3f59aa102cbc}"),
 EventVersion(2),
 DisplayName("PerfInfo") : amended
]
class PerfInfo:MSNT_SystemTrace
{

};

[Dynamic,
 Description("Sampled Profile") : amended,
 EventType(46),
 EventTypeName("SampleProf") : amended
]
class SampledProfile:PerfInfo
{
    [WmiDataId(1),
     Description("InstructionPointer") : amended,
     pointer,
     read]
     uint32  InstructionPointer;
    [WmiDataId(2),
     Description("ThreadId") : amended,
     read]
     uint32  ThreadId;
    [WmiDataId(3),
     Description("Count") : amended,
     read]
     uint32  Count;
};

[Dynamic,
 Description("Sampled Profile Interval") : amended,
 EventType{72, 73, 74},
 EventTypeName{"SetInterval", "CollectionStart", "CollectionEnd"} : amended
]
class SampledProfileInterval:PerfInfo
{
    [WmiDataId(1),
     Description("Profile Source") : amended,
     read]
     uint32  Source;
    [WmiDataId(2),
     Description("New Interval") : amended,
     read]
     uint32  NewInterval;
    [WmiDataId(3),
     Description("Old Interval") : amended,
     read]
     uint32  OldInterval;
};



[Dynamic,
 Description("System Call Enter") : amended,
 EventType(51),
 EventTypeName("SysClEnter") : amended
]
class SysCallEnter:PerfInfo
{
    [WmiDataId(1),
     Description("SysCallAddress") : amended,
     pointer,
     read]
     uint32  SysCallAddress;
};

[Dynamic,
 Description("System Call Exit") : amended,
 EventType(52),
 EventTypeName("SysClExit") : amended
]
class SysCallExit:PerfInfo
{
    [WmiDataId(1),
     Description("SysCallNtStatus") : amended,
     format("x"),
     read]
     uint32  SysCallNtStatus;
};

[Dynamic,
 Description("ISR") : amended,
 EventType(67),
 EventTypeName("ISR") : amended
]
class ISR:PerfInfo
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     extension("WmiTime"),
     read]
     object  InitialTime;
    [WmiDataId(2),
     Description("Routine") : amended,
     pointer,
     read]
     uint32  Routine;
    [WmiDataId(3),
     Description("Return Value") : amended,
     read]
     uint8  ReturnValue;
    [WmiDataId(4),
     Description("Interrupt Vector") : amended,
     read]
     uint8  Vector;
    [WmiDataId(5),
     Description("Reserved") : amended,
     read]
     uint16  Reserved;
};



[Dynamic,
 Description("DPC") : amended,
 EventType{66, 68, 69},
 EventTypeName{"ThreadedDPC", "DPC", "TimerDPC"} : amended
]
class DPC:PerfInfo
{
    [WmiDataId(1),
     Description("Initial Time") : amended,
     extension("WmiTime"),
     read]
     object  InitialTime;
    [WmiDataId(2),
     Description("Routine") : amended,
     pointer,
     read]
     uint32  Routine;
};

[Dynamic,
 Description("Debugger Enabled") : amended,
 EventType{58},
 EventTypeName{"DebuggerEnabled"} : amended
]
class DebuggerEnabled:PerfInfo
{
};

[Dynamic,
 Description("StackWalk Event") : amended,
 Guid("{def2fe46-7bd6-4b80-bd94-f57fe20d0ce3}"),
 DisplayName("StackWalk") : amended
]
class StackWalk:MSNT_SystemTrace
{

};

[Dynamic,
 Description("StackWalk Event") : amended,
 EventType(32),
 EventTypeName("Stack") : amended
]
class StackWalk_Event:StackWalk
{
    [WmiDataId(1),
     Description("TimeStamp") : amended,
     read]
     uint64  EventTimeStamp;
    [WmiDataId(2),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  StackProcess;
    [WmiDataId(3),
     Description("ThreadId") : amended,
     read]
     uint32  StackThread;
    [WmiDataId(4),
     Description("Stack1") : amended,
     pointer,
     read]
     uint32  Stack1;
    [WmiDataId(5),
     Description("Stack2") : amended,
     pointer,
     read]
     uint32  Stack2;
    [WmiDataId(6),
     Description("Stack3") : amended,
     pointer,
     read]
     uint32  Stack3;
    [WmiDataId(7),
     Description("Stack4") : amended,
     pointer,
     read]
     uint32  Stack4;
    [WmiDataId(8),
     Description("Stack5") : amended,
     pointer,
     read]
     uint32  Stack5;
    [WmiDataId(9),
     Description("Stack6") : amended,
     pointer,
     read]
     uint32  Stack6;
    [WmiDataId(10),
     Description("Stack7") : amended,
     pointer,
     read]
     uint32  Stack7;
    [WmiDataId(11),
     Description("Stack8") : amended,
     pointer,
     read]
     uint32  Stack8;
    [WmiDataId(12),
     Description("Stack9") : amended,
     pointer,
     read]
     uint32  Stack9;
    [WmiDataId(13),
     Description("Stack10") : amended,
     pointer,
     read]
     uint32  Stack10;
    [WmiDataId(14),
     Description("Stack11") : amended,
     pointer,
     read]
     uint32  Stack11;
    [WmiDataId(15),
     Description("Stack12") : amended,
     pointer,
     read]
     uint32  Stack12;
    [WmiDataId(16),
     Description("Stack13") : amended,
     pointer,
     read]
     uint32  Stack13;
    [WmiDataId(17),
     Description("Stack14") : amended,
     pointer,
     read]
     uint32  Stack14;
    [WmiDataId(18),
     Description("Stack15") : amended,
     pointer,
     read]
     uint32  Stack15;
    [WmiDataId(19),
     Description("Stack16") : amended,
     pointer,
     read]
     uint32  Stack16;
    [WmiDataId(20),
     Description("Stack17") : amended,
     pointer,
     read]
     uint32  Stack17;
    [WmiDataId(21),
     Description("Stack18") : amended,
     pointer,
     read]
     uint32  Stack18;
    [WmiDataId(22),
     Description("Stack19") : amended,
     pointer,
     read]
     uint32  Stack19;
    [WmiDataId(23),
     Description("Stack20") : amended,
     pointer,
     read]
     uint32  Stack20;
    [WmiDataId(24),
     Description("Stack21") : amended,
     pointer,
     read]
     uint32  Stack21;
    [WmiDataId(25),
     Description("Stack22") : amended,
     pointer,
     read]
     uint32  Stack22;
    [WmiDataId(26),
     Description("Stack23") : amended,
     pointer,
     read]
     uint32  Stack23;
    [WmiDataId(27),
     Description("Stack24") : amended,
     pointer,
     read]
     uint32  Stack24;
    [WmiDataId(28),
     Description("Stack25") : amended,
     pointer,
     read]
     uint32  Stack25;
    [WmiDataId(29),
     Description("Stack26") : amended,
     pointer,
     read]
     uint32  Stack26;
    [WmiDataId(30),
     Description("Stack27") : amended,
     pointer,
     read]
     uint32  Stack27;
    [WmiDataId(31),
     Description("Stack28") : amended,
     pointer,
     read]
     uint32  Stack28;
    [WmiDataId(32),
     Description("Stack29") : amended,
     pointer,
     read]
     uint32  Stack29;
    [WmiDataId(33),
     Description("Stack30") : amended,
     pointer,
     read]
     uint32  Stack30;
    [WmiDataId(34),
     Description("Stack31") : amended,
     pointer,
     read]
     uint32  Stack31;
    [WmiDataId(35),
     Description("Stack32") : amended,
     pointer,
     read]
     uint32  Stack32;

};


[Dynamic,
 Description("ALPC Event") : amended,
 Guid("{45d8cccd-539f-4b72-a8b7-5c683142609a}"),
 DisplayName("ALPC") : amended
]
class ALPC:MSNT_SystemTrace
{

};

[Dynamic,
 Description("ALPC Send Message") : amended,
 EventType(33),
 EventTypeName("ALPC-Send-Message") : amended
]
class ALPC_Send_Message:ALPC
{
    [WmiDataId(1),
     Description("MessageID") : amended,
     read]
     uint32  MessageID;
};

[Dynamic,
 Description("ALPC Receive Message") : amended,
 EventType(34),
 EventTypeName("ALPC-Receive-Message") : amended
]
class ALPC_Receive_Message:ALPC
{
    [WmiDataId(1),
     Description("MessageID") : amended,
     read]
     uint32  MessageID;
};

[Dynamic,
 Description("ALPC Wait For Reply") : amended,
 EventType(35),
 EventTypeName("ALPC-Wait-For-Reply") : amended
]
class ALPC_Wait_For_Reply:ALPC
{
    [WmiDataId(1),
     Description("MessageID") : amended,
     read]
     uint32  MessageID;
};

[Dynamic,
 Description("ALPC Wait For New Message") : amended,
 EventType(36),
 EventTypeName("ALPC-Wait-For-New-Message") : amended
]
class ALPC_Wait_For_New_Message:ALPC
{
    [WmiDataId(1),
     Description("IsServerPort") : amended,
     read]
     uint32  IsServerPort;
    [WmiDataId(2),
     Description("PortName") : amended,
     read]
     string  PortName;
};

[Dynamic,
 Description("ALPC Unwait") : amended,
 EventType(37),
 EventTypeName("ALPC-Unwait") : amended
]
class ALPC_Unwait:ALPC
{
    [WmiDataId(1),
     Description("Status") : amended,
     read]
     uint32  Status;
};

[Dynamic,
 Description("Lost Event Event") : amended,
 Guid("{6a399ae0-4bc6-4de9-870b-3657f8947e7e}"),
 DisplayName("LostEvent") : amended
]
class Lost_Event:MSNT_SystemTrace
{
};

[Dynamic,
 Description("RT Lost Event") : amended,
 EventType(32),
 EventTypeName("RTLostEvent") :amended
]
class RT_LostEvent:Lost_Event
{
};


[Dynamic,
 Description("System Configuration") : amended,
 Guid("{01853a65-418f-4f36-aefc-dc0f1d2fd235}"),
 EventVersion(0),
 DisplayName("SystemConfig") : amended
]
class SystemConfig_V0:MSNT_SystemTrace
{

};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(10),
 EventTypeName("CPU") : amended
]
class SystemConfig_V0_CPU:SystemConfig_V0
{
    [WmiDataId(1),
     Description("MHz") : amended,
     read]
     uint32  MHz;
    [WmiDataId(2),
     Description("NumberOfProcessors") : amended,
     read]
     uint32  NumberOfProcessors;
    [WmiDataId(3),
     Description("MemSize") : amended,
     read]
     uint32  MemSize;
    [WmiDataId(4),
     Description("PageSize") : amended,
     read]
     uint32  PageSize;
    [WmiDataId(5),
     Description("AllocationGranularity") : amended,
     read]
     uint32  AllocationGranularity;
    [WmiDataId(6),
     Description("ComputerName") : amended,
     read]
     char16  ComputerName[256];
    [WmiDataId(7),
     Description("DomainName") : amended,
     read]
     char16  DomainName[132];
    [WmiDataId(8),
     Description("HyperThreadingFlag") : amended,
     pointer,
     read]
     uint32  HyperThreadingFlag;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(11),
 EventTypeName("PhyDisk") : amended
]
class SystemConfig_V0_PhyDisk:SystemConfig_V0
{
    [WmiDataId(1),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(2),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(3),
     Description("SectorsPerTrack") : amended,
     read]
     uint32  SectorsPerTrack;
    [WmiDataId(4),
     Description("TracksPerCylinder") : amended,
     read]
     uint32  TracksPerCylinder;
    [WmiDataId(5),
     Description("Cylinders") : amended,
     read]
     uint64  Cylinders;
    [WmiDataId(6),
     Description("SCSIPort") : amended,
     read]
     uint32  SCSIPort;
    [WmiDataId(7),
     Description("SCSIPath") : amended,
     read]
     uint32  SCSIPath;
    [WmiDataId(8),
     Description("SCSITarget") : amended,
     read]
     uint32  SCSITarget;
    [WmiDataId(9),
     Description("SCSILun") : amended,
     read]
     uint32  SCSILun;
    [WmiDataId(10),
     Description("Manufacturer") : amended,
     read]
     char16  Manufacturer[256];
    [WmiDataId(11),
     Description("PartitionCount") : amended,
     read]
     uint32  PartitionCount;
    [WmiDataId(12),
     Description("WriteCacheEnabled") : amended,
     read]
     uint8  WriteCacheEnabled;
    [WmiDataId(13),
     Description("Pad: not used") : amended,
     read]
     uint8  Pad;
    [WmiDataId(14),
     Description("BootDriveLetter") : amended,
     read]
     char16  BootDriveLetter[3];
    [WmiDataId(15),
     Description("Spare") : amended,
     read]
     char16  Spare[2];
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(12),
 EventTypeName("LogDisk") : amended
]
class SystemConfig_V0_LogDisk:SystemConfig_V0
{
    [WmiDataId(1),
     Description("StartOffset") : amended,
     read]
     uint64  StartOffset;
    [WmiDataId(2),
     Description("PartitionSize") : amended,
     read]
     uint64  PartitionSize;
    [WmiDataId(3),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(4),
     Description("Size") : amended,
     read]
     uint32  Size;
    [WmiDataId(5),
     Description("DriveType") : amended,
     read]
     uint32  DriveType;
    [WmiDataId(6),
     Description("DriveLetter") : amended,
     read]
     char16  DriveLetterString[4];
    [WmiDataId(7),
     Description("Pad1") : amended,
     read]
     uint32  Pad1;
    [WmiDataId(8),
     Description("PartitionNumber") : amended,
     read]
     uint32  PartitionNumber;
    [WmiDataId(9),
     Description("SectorsPerCluster") : amended,
     read]
     uint32  SectorsPerCluster;
    [WmiDataId(10),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(11),
     Description("Pad2") : amended,
     read]
     uint32  Pad2;
    [WmiDataId(12),
     Description("NumberOfFreeClusters") : amended,
     read]
     sint64  NumberOfFreeClusters;
    [WmiDataId(13),
     Description("TotalNumberOfClusters") : amended,
     read]
     sint64  TotalNumberOfClusters;
    [WmiDataId(14),
     Description("FileSystem") : amended,
     read]
     char16 FileSystem[16];
    [WmiDataId(15),
     Description("VolumeExtent") : amended,
     read]
     uint32  VolumeExt;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(13),
 EventTypeName("NIC") : amended
]
class SystemConfig_V0_NIC:SystemConfig_V0
{
    [WmiDataId(1),
     Description("NICName") : amended,
     read]
     char16  NICName[256];
    [WmiDataId(2),
     Description("Index") : amended,
     read]
     uint32  Index;
    [WmiDataId(3),
     Description("PhysicalAddressLen") : amended,
     read]
     uint32  PhysicalAddrLen;
    [WmiDataId(4),
     Description("PhysicalAddress") : amended,
     read]
     char16  PhysicalAddr[8];
    [WmiDataId(5),
     Description("Size") : amended,
     read]
     uint32  Size;
    [WmiDataId(6),
     Description("IpAddress") : amended,
     read]
     sint32  IpAddress;
    [WmiDataId(7),
     Description("SubnetMask") : amended,
     read]
     sint32  SubnetMask;
    [WmiDataId(8),
     Description("DhcpServer") : amended,
     read]
     sint32  DhcpServer;
    [WmiDataId(9),
     Description("Gateway") : amended,
     read]
     sint32  Gateway;
    [WmiDataId(10),
     Description("PrimaryWinsServer") : amended,
     read]
     sint32  PrimaryWinsServer;
    [WmiDataId(11),
     Description("SecondaryWinsServer") : amended,
     read]
     sint32  SecondaryWinsServer;
    [WmiDataId(12),
     Description("DnsServer1") : amended,
     read]
     sint32  DnsServer1;
    [WmiDataId(13),
     Description("DnsServer2") : amended,
     read]
     sint32  DnsServer2;
    [WmiDataId(14),
     Description("DnsServer3") : amended,
     read]
     sint32  DnsServer3;
    [WmiDataId(15),
     Description("DnsServer4") : amended,
     read]
     sint32  DnsServer4;
    [WmiDataId(16),
     Description("Reserved; do not use.") : amended,
     read]
     uint32 Data;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(14),
 EventTypeName("Video") : amended
]
class SystemConfig_V0_Video:SystemConfig_V0
{
    [WmiDataId(1),
     Description("MemorySize") : amended,
     read]
     uint32  MemorySize;
    [WmiDataId(2),
     Description("XResolution") : amended,
     read]
     uint32  XResolution;
    [WmiDataId(3),
     Description("YResolution") : amended,
     read]
     uint32  YResolution;
    [WmiDataId(4),
     Description("BitsPerPixel") : amended,
     read]
     uint32  BitsPerPixel;
    [WmiDataId(5),
     Description("VRefresh") : amended,
     read]
     uint32  VRefresh;
    [WmiDataId(6),
     Description("ChipType") : amended,
     read]
     char16  ChipType[256];
    [WmiDataId(7),
     Description("DACType") : amended,
     read]
     char16  DACType[256];
    [WmiDataId(8),
     Description("AdapterString") : amended,
     read]
     char16  AdapterString[256];
    [WmiDataId(9),
     Description("BiosString") : amended,
     read]
     char16  BiosString[256];
    [WmiDataId(10),
     Description("Device Name") : amended,
     read]
     char16  DeviceId[256];
    [WmiDataId(11),
     Description("StateFlags") : amended,
     format("x"),
     read]
     uint32  StateFlags;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(15),
 EventTypeName("Services") : amended
]
class SystemConfig_V0_Services:SystemConfig_V0
{
    [WmiDataId(1),
     Description("ServiceName") : amended,
     read]
     char16  ServiceName[34];
    [WmiDataId(2),
     Description("DisplayName") : amended,
     read]
     char16  DisplayName[256];
    [WmiDataId(3),
     Description("ProcessName") : amended,
     read]
     char16  ProcessName[34];
    [WmiDataId(4),
     Description("ProcessId") : amended,
     read]
     uint32  ProcessId;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(16),
 EventTypeName("Power") : amended
]
class SystemConfig_V0_Power:SystemConfig_V0
{
    [WmiDataId(1),
     Description("S1") : amended,
     read]
     uint8  S1;
    [WmiDataId(2),
     Description("S2") : amended,
     read]
     uint8  S2;
    [WmiDataId(3),
     Description("S3") : amended,
     read]
     uint8  S3;
    [WmiDataId(4),
     Description("S4") : amended,
     read]
     uint8  S4;
    [WmiDataId(5),
     Description("S5") : amended,
     read]
     uint8  S5;
    [WmiDataId(6),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad1;
    [WmiDataId(7),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad2;
    [WmiDataId(8),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad3;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(21),
 EventTypeName("IRQ") : amended
]
class SystemConfig_V0_IRQ:SystemConfig_V0
{
    [WmiDataId(1),
     Description("IRQAffinity") : amended,
     format("x"),
     read]
    uint64  IRQAffinity;
    [WmiDataId(2),
     Description("IRQNum") : amended,
     read]
    uint32 IRQNum;
    [WmiDataId(3),
     Description("DeviceDescriptionLen") : amended,
     read]
    uint32 DeviceDescriptionLen;
    [WmiDataId(4),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceDescription;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(22),
 EventTypeName("PnP") : amended
]
class SystemConfig_V0_PnP:SystemConfig_V0
{
    [WmiDataId(1),
     Description("IDLength") : amended,
     read]
    uint32  IDLength;
    [WmiDataId(2),
     Description("DescriptionLength") : amended,
     read]
    uint32 DescriptionLength;
    [WmiDataId(3),
     Description("FriendlyNameLength") : amended,
     read]
    uint32 FriendlyNameLength;
    [WmiDataId(4),
     Description("DeviceID") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceID;
    [WmiDataId(5),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceDescription;
    [WmiDataId(6),
     Description("FriendlyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string FriendlyName;
};

[Dynamic,
 Description("System Configuration") : amended,
 Guid("{01853a65-418f-4f36-aefc-dc0f1d2fd235}"),
 EventVersion(1),
 DisplayName("SystemConfig") : amended
]
class SystemConfig_V1:MSNT_SystemTrace
{

};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(10),
 EventTypeName("CPU") : amended
]
class SystemConfig_V1_CPU:SystemConfig_V1
{
    [WmiDataId(1),
     Description("MHz") : amended,
     read]
     uint32  MHz;
    [WmiDataId(2),
     Description("NumberOfProcessors") : amended,
     read]
     uint32  NumberOfProcessors;
    [WmiDataId(3),
     Description("MemSize") : amended,
     read]
     uint32  MemSize;
    [WmiDataId(4),
     Description("PageSize") : amended,
     read]
     uint32  PageSize;
    [WmiDataId(5),
     Description("AllocationGranularity") : amended,
     read]
     uint32  AllocationGranularity;
    [WmiDataId(6),
     Description("ComputerName") : amended,
     read]
     char16  ComputerName[256];
    [WmiDataId(7),
     Description("DomainName") : amended,
     read]
     char16  DomainName[132];
    [WmiDataId(8),
     Description("HyperThreadingFlag") : amended,
     pointer,
     read]
     uint32  HyperThreadingFlag;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(11),
 EventTypeName("PhyDisk") : amended
]
class SystemConfig_V1_PhyDisk:SystemConfig_V1
{
    [WmiDataId(1),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(2),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(3),
     Description("SectorsPerTrack") : amended,
     read]
     uint32  SectorsPerTrack;
    [WmiDataId(4),
     Description("TracksPerCylinder") : amended,
     read]
     uint32  TracksPerCylinder;
    [WmiDataId(5),
     Description("Cylinders") : amended,
     read]
     uint64  Cylinders;
    [WmiDataId(6),
     Description("SCSIPort") : amended,
     read]
     uint32  SCSIPort;
    [WmiDataId(7),
     Description("SCSIPath") : amended,
     read]
     uint32  SCSIPath;
    [WmiDataId(8),
     Description("SCSITarget") : amended,
     read]
     uint32  SCSITarget;
    [WmiDataId(9),
     Description("SCSILun") : amended,
     read]
     uint32  SCSILun;
    [WmiDataId(10),
     Description("Manufacturer") : amended,
     read]
     char16  Manufacturer[256];
    [WmiDataId(11),
     Description("PartitionCount") : amended,
     read]
     uint32  PartitionCount;
    [WmiDataId(12),
     Description("WriteCacheEnabled") : amended,
     read]
     uint8  WriteCacheEnabled;
    [WmiDataId(13),
     Description("Pad: not used") : amended,
     read]
     uint8  Pad;
    [WmiDataId(14),
     Description("BootDriveLetter") : amended,
     read]
     char16  BootDriveLetter[3];
    [WmiDataId(15),
     Description("Spare") : amended,
     read]
     char16  Spare[2];
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(12),
 EventTypeName("LogDisk") : amended
]
class SystemConfig_V1_LogDisk:SystemConfig_V1
{
    [WmiDataId(1),
     Description("StartOffset") : amended,
     read]
     uint64  StartOffset;
    [WmiDataId(2),
     Description("PartitionSize") : amended,
     read]
     uint64  PartitionSize;
    [WmiDataId(3),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(4),
     Description("Size") : amended,
     read]
     uint32  Size;
    [WmiDataId(5),
     Description("DriveType") : amended,
     read]
     uint32  DriveType;
    [WmiDataId(6),
     Description("DriveLetter") : amended,
     read]
     char16  DriveLetterString[4];
    [WmiDataId(7),
     Description("Pad1") : amended,
     read]
     uint32  Pad1;
    [WmiDataId(8),
     Description("PartitionNumber") : amended,
     read]
     uint32  PartitionNumber;
    [WmiDataId(9),
     Description("SectorsPerCluster") : amended,
     read]
     uint32  SectorsPerCluster;
    [WmiDataId(10),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(11),
     Description("Pad2") : amended,
     read]
     uint32  Pad2;
    [WmiDataId(12),
     Description("NumberOfFreeClusters") : amended,
     read]
     sint64  NumberOfFreeClusters;
    [WmiDataId(13),
     Description("TotalNumberOfClusters") : amended,
     read]
     sint64  TotalNumberOfClusters;
    [WmiDataId(14),
     Description("FileSystem") : amended,
     read]
     char16 FileSystem[16];
    [WmiDataId(15),
     Description("VolumeExtent") : amended,
     read]
     uint32  VolumeExt;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(13),
 EventTypeName("NIC") : amended
]
class SystemConfig_V1_NIC:SystemConfig_V1
{
    [WmiDataId(1),
     Description("NICName") : amended,
     read]
     char16  NICName[256];
    [WmiDataId(2),
     Description("Index") : amended,
     read]
     uint32  Index;
    [WmiDataId(3),
     Description("PhysicalAddressLen") : amended,
     read]
     uint32  PhysicalAddrLen;
    [WmiDataId(4),
     Description("PhysicalAddress") : amended,
     read]
     char16  PhysicalAddr[8];
    [WmiDataId(5),
     Description("Size") : amended,
     read]
     uint32  Size;
    [WmiDataId(6),
     Description("IpAddress") : amended,
     read]
     sint32  IpAddress;
    [WmiDataId(7),
     Description("SubnetMask") : amended,
     read]
     sint32  SubnetMask;
    [WmiDataId(8),
     Description("DhcpServer") : amended,
     read]
     sint32  DhcpServer;
    [WmiDataId(9),
     Description("Gateway") : amended,
     read]
     sint32  Gateway;
    [WmiDataId(10),
     Description("PrimaryWinsServer") : amended,
     read]
     sint32  PrimaryWinsServer;
    [WmiDataId(11),
     Description("SecondaryWinsServer") : amended,
     read]
     sint32  SecondaryWinsServer;
    [WmiDataId(12),
     Description("DnsServer1") : amended,
     read]
     sint32  DnsServer1;
    [WmiDataId(13),
     Description("DnsServer2") : amended,
     read]
     sint32  DnsServer2;
    [WmiDataId(14),
     Description("DnsServer3") : amended,
     read]
     sint32  DnsServer3;
    [WmiDataId(15),
     Description("DnsServer4") : amended,
     read]
     sint32  DnsServer4;
    [WmiDataId(16),
     Description("Reserved; do not use.") : amended,
     read]
     uint32 Data;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(14),
 EventTypeName("Video") : amended
]
class SystemConfig_V1_Video:SystemConfig_V1
{
    [WmiDataId(1),
     Description("MemorySize") : amended,
     read]
     uint32  MemorySize;
    [WmiDataId(2),
     Description("XResolution") : amended,
     read]
     uint32  XResolution;
    [WmiDataId(3),
     Description("YResolution") : amended,
     read]
     uint32  YResolution;
    [WmiDataId(4),
     Description("BitsPerPixel") : amended,
     read]
     uint32  BitsPerPixel;
    [WmiDataId(5),
     Description("VRefresh") : amended,
     read]
     uint32  VRefresh;
    [WmiDataId(6),
     Description("ChipType") : amended,
     read]
     char16  ChipType[256];
    [WmiDataId(7),
     Description("DACType") : amended,
     read]
     char16  DACType[256];
    [WmiDataId(8),
     Description("AdapterString") : amended,
     read]
     char16  AdapterString[256];
    [WmiDataId(9),
     Description("BiosString") : amended,
     read]
     char16  BiosString[256];
    [WmiDataId(10),
     Description("Device Name") : amended,
     read]
     char16  DeviceId[256];
    [WmiDataId(11),
     Description("StateFlags") : amended,
     format("x"),
     read]
     uint32  StateFlags;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(15),
 EventTypeName("Services") : amended
]
class SystemConfig_V1_Services:SystemConfig_V1
{
    [WmiDataId(1),
     Description("ServiceName") : amended,
     read]
     char16  ServiceName[34];
    [WmiDataId(2),
     Description("DisplayName") : amended,
     read]
     char16  DisplayName[256];
    [WmiDataId(3),
     Description("ProcessName") : amended,
     read]
     char16  ProcessName[34];
    [WmiDataId(4),
     Description("ProcessId") : amended,
     read]
     uint32  ProcessId;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(16),
 EventTypeName("Power") : amended
]
class SystemConfig_V1_Power:SystemConfig_V1
{
    [WmiDataId(1),
     Description("S1") : amended,
     read]
     uint8  S1;
    [WmiDataId(2),
     Description("S2") : amended,
     read]
     uint8  S2;
    [WmiDataId(3),
     Description("S3") : amended,
     read]
     uint8  S3;
    [WmiDataId(4),
     Description("S4") : amended,
     read]
     uint8  S4;
    [WmiDataId(5),
     Description("S5") : amended,
     read]
     uint8  S5;
    [WmiDataId(6),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad1;
    [WmiDataId(7),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad2;
    [WmiDataId(8),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad3;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(21),
 EventTypeName("IRQ") : amended
]
class SystemConfig_V1_IRQ:SystemConfig_V1
{
    [WmiDataId(1),
     Description("IRQAffinity") : amended,
     format("x"),
     read]
    uint64  IRQAffinity;
    [WmiDataId(2),
     Description("IRQNum") : amended,
     read]
    uint32 IRQNum;
    [WmiDataId(3),
     Description("DeviceDescriptionLen") : amended,
     read]
    uint32 DeviceDescriptionLen;
    [WmiDataId(4),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceDescription;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(22),
 EventTypeName("PnP") : amended
]
class SystemConfig_V1_PnP:SystemConfig_V1
{
    [WmiDataId(1),
     Description("IDLength") : amended,
     read]
    uint32  IDLength;
    [WmiDataId(2),
     Description("DescriptionLength") : amended,
     read]
    uint32 DescriptionLength;
    [WmiDataId(3),
     Description("FriendlyNameLength") : amended,
     read]
    uint32 FriendlyNameLength;
    [WmiDataId(4),
     Description("DeviceID") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceID;
    [WmiDataId(5),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string DeviceDescription;
    [WmiDataId(6),
     Description("FriendlyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
    string FriendlyName;
};

[Dynamic,
 Description("System Configuration") : amended,
 Guid("{01853a65-418f-4f36-aefc-dc0f1d2fd235}"),
 EventVersion(2),
 DisplayName("SystemConfig") : amended
]
class SystemConfig:MSNT_SystemTrace
{

};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(10),
 EventTypeName("CPU") : amended
]
class SystemConfig_CPU:SystemConfig
{
    [WmiDataId(1),
     Description("MHz") : amended,
     read]
     uint32  MHz;
    [WmiDataId(2),
     Description("NumberOfProcessors") : amended,
     read]
     uint32  NumberOfProcessors;
    [WmiDataId(3),
     Description("MemSize") : amended,
     read]
     uint32  MemSize;
    [WmiDataId(4),
     Description("PageSize") : amended,
     read]
     uint32  PageSize;
    [WmiDataId(5),
     Description("AllocationGranularity") : amended,
     read]
     uint32  AllocationGranularity;
    [WmiDataId(6),
     Description("ComputerName") : amended,
     format("s"),
     read]
     char16  ComputerName[256];
    [WmiDataId(7),
     Description("DomainName") : amended,
     format("s"),
     read]
     char16  DomainName[134];
    [WmiDataId(8),
     Description("HyperThreadingFlag") : amended,
     pointer,
     read]
     uint32  HyperThreadingFlag;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(11),
 EventTypeName("PhyDisk") : amended
]
class SystemConfig_PhyDisk:SystemConfig
{
    [WmiDataId(1),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(2),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(3),
     Description("SectorsPerTrack") : amended,
     read]
     uint32  SectorsPerTrack;
    [WmiDataId(4),
     Description("TracksPerCylinder") : amended,
     read]
     uint32  TracksPerCylinder;
    [WmiDataId(5),
     Description("Cylinders") : amended,
     read]
     uint64  Cylinders;
    [WmiDataId(6),
     Description("SCSIPort") : amended,
     read]
     uint32  SCSIPort;
    [WmiDataId(7),
     Description("SCSIPath") : amended,
     read]
     uint32  SCSIPath;
    [WmiDataId(8),
     Description("SCSITarget") : amended,
     read]
     uint32  SCSITarget;
    [WmiDataId(9),
     Description("SCSILun") : amended,
     read]
     uint32  SCSILun;
    [WmiDataId(10),
     Description("Manufacturer") : amended,
     format("s"),
     read]
     char16  Manufacturer[256];
    [WmiDataId(11),
     Description("PartitionCount") : amended,
     read]
     uint32  PartitionCount;
    [WmiDataId(12),
     Description("WriteCacheEnabled") : amended,
     read]
     uint8  WriteCacheEnabled;
    [WmiDataId(13),
     Description("Pad: not used") : amended,
     read]
     uint8  Pad;
    [WmiDataId(14),
     Description("BootDriveLetter") : amended,
     format("s"),
     read]
     char16  BootDriveLetter[3];
    [WmiDataId(15),
     Description("Spare") : amended,
     read]
     char16  Spare[2];
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(12),
 EventTypeName("LogDisk") : amended
]
class SystemConfig_LogDisk:SystemConfig
{
    [WmiDataId(1),
     Description("StartOffset") : amended,
     read]
     uint64  StartOffset;
    [WmiDataId(2),
     Description("PartitionSize") : amended,
     read]
     uint64  PartitionSize;
    [WmiDataId(3),
     Description("DiskNumber") : amended,
     read]
     uint32  DiskNumber;
    [WmiDataId(4),
     Description("Size") : amended,
     read]
     uint32  Size;
    [WmiDataId(5),
     Description("DriveType") : amended,
     read]
     uint32  DriveType;
    [WmiDataId(6),
     Description("DriveLetter") : amended,
     format("s"),
     read]
     char16  DriveLetterString[4];
    [WmiDataId(7),
     Description("Pad1") : amended,
     read]
     uint32  Pad1;
    [WmiDataId(8),
     Description("PartitionNumber") : amended,
     read]
     uint32  PartitionNumber;
    [WmiDataId(9),
     Description("SectorsPerCluster") : amended,
     read]
     uint32  SectorsPerCluster;
    [WmiDataId(10),
     Description("BytesPerSector") : amended,
     read]
     uint32  BytesPerSector;
    [WmiDataId(11),
     Description("Pad2") : amended,
     read]
     uint32  Pad2;
    [WmiDataId(12),
     Description("NumberOfFreeClusters") : amended,
     read]
     sint64  NumberOfFreeClusters;
    [WmiDataId(13),
     Description("TotalNumberOfClusters") : amended,
     read]
     sint64  TotalNumberOfClusters;
    [WmiDataId(14),
     Description("FileSystem") : amended,
     format("s"),
     read]
     char16 FileSystem[16];
    [WmiDataId(15),
     Description("VolumeExtent") : amended,
     read]
     uint32  VolumeExt;
    [WmiDataId(16),
     Description("Pad3") : amended,
     read]
     uint32  Pad3;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(13),
 EventTypeName("NIC") : amended
]
class SystemConfig_NIC:SystemConfig
{
    [WmiDataId(1),
     Description("PhysicalAddress") : amended,
     format("x"),
     read]
     uint64  PhysicalAddr;
    [WmiDataId(2),
     Description("PhysicalAddressLen") : amended,
     read]
     uint32  PhysicalAddrLen;
    [WmiDataId(3),
     Description("Ipv4Index") : amended,
     read]
     uint32  Ipv4Index;
    [WmiDataId(4),
     Description("Ipv6Index") : amended,
     read]
     uint32  Ipv6Index;
    [WmiDataId(5),
     Description("NIC Description") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string NICDescription;
    [WmiDataId(6),
     Description("IpAddresses") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string IpAddresses;
    [WmiDataId(7),
     Description("DnsServerAddresses") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string DnsServerAddresses;

};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(14),
 EventTypeName("Video") : amended
]
class SystemConfig_Video:SystemConfig
{
    [WmiDataId(1),
     Description("MemorySize") : amended,
     read]
     uint32  MemorySize;
    [WmiDataId(2),
     Description("XResolution") : amended,
     read]
     uint32  XResolution;
    [WmiDataId(3),
     Description("YResolution") : amended,
     read]
     uint32  YResolution;
    [WmiDataId(4),
     Description("BitsPerPixel") : amended,
     read]
     uint32  BitsPerPixel;
    [WmiDataId(5),
     Description("VRefresh") : amended,
     read]
     uint32  VRefresh;
    [WmiDataId(6),
     Description("ChipType") : amended,
     format("s"),
     read]
     char16  ChipType[256];
    [WmiDataId(7),
     Description("DACType") : amended,
     format("s"),
     read]
     char16  DACType[256];
    [WmiDataId(8),
     Description("AdapterString") : amended,
     format("s"),
     read]
     char16  AdapterString[256];
    [WmiDataId(9),
     Description("BiosString") : amended,
     format("s"),
     read]
     char16  BiosString[256];
    [WmiDataId(10),
     Description("Device Name") : amended,
     format("s"),
     read]
     char16  DeviceId[256];
    [WmiDataId(11),
     Description("StateFlags") : amended,
     format("x"),
     read]
     uint32  StateFlags;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(15),
 EventTypeName("Services") : amended
]
class SystemConfig_Services:SystemConfig
{
    [WmiDataId(1),
     Description("ProcessId") : amended,
     format("x"),
     read]
     uint32  ProcessId;
    [WmiDataId(2),
     Description("ServiceState") : amended,
     format("x"),
     read]
     uint32  ServiceState;
    [WmiDataId(3),
     Description("SubProcessTag") : amended,
     format("x"),
     read]
     uint32  SubProcessTag;
    [WmiDataId(4),
     Description("ServiceName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string ServiceName;
    [WmiDataId(5),
     Description("DisplayName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string DisplayName;
    [WmiDataId(6),
     Description("ProcessName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string ProcessName;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(16),
 EventTypeName("Power") : amended
]
class SystemConfig_Power:SystemConfig
{
    [WmiDataId(1),
     Description("S1") : amended,
     read]
     uint8  S1;
    [WmiDataId(2),
     Description("S2") : amended,
     read]
     uint8  S2;
    [WmiDataId(3),
     Description("S3") : amended,
     read]
     uint8  S3;
    [WmiDataId(4),
     Description("S4") : amended,
     read]
     uint8  S4;
    [WmiDataId(5),
     Description("S5") : amended,
     read]
     uint8  S5;
    [WmiDataId(6),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad1;
    [WmiDataId(7),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad2;
    [WmiDataId(8),
     Description("Reserved; do not use.") : amended,
     read]
     uint8  Pad3;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(17),
 EventTypeName("Network") : amended
]
class SystemConfig_Network:SystemConfig
{
    [WmiDataId(1),
     Description("TcbTablePartitions") : amended,
     read]
     uint32  TcbTablePartitions;
    [WmiDataId(2),
     Description("MaxHashTableSize") : amended,
     read]
     uint32  MaxHashTableSize;
    [WmiDataId(3),
     Description("MaxUserPort") : amended,
     read]
     uint32  MaxUserPort;
    [WmiDataId(4),
     Description("TcpTimedWaitDelay") : amended,
     read]
     uint32  TcpTimedWaitDelay;

};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(21),
 EventTypeName("IRQ") : amended
]
class SystemConfig_IRQ:SystemConfig
{
    [WmiDataId(1),
     Description("IRQAffinity") : amended,
     format("x"),
     read]
     uint64  IRQAffinity;
    [WmiDataId(2),
     Description("IRQNum") : amended,
     read]
     uint32 IRQNum;
    [WmiDataId(3),
     Description("DeviceDescriptionLen") : amended,
     read]
     uint32 DeviceDescriptionLen;
    [WmiDataId(4),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string DeviceDescription;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(22),
 EventTypeName("PnP") : amended
]
class SystemConfig_PnP:SystemConfig
{
    [WmiDataId(1),
     Description("IDLength") : amended,
     read]
     uint32  IDLength;
    [WmiDataId(2),
     Description("DescriptionLength") : amended,
     read]
     uint32 DescriptionLength;
    [WmiDataId(3),
     Description("FriendlyNameLength") : amended,
     read]
     uint32 FriendlyNameLength;
    [WmiDataId(4),
     Description("DeviceID") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string DeviceID;
    [WmiDataId(5),
     Description("DeviceDescription") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string DeviceDescription;
    [WmiDataId(6),
     Description("FriendlyName") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string FriendlyName;
};

[Dynamic,
 Description("System Configuration") : amended,
 EventType(23),
 EventTypeName("IDEChannel") : amended
]
class SystemConfig_IDEChannel:SystemConfig
{
    [WmiDataId(1),
     Description("TargetId") : amended,
     read]
     uint32  TargetId;
    [WmiDataId(2),
     Description("DeviceType") : amended,
     format("x"),
     read]
     uint32  DeviceType;
    [WmiDataId(3),
     Description("DeviceTimingMode") : amended,
     format("x"),
     read]
     uint32  DeviceTimingMode;
    [WmiDataId(4),
     Description("LocationInformationLen") : amended,
     read]
     uint32  LocationInformationLen;
    [WmiDataId(5),
     Description("LocationInformation") : amended,
     StringTermination("NullTerminated"),
     format("w"),
     read]
     string LocationInformation;
};

[Dynamic,
 Description("Thread Pool") : amended,
 Guid("{c861d0e2-a2c1-4d36-9f9c-970bab943a12}")
]
class ThreadPool:EventTrace
{

};

[Dynamic,
 Description("Thread Pool Event") : amended,
 Guid("{c861d0e2-a2c1-4d36-9f9c-970bab943a12}"),
 DisplayName("ThreadPool") : amended
]
class ThreadPoolTrace:ThreadPool
{

};

[Dynamic,
 Description("Thread Pool Callback Enqueue Start") : amended,
 EventType{32, 34},
 EventTypeName{"CBEnqueue", "CBStart"} : amended
]
class TPCBEnqueue:ThreadPoolTrace
{
    [WmiDataId(1),
     Description("PoolId") : amended,
     pointer,
     read]
     uint32  PoolId;
    [WmiDataId(2),
     Description("TaskId") : amended,
     pointer,
     read]
     uint32  TaskId;
    [WmiDataId(3),
     Description("CallbackFunction") : amended,
     pointer,
     read]
     uint32  CallbackFunction;
    [WmiDataId(4),
     Description("CallbackContext") : amended,
     pointer,
     read]
     uint32  CallbackContext;
    [WmiDataId(5),
     Description("SubProcessTag") : amended,
     pointer,
     read]
     uint32  SubProcessTag;
};

[Dynamic,
 Description("Thread Pool Callback Dequeue Stop") : amended,
 EventType{33, 35},
 EventTypeName{"CBDequeue", "CBStop"} : amended
]
class TPCBDequeue:ThreadPoolTrace
{
    [WmiDataId(1),
     Description("TaskId") : amended,
     pointer,
     read]
     uint32  TaskId;
};

[Dynamic,
 Description("Thread Pool Callback Cancel") : amended,
 EventType(36),
 EventTypeName("CBCancel") : amended
]
class TPCBCancel:ThreadPoolTrace
{
    [WmiDataId(1),
     Description("TaskId") : amended,
     pointer,
     read]
     uint32  TaskId;
    [WmiDataId(2),
     Description("CancelCount") : amended,
     read]
     uint32  CancelCount;
};

[Dynamic,
 Description("Thread Pool Pool Create Close") : amended,
 EventType{37, 38},
 EventTypeName{"PoolCreate", "PoolClose"} : amended
]
class TPPoolCreateClose:ThreadPoolTrace
{
    [WmiDataId(1),
     Description("PoolId") : amended,
     pointer,
     read]
     uint32  PoolId;
};

[Dynamic,
 Description("Thread Pool Thread Set") : amended,
 EventType{39, 40},
 EventTypeName{"ThreadMinSet", "ThreadMaxSet"} : amended
]
class TPThreadSet:ThreadPoolTrace
{
    [WmiDataId(1),
     Description("PoolId") : amended,
     pointer,
     read]
     uint32  PoolId;
    [WmiDataId(2),
     Description("ThreadNum") : amended,
     read]
     uint32  ThreadNum;
};




[Dynamic,
 Description("Heap Trace Provider"): amended,
 Guid("{222962ab-6180-4b88-a825-346b75f2a24a}")
]
class HeapTraceProvider:EventTrace
{

};

[Dynamic,
 Description("Heap Event") : amended,
 Guid("{222962ab-6180-4b88-a825-346b75f2a24a}"),
 DisplayName("Heap") : amended
]
class HeapTrace:HeapTraceProvider
{

};

[Dynamic,
 Description("Heap Create") : amended,
 EventType(32),
 EventTypeName("Create") : amended
]
class HeapCreate:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("Heap Flags") : amended,
     read]
     uint32  HeapFlags;
};

[Dynamic,
 Description("Heap Allocate") : amended,
 EventType(33),
 EventTypeName("Alloc") : amended
]
class HeapAlloc:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("Alloccation Size") : amended,
     extension("SizeT"),
     read]
     object  AllocSize;
    [WmiDataId(3),
     Description("Alloccation Address") : amended,
     pointer,
     read]
     uint32  AllocAddress;
    [WmiDataId(4),
     Description("Source ID") : amended,
     read]
     uint32  SourceId;
};

[Dynamic,
 Description("Heap ReAllocate") : amended,
 EventType(34),
 EventTypeName("ReAlloc") : amended
]
class HeapRealloc:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("New Alloccation Address") : amended,
     pointer,
     read]
     uint32  NewAllocAddress;
    [WmiDataId(3),
     Description("Old Alloccation Address") : amended,
     pointer,
     read]
     uint32  OldAllocAddress;
    [WmiDataId(4),
     Description("New Alloccation Size") : amended,
     extension("SizeT"),
     read]
     object  NewAllocSize;
    [WmiDataId(5),
     Description("Old Alloccation Size") : amended,
     extension("SizeT"),
     read]
     object  OldAllocSize;
    [WmiDataId(6),
     Description("Source ID") : amended,
     read]
     uint32  SourceId;
};

[Dynamic,
 Description("Heap Free") : amended,
 EventType(36),
 EventTypeName("Free") : amended
]
class HeapFree:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("Free Address") : amended,
     pointer,
     read]
     uint32  FreeAddress;
    [WmiDataId(3),
     Description("Source ID") : amended,
     read]
     uint32  SourceId;
};

[Dynamic,
 Description("Heap Expand") : amended,
 EventType(37),
 EventTypeName("Expand") : amended
]
class HeapExpand:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("Committed Size") : amended,
     extension("SizeT"),
     read]
     object  CommittedSize;
    [WmiDataId(3),
     Description("Committed Address") : amended,
     pointer,
     read]
     uint32  CommitAddress;
    [WmiDataId(4),
     Description("Free Space") : amended,
     extension("SizeT"),
     read]
     object  FreeSpace;
    [WmiDataId(5),
     Description("Committed Space") : amended,
     extension("SizeT"),
     read]
     object  CommittedSpace;
    [WmiDataId(6),
     Description("Reserved Space") : amended,
     extension("SizeT"),
     read]
     object  ReservedSpace;
    [WmiDataId(7),
     Description("Number Of UCRs") : amended,
     read]
     uint32  NoOfUCRs;
};

[Dynamic,
 Description("Heap SnapShot") : amended,
 EventType(38),
 EventTypeName("SnapShot") : amended
]
class HeapSnapShot:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("Free Space") : amended,
     extension("SizeT"),
     read]
     object  FreeSpace;
    [WmiDataId(3),
     Description("Committed Space") : amended,
     extension("SizeT"),
     read]
     object  CommittedSpace;
    [WmiDataId(4),
     Description("Reserved Space") : amended,
     extension("SizeT"),
     read]
     object  ReservedSpace;
    [WmiDataId(5),
     Description("Heap Flags") : amended,
     read]
     uint32  HeapFlags;
};

[Dynamic,
 Description("Heap Contract") : amended,
 EventType(42),
 EventTypeName("Contract") : amended
]
class HeapContract:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
    [WmiDataId(2),
     Description("DeCommitted Size") : amended,
     extension("SizeT"),
     read]
     object  DeCommittedSize;
    [WmiDataId(3),
     Description("DeCommitted Address") : amended,
     pointer,
     read]
     uint32  DeCommitAddress;
    [WmiDataId(4),
     Description("Free Space") : amended,
     extension("SizeT"),
     read]
     object  FreeSpace;
    [WmiDataId(5),
     Description("Committed Space") : amended,
     extension("SizeT"),
     read]
     object  CommittedSpace;
    [WmiDataId(6),
     Description("Reserved Space") : amended,
     extension("SizeT"),
     read]
     object  ReservedSpace;
    [WmiDataId(7),
     Description("Number Of UCRs") : amended,
     read]
     uint32  NoOfUCRs;
};

[Dynamic,
 Description("Heap Events") : amended,
 EventType{35, 43, 44, 45, 46},
 EventTypeName{"Destroy", "Lock", "Unlock", "Validate", "Walk"} : amended
]
class Heap_TypeGroup1:HeapTrace
{
    [WmiDataId(1),
     Description("Heap Handle") : amended,
     pointer,
     read]
     uint32  HeapHandle;
};

[Dynamic,
 Description("Critical Section Trace Provider") : amended,
 Guid("{3AC66736-CC59-4cff-8115-8DF50E39816B}")
]
class CritSecTraceProvider:EventTrace
{

};

[Dynamic,
 Description("Critical Section Event") : amended,
 Guid("{3AC66736-CC59-4cff-8115-8DF50E39816B}"),
 DisplayName("CritSec") : amended
]
class CritSecTrace:CritSecTraceProvider
{

};

[Dynamic,
 Description("Critical Section Collision") : amended,
 EventType(34),
 EventTypeName("Collision") : amended
]
class CritSecCollision:CritSecTrace
{
    [WmiDataId(1),
     Description("Lock Count") : amended,
     read]
     uint32  LockCount;
    [WmiDataId(2),
     Description("Spin Count") : amended,
     read]
     uint32  SpinCount;
    [WmiDataId(3),
     Description("Owning Thread") : amended,
     pointer,
     read]
     uint32  OwningThread;
    [WmiDataId(4),
     Description("Critical Section Address") : amended,
     pointer,
     read]
     uint32  CritSecAddr;
};

[Dynamic,
 Description("Critical Section Initialize") : amended,
 EventType(35),
 EventTypeName("Initialize") : amended
]
class CritSecInit:CritSecTrace
{
    [WmiDataId(1),
     Description("Spin Count") : amended,
     pointer,
     read]
     uint32  SpinCount;
    [WmiDataId(2),
     Description("Critical Section Address") : amended,
     pointer,
     read]
     uint32  CritSecAddr;
};


