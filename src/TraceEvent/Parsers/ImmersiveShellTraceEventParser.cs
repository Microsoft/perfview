using System;
using System.Text;
using System.Diagnostics;
using Microsoft.Diagnostics.Tracing;
using Microsoft.Diagnostics.Tracing.Parsers;
using Microsoft.Diagnostics.Tracing.Parsers.ImmersiveShell;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "1.0")]
    public sealed class ImmersiveShellTraceEventParser : TraceEventParser 
    {
        public new static string ProviderName = "Microsoft-Windows-Immersive-Shell";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x315a8872), unchecked((short) 0x923e), unchecked((short) 0x4ea2), 0x98, 0x89, 0x33, 0xcd, 0x47, 0x54, 0xbf, 0x64);
        public enum Keywords : long
        {
            Immersive_Launcher = 0x00000001,
            Process_Lifetime_Manager = 0x00000002,
            Notifications_end_to_end = 0x00000004,
        };

        public ImmersiveShellTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<ShellStartupTemplateTraceData> ImmersiveShell_Startup_Start
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellStartupTemplateTraceData(value, 101, 100, "ImmersiveShellStartup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ShellStartupTemplateTraceData> ImmersiveShell_Startup_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellStartupTemplateTraceData(value, 102, 100, "ImmersiveShellStartup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ShellComponentTemplateTraceData> ImmersiveShell_Component_Startup_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellComponentTemplateTraceData(value, 111, 110, "ImmersiveShellComponentStartup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ShellComponentTemplateTraceData> ImmersiveShell_Component_Startup_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellComponentTemplateTraceData(value, 112, 110, "ImmersiveShellComponentStartup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ShellComponentTemplateTraceData> ImmersiveShell_Component_Shutdown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellComponentTemplateTraceData(value, 113, 112, "ImmersiveShellComponentShutdown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 113, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ShellComponentTemplateTraceData> ImmersiveShell_Component_Shutdown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ShellComponentTemplateTraceData(value, 114, 112, "ImmersiveShellComponentShutdown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerSystemModeChangeTraceData> ImmersiveShell_AppManager_ModeChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerSystemModeChangeTraceData(value, 121, 120, "ImmersiveShellAppManagerModeNotification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerSystemModeChangeTraceData> ImmersiveShell_AppManager_ModeChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerSystemModeChangeTraceData(value, 122, 120, "ImmersiveShellAppManagerModeNotification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 122, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerZbandChangeTraceData> ImmersiveShell_AppManager_ZbandChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerZbandChangeTraceData(value, 123, 123, "ImmersiveShellAppManagerZbandNotification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 123, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerZbandChangeTraceData> ImmersiveShell_AppManager_ZbandChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerZbandChangeTraceData(value, 124, 123, "ImmersiveShellAppManagerZbandNotification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 124, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexTraceData> ImmersiveShell_AppManager_ZbandChanged_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexTraceData(value, 125, 125, "ImmersiveShellAppManagerZbandChanged", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 125, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexStopTraceData> ImmersiveShell_AppManager_ZbandChanged_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexStopTraceData(value, 126, 125, "ImmersiveShellAppManagerZbandChanged", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 126, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexTraceData> ImmersiveShell_AppManager_ModeChanging_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexTraceData(value, 131, 130, "ImmersiveShellAppManagerModeChanging", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 131, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexTraceData> ImmersiveShell_AppManager_ModeChanging_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexTraceData(value, 132, 130, "ImmersiveShellAppManagerModeChanging", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 132, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexTraceData> ImmersiveShell_AppManager_ModeChanged_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexTraceData(value, 141, 140, "ImmersiveShellAppManagerModeChanged", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 141, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerListenerIndexTraceData> ImmersiveShell_AppManager_ModeChanged_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerListenerIndexTraceData(value, 142, 140, "ImmersiveShellAppManagerModeChanged", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 142, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_AppManager_Reconstitution_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 145, 145, "ImmersiveShellAppManagerStartup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 145, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_AppManager_Reconstitution_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 146, 145, "ImmersiveShellAppManagerStartup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 146, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_LayoutManager_Update_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 151, 150, "ImmersiveShellLayoutUpdate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_LayoutManager_Update_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 152, 150, "ImmersiveShellLayoutUpdate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellBandLayoutInfoTraceData> ImmersiveShell_LayoutManager_Update_BandInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellBandLayoutInfoTraceData(value, 153, 150, "ImmersiveShellLayoutUpdate", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_LayoutManager_Initialize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 154, 151, "ImmersiveShellLayoutInitialize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_LayoutManager_Initialize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 155, 151, "ImmersiveShellLayoutInitialize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LayoutManagerInvalidateTemplateTraceData> ImmersiveShellLayoutManagerInvalidate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LayoutManagerInvalidateTemplateTraceData(value, 156, 152, "ImmersiveShellLayoutInvalidate", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ImmersiveShellIHMInfoTraceData> ImmersiveShell_InputHost_Showing_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellIHMInfoTraceData(value, 161, 160, "ImmersiveShellIHMNotification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 161, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ImmersiveShellIHMInfoTraceData> ImmersiveShell_InputHost_Showing_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellIHMInfoTraceData(value, 162, 160, "ImmersiveShellIHMNotification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 162, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellIHMInfoTraceData> ImmersiveShell_InputHost_Hiding_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellIHMInfoTraceData(value, 163, 160, "ImmersiveShellIHMNotification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 163, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_InputHost_Hiding_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 164, 160, "ImmersiveShellIHMNotification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 164, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellAppIHMNotificationInfoTraceData> ImmersiveShell_InputHost_AppNotification_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellAppIHMNotificationInfoTraceData(value, 165, 161, "ImmersiveShellAppIHMNotification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 165, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ImmersiveShellAppIHMNotificationInfoTraceData> ImmersiveShell_InputHost_AppNotification_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellAppIHMNotificationInfoTraceData(value, 166, 161, "ImmersiveShellAppIHMNotification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 166, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellAppManagerStateChangeTraceData> ImmersiveShell_AppManager_ApplicationStateChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellAppManagerStateChangeTraceData(value, 171, 170, "ImmersiveShellAppManagerApplicationStateChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 171, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ImmersiveShellUIDragTemplateTraceData> ImmersiveShell_UI_Drag_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellUIDragTemplateTraceData(value, 181, 180, "ImmersiveShellUIDrag", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 181, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> ImmersiveShell_AppSpace_ParseXML_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1001, 1000, "ImmersiveShellAppSpaceParseXML", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> ImmersiveShell_AppSpace_ParseXML_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1002, 1000, "ImmersiveShellAppSpaceParseXML", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellAppSpaceParseXMLErrorTraceData> ImmersiveShell_AppSpace_ParseXML_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellAppSpaceParseXMLErrorTraceData(value, 1003, 1000, "ImmersiveShellAppSpaceParseXML", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1003, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_MissingTemplateForCurrentSize
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1004, 1004, "TileXML_MissingTemplateForCurrentSize", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1004, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_AppSpace_CreateLayout_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1011, 1010, "ImmersiveShellAppSpaceCreateLayout", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_AppSpace_CreateLayout_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1012, 1010, "ImmersiveShellAppSpaceCreateLayout", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileXMLProcessMRTResourceTraceData> TileXML_ProcessMRTResource
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileXMLProcessMRTResourceTraceData(value, 1013, 1013, "TileXML_ProcessMRTResource", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1013, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_PayloadTooLarge
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1014, 1014, "TileXML_PayloadTooLarge", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1014, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_PayloadTooSmall
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1015, 1015, "TileXML_PayloadTooSmall", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1015, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_InvalidUnicodeFormat
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1016, 1016, "TileXML_InvalidUnicodeFormat", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1016, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_InvalidAttributes
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1017, 1017, "TileXML_InvalidAttributes", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1017, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileXMLBadNodeTemplateTraceData> TileXML_TagPresentTooManyTimes
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileXMLBadNodeTemplateTraceData(value, 1018, 1018, "TileXML_TagPresentTooManyTimes", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1018, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileXMLBadNodeTemplateTraceData> TileXML_UnknownElement
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileXMLBadNodeTemplateTraceData(value, 1019, 1019, "TileXML_UnknownElement", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1019, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_UnexpectedText
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1020, 1020, "TileXML_UnexpectedText", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1020, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileXML_MoreThanOneVisualPresent
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1021, 1021, "TileXML_MoreThanOneVisualPresent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1021, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> ImmersiveShell_Badge_ParseXML_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1201, 1200, "ImmersiveShellBadgeParseXML", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1201, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> ImmersiveShell_Badge_ParseXML_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 1202, 1200, "ImmersiveShellBadgeParseXML", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1202, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveShellAppSpaceParseXMLErrorTraceData> ImmersiveShell_Badge_ParseXML_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveShellAppSpaceParseXMLErrorTraceData(value, 1203, 1200, "ImmersiveShellBadgeParseXML", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1203, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppPositioner_LayoutChange_Changed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1301, 1300, "AppPositioner_LayoutChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1301, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AppPositionerImmersiveAppInfoTraceData> AppPositioner_AppSwitch_Switched
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppPositionerImmersiveAppInfoTraceData(value, 1306, 1305, "AppPositioner_AppSwitch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1306, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppGutter_Drag_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1351, 1350, "AppGutter_Drag", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1351, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppGutter_Drag_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1352, 1350, "AppGutter_Drag", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1352, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> BackstackManager_GetBackstack_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1401, 1400, "BackstackManager_GetBackstack", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1401, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<BackstackAppInfoTraceData> BackstackManager_GetBackstack_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BackstackAppInfoTraceData(value, 1402, 1400, "BackstackManager_GetBackstack", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1402, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> BackstackManager_GetBackstack_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1403, 1400, "BackstackManager_GetBackstack", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1403, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> BackstackManager_ClearBackstack_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1405, 1404, "BackstackManager_ClearBackstack", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1405, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> BackstackManager_ClearBackstack_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1406, 1404, "BackstackManager_ClearBackstack", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1406, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<BackstackAppInfoTraceData> BackstackManager_RemoveApp_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BackstackAppInfoTraceData(value, 1408, 1407, "BackstackManager_RemoveApp", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1408, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SwitchModeManager_BeginMode
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1451, 1450, "SwitchModeManager_BeginMode", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1451, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SwitchModeManager_EndMode
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1453, 1452, "SwitchModeManager_EndMode", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1453, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SwitchModeInfoTraceData> SwitchModeManager_Switch_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SwitchModeInfoTraceData(value, 1455, 1454, "SwitchModeManager_Switch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1455, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DropFeedback_Show_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1460, 1460, "DropFeedback_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1460, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DropFeedback_Hide_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1461, 1461, "DropFeedback_Hide", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1461, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<DropFeedbackInfoTraceData> DropFeedbackItem_Show_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DropFeedbackInfoTraceData(value, 1462, 1462, "DropFeedbackItem_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1462, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<DropFeedbackInfoTraceData> DropFeedbackItem_Update_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DropFeedbackInfoTraceData(value, 1463, 1463, "DropFeedbackItem_Update", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1463, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<DragVisualInfoTraceData> DragVisual_Show_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DragVisualInfoTraceData(value, 1470, 1470, "DragVisual_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1470, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<DragVisualInfoTraceData> DragVisual_AppChange_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DragVisualInfoTraceData(value, 1471, 1471, "DragVisual_AppChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1471, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<DragVisualInfoTraceData> DragVisual_ModeChange_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DragVisualInfoTraceData(value, 1472, 1472, "DragVisual_ModeChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1472, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DragVisual_Hide_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1473, 1473, "DragVisual_Hide", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1473, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DragVisual_Destroy_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1474, 1474, "DragVisual_Destroy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1474, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DragVisual_TargetChanged_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1476, 1476, "DragVisual_TargetChanged", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1476, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PlaybackManagerSessionIdTraceData> PlaybackManager_Advise_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerSessionIdTraceData(value, 1501, 1500, "PlaybackManager_Advise", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1501, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PlaybackManagerResultSessionIdAndQueueSizeTraceData> PlaybackManager_Advise_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultSessionIdAndQueueSizeTraceData(value, 1502, 1500, "PlaybackManager_Advise", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1502, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PlaybackManagerSessionIdTraceData> PlaybackManager_Unadvise_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerSessionIdTraceData(value, 1504, 1503, "PlaybackManager_Unadvise", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1504, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PlaybackManagerResultSessionIdAndQueueSizeTraceData> PlaybackManager_Unadvise_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultSessionIdAndQueueSizeTraceData(value, 1505, 1503, "PlaybackManager_Unadvise", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1505, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PlaybackManagerSessionIdTraceData> PlaybackManager_Change_SessionState_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerSessionIdTraceData(value, 1507, 1506, "PlaybackManager_ChangeSessionState", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1507, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PlaybackManagerResultSessionIdAndStateTraceData> PlaybackManager_Change_SessionState_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultSessionIdAndStateTraceData(value, 1508, 1506, "PlaybackManager_ChangeSessionState", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1508, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PlaybackManagerResultAndSessionIdTraceData> PlaybackManager_DuckSession
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultAndSessionIdTraceData(value, 1509, 1509, "PlaybackManager_DuckSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1509, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PlaybackManagerResultAndSessionIdTraceData> PlaybackManager_UnDuckSession
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultAndSessionIdTraceData(value, 1512, 1512, "PlaybackManager_UnDuckSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1512, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PlaybackManager_AudioOnVolumeDuckSession_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1516, 1515, "PlaybackManager_AudioOnVolumeDuckSession", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1516, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PlaybackManager_AudioOnVolumeDuckSession_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1517, 1515, "PlaybackManager_AudioOnVolumeDuckSession", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1517, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PlaybackManager_AudioOnVolumeUnDuckSession_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1519, 1518, "PlaybackManager_AudioOnVolumeUnDuckSession", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1519, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PlaybackManager_AudioOnVolumeUnDuckSession_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1520, 1518, "PlaybackManager_AudioOnVolumeUnDuckSession", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1520, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PlaybackManager_Initialization_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1522, 1521, "PlaybackManager_Initialization", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1522, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PlaybackManagerResultTraceData> PlaybackManager_Initialization_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultTraceData(value, 1523, 1521, "PlaybackManager_Initialization", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1523, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PlaybackManagerSessionIdTraceData> PlaybackManager_SendEvent_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerSessionIdTraceData(value, 1525, 1524, "PlaybackManager_SendEvent", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1525, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PlaybackManagerResultAndSessionIdTraceData> PlaybackManager_SendEvent_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PlaybackManagerResultAndSessionIdTraceData(value, 1526, 1524, "PlaybackManager_SendEvent", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1526, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppsFolderAppIDTraceData> AppsFolder_ParseDisplayName_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderAppIDTraceData(value, 1601, 1601, "AppsFolder_ParseDisplayName", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1601, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppsFolderAppIDTraceData> AppsFolder_ParseDisplayName_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderAppIDTraceData(value, 1602, 1601, "AppsFolder_ParseDisplayName", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1602, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_EnumObjects_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1603, 1603, "AppsFolder_EnumObjects", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1603, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_EnumObjects_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1604, 1603, "AppsFolder_EnumObjects", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1604, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_GetDetailsEx_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1605, 1605, "AppsFolder_GetDetailsEx", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1605, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_GetDetailsEx_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1606, 1605, "AppsFolder_GetDetailsEx", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1606, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_MoveItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1607, 1607, "AppsFolder_MoveItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1607, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppsFolderMoveItemTraceData> AppsFolder_MoveItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderMoveItemTraceData(value, 1608, 1607, "AppsFolder_MoveItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1608, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_GetPropertyStore_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1609, 1609, "AppsFolder_GetPropertyStore", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1609, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_GetPropertyStore_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1610, 1609, "AppsFolder_GetPropertyStore", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1610, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_GetPropertyStoreForKeys_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1611, 1611, "AppsFolder_GetPropertyStoreForKeys", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1611, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppsFolderPropertyStoreTypeTraceData> AppsFolder_GetPropertyStoreForKeys_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderPropertyStoreTypeTraceData(value, 1612, 1611, "AppsFolder_GetPropertyStoreForKeys", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1612, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_ImmersiveApp_OpenVerb_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1613, 1613, "AppsFolder_ImmersiveApp_OpenVerb", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1613, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppsFolderImmersiveAppOpenVerbTraceData> AppsFolder_ImmersiveApp_OpenVerb_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderImmersiveAppOpenVerbTraceData(value, 1614, 1613, "AppsFolder_ImmersiveApp_OpenVerb", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1614, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppIDAndEventTraceData> AppsFolderItemState_NotifyChange_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppIDAndEventTraceData(value, 1615, 1615, "AppsFolderItemState_NotifyChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1615, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppsFolder_DualModeVerb_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1617, 1617, "AppsFolder_DualModeVerb", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1617, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppsFolderImmersiveAppOpenVerbTraceData> AppsFolder_DualModeVerb_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderImmersiveAppOpenVerbTraceData(value, 1618, 1617, "AppsFolder_DualModeVerb", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1618, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DualModeVerbBeforeExecuteTraceData> AppsFolder_DualModeVerb_BeforeExecute
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DualModeVerbBeforeExecuteTraceData(value, 1619, 1617, "AppsFolder_DualModeVerb", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1619, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData> AppsFolderImmersiveAppOpenVerbExecutionAttemptResult
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData(value, 1620, 1613, "AppsFolder_ImmersiveApp_OpenVerb", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1620, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AppsFolderImmersiveAppOpenVerbResultTraceData> AppsFolderImmersiveAppOpenVerbResult
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppsFolderImmersiveAppOpenVerbResultTraceData(value, 1621, 1613, "AppsFolder_ImmersiveApp_OpenVerb", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1621, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_Toast_Manager_Init_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1701, 1700, "ImmersiveShellToastManagerInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1701, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastOperationStatusTraceData> ImmersiveShell_Toast_Manager_Init_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastOperationStatusTraceData(value, 1702, 1700, "ImmersiveShellToastManagerInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1702, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_Toast_Create_Platform_Session_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1704, 1703, "ImmersiveShellToastCreatePlatformSession", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1704, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastOperationStatusTraceData> ImmersiveShell_Toast_Create_Platform_Session_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastOperationStatusTraceData(value, 1705, 1703, "ImmersiveShellToastCreatePlatformSession", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1705, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastStartPositionInfoTraceData> ImmersiveShell_Toast_Start_Position
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastStartPositionInfoTraceData(value, 1707, 1706, "ImmersiveShellToastSetStartPosition", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1707, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastDisplayLimitInfoTraceData> ImmersiveShell_Toast_Display_Limit
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastDisplayLimitInfoTraceData(value, 1709, 1708, "ImmersiveShellToastSetDisplayLimit", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1709, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastOpaqueStateDurationInfoTraceData> ImmersiveShell_Toast_Opaque_State_Duration
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastOpaqueStateDurationInfoTraceData(value, 1711, 1710, "ImmersiveShellToastSetOpaqueStateDuration", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1711, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastSizeInfoTraceData> ImmersiveShell_Toast_Size
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastSizeInfoTraceData(value, 1713, 1712, "ImmersiveShellToastSetSize", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1713, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Data_Processing_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1718, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1718, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_Data_Processing_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1719, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1719, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_UI_Rendering_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1721, 1720, "ImmersiveShellToastUIRendering", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1721, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastPositionInfoTraceData> ImmersiveShell_Toast_Position_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastPositionInfoTraceData(value, 1722, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1722, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastDisplayIndexInfoTraceData> ImmersiveShell_Toast_Display_List_Enter
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastDisplayIndexInfoTraceData(value, 1723, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1723, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_UI_Rendering_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1724, 1720, "ImmersiveShellToastUIRendering", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1724, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Max_Display_Limit_Reached
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1726, 1725, "ImmersiveShellToastMaxLimitReached", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1726, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Opaque_State_Enter
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1728, 1727, "ImmersiveShellToastOpaqueState", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1728, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Opaque_State_Leave
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1729, 1727, "ImmersiveShellToastOpaqueState", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1729, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Decay_State_Enter
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1731, 1730, "ImmersiveShellToastDecayState", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1731, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Decay_State_Leave
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1732, 1730, "ImmersiveShellToastDecayState", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1732, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Working_State_Enter
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1734, 1733, "ImmersiveShellToastWorkingState", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1734, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Working_State_Leave
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1735, 1733, "ImmersiveShellToastWorkingState", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1735, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationActivationInfoTraceData> ImmersiveShell_Toast_Activate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationActivationInfoTraceData(value, 1737, 1736, "ImmersiveShellToastActivate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1737, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_UI_Rendering_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1738, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1738, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Dismiss
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1740, 1739, "ImmersiveShellToastDismiss", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1740, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Remove_Display_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1742, 1741, "ImmersiveShellToastRemoveDisplay", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1742, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Remove_Display_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1743, 1741, "ImmersiveShellToastRemoveDisplay", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1743, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Working_UI_Enabled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1745, 1744, "ImmersiveShellToastWorkingUIEnabled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1745, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastStartPositionInfoTraceData> ImmersiveShell_Toast_Rerrange_Layout_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastStartPositionInfoTraceData(value, 1747, 1746, "ImmersiveShellToastRearrangeLayout", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1747, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveShell_Toast_Rerrange_Layout_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1748, 1746, "ImmersiveShellToastRearrangeLayout", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1748, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_XML_Parsing
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1749, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1749, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_Data_Rendering
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1750, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1750, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_Rendering_Data_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1751, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1751, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationProcessingStatusTraceData> ImmersiveShell_Toast_Rendering_Data_Done
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationProcessingStatusTraceData(value, 1752, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1752, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastAudioPlayStartTraceData> ImmersiveShell_Toast_Play_Audio_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastAudioPlayStartTraceData(value, 1754, 1753, "ImmersiveShellToastAudio", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1754, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastAudioPlayBusyTraceData> ImmersiveShell_Toast_Play_Audio_Busy
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastAudioPlayBusyTraceData(value, 1755, 1753, "ImmersiveShellToastAudio", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1755, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Stop_Audio
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1756, 1753, "ImmersiveShellToastAudio", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1756, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Play_Audio_Complete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1757, 1753, "ImmersiveShellToastAudio", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1757, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Play_Audio_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1758, 1753, "ImmersiveShellToastAudio", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1758, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastDisplayIndexInfoTraceData> ImmersiveShell_Toast_Display_List_Exit
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastDisplayIndexInfoTraceData(value, 1759, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1759, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Overflow_Enqueue
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1760, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1760, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Overflow_Dequeue
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1761, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1761, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Cancelled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1762, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1762, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Cancel_Received
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1763, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1763, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Cancel_Stored
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1764, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1764, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Frozen
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1765, 1720, "ImmersiveShellToastUIRendering", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1765, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastXMLParsingErrorTraceData> ImmersiveShell_Toast_XML_Parsing_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastXMLParsingErrorTraceData(value, 1766, 1717, "ImmersiveShellToastDataProcessing", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1766, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastOperationStatusTraceData> ImmersiveShell_Toast_ImmersiveActivation_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastOperationStatusTraceData(value, 1767, 1736, "ImmersiveShellToastActivate", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1767, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_FadeIn_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1772, 1771, "ImmersiveShellToastFadeInAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1772, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_FadeIn_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1773, 1771, "ImmersiveShellToastFadeInAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1773, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_FadeOut_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1775, 1774, "ImmersiveShellToastFadeOutAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1775, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_FadeOut_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1776, 1774, "ImmersiveShellToastFadeOutAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1776, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Entry_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1778, 1777, "ImmersiveShellToastEntryAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1778, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Entry_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1779, 1777, "ImmersiveShellToastEntryAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1779, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Exit_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1781, 1780, "ImmersiveShellToastExitAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1781, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Exit_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1782, 1780, "ImmersiveShellToastExitAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1782, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Reposition_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1784, 1783, "ImmersiveShellToastRepositionAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1784, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_Reposition_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1785, 1783, "ImmersiveShellToastRepositionAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1785, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_TapUp_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1787, 1786, "ImmersiveShellToastTapUpAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1787, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_TapUp_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1788, 1786, "ImmersiveShellToastTapUpAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1788, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_TapDown_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1790, 1789, "ImmersiveShellToastTapDownAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1790, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ImmersiveShell_Toast_TapDown_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 1791, 1789, "ImmersiveShellToastTapDownAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1791, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileNotificationsResultTraceData> TileNotifications_CreateSession
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultTraceData(value, 1800, 1800, "TileNotifications_CreateSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1800, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultAndIDListTraceData> TileNotifications_UpdateSession
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultAndIDListTraceData(value, 1803, 1803, "TileNotifications_UpdateSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1803, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultTraceData> TileNotifications_CloseSession
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultTraceData(value, 1806, 1806, "TileNotifications_CloseSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1806, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultArrivedTraceData> TileNotifications_SessionNotificationArrived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultArrivedTraceData(value, 1809, 1809, "TileNotifications_SessionNotificationArrived", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1809, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultAndIDListTraceData> TileNotifications_RequestNotification
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultAndIDListTraceData(value, 1812, 1812, "TileNotifications_RequestNotification", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1812, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultArrivedTraceData> TileNotifications_RequestNotificationArrived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultArrivedTraceData(value, 1815, 1815, "TileNotifications_RequestNotificationArrived", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1815, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsPayloadTraceData> TileNotifications_NotificationSinkCalled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsPayloadTraceData(value, 1818, 1818, "TileNotifications_NotificationSinkCalled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1818, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResourceRequestTraceData> TileNotifications_RequestResource
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResourceRequestTraceData(value, 1821, 1821, "TileNotifications_RequestResource", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1821, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultArrivedTraceData> TileNotifications_ResourceArrived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultArrivedTraceData(value, 1824, 1824, "TileNotifications_ResourceArrived", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1824, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsPayloadTraceData> TileNotifications_ResourceSinkCalled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsPayloadTraceData(value, 1827, 1827, "TileNotifications_ResourceSinkCalled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1827, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultAndAppIdTraceData> TileNotifications_PauseNotifications
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultAndAppIdTraceData(value, 1830, 1830, "TileNotifications_PauseNotifications", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1830, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsResultAndAppIdTraceData> TileNotifications_ResumeNotifications
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsResultAndAppIdTraceData(value, 1833, 1833, "TileNotifications_ResumeNotifications", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1833, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsFailedInstallTraceData> TileNotifications_FailedInstall
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsFailedInstallTraceData(value, 1836, 1836, "TileNotifications_FailedInstall", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1836, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsBadgeTraceData> TileNotifications_BadgeNumber
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsBadgeTraceData(value, 1839, 1839, "TileNotifications_BadgeNumber", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1839, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsBadgeTraceData> TileNotifications_BadgeGlyph
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsBadgeTraceData(value, 1840, 1840, "TileNotifications_BadgeGlyph", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1840, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileClearTraceData> TileNotifications_ClearNotifications
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileClearTraceData(value, 1843, 1844, "TileNotifications_ClearNotifications", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1843, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<CreateMRTResourceContextStartTraceData> CreateMRTResourceContext_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateMRTResourceContextStartTraceData(value, 1844, 1843, "Tiles_MRT", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1844, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<CreateMRTResourceContextStopTraceData> CreateMRTResourceContext_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateMRTResourceContextStopTraceData(value, 1845, 1843, "Tiles_MRT", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1845, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<CreateDecoratedFileWithDpisStartTraceData> CreateDecoratedFileWithDpis_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateDecoratedFileWithDpisStartTraceData(value, 1846, 1843, "Tiles_MRT", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1846, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<CreateDecoratedFileWithDpisStopTraceData> CreateDecoratedFileWithDpis_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateDecoratedFileWithDpisStopTraceData(value, 1847, 1843, "Tiles_MRT", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1847, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsAppIdTraceData> TilesNotifications_AnimationScheduled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsAppIdTraceData(value, 1849, 1848, "TilesNotifications_AnimationScheduling", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1849, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationsAppIdTraceData> TilesNotifications_AnimationPlayed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationsAppIdTraceData(value, 1850, 1848, "TilesNotifications_AnimationScheduling", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1850, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileNotifications_QueryNotificationsEnabled_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1852, 1851, "TileNotifications_QueryNotificationsEnabled", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1852, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileNotifications_QueryNotificationsEnabled_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1853, 1851, "TileNotifications_QueryNotificationsEnabled", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1853, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarShow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1900, 1900, "ActionSpacePane_CharmBarShow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1900, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarShow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1901, 1900, "ActionSpacePane_CharmBarShow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1901, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarHide_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1902, 1902, "ActionSpacePane_CharmBarHide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1902, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarHide_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1903, 1902, "ActionSpacePane_CharmBarHide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1903, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarPosition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1904, 1904, "ActionSpacePane_CharmBarPosition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1904, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarPosition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1905, 1904, "ActionSpacePane_CharmBarPosition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1905, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ActionSpacePaneCharmBarTraceData> ActionSpacePane_CharmBarUpdate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneCharmBarTraceData(value, 1906, 1906, "ActionSpacePane_CharmBarUpdate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1906, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ActionSpacePaneCharmBarTraceData> ActionSpacePane_CharmBarUpdate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneCharmBarTraceData(value, 1907, 1906, "ActionSpacePane_CharmBarUpdate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1907, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ActionSpacePaneCharmTraceData> ActionSpacePane_CharmActivate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneCharmTraceData(value, 1908, 1908, "ActionSpacePane_CharmActivate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1908, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ActionSpacePaneCharmTraceData> ActionSpacePane_CharmActivate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneCharmTraceData(value, 1909, 1908, "ActionSpacePane_CharmActivate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1909, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmBarHardwareButtonEvent_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1916, 1916, "ActionSpacePane_CharmBarHardwareButtonEvent", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1916, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ActionSpacePaneResultTraceData> ActionSpacePane_CharmBarHardwareButtonEvent_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneResultTraceData(value, 1917, 1916, "ActionSpacePane_CharmBarHardwareButtonEvent", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1917, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmMenuShow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1918, 1918, "ActionSpacePane_CharmMenuShow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1918, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmMenuShow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1919, 1918, "ActionSpacePane_CharmMenuShow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1919, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmMenuHide_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1920, 1920, "ActionSpacePane_CharmMenuHide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1920, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePane_CharmMenuHide_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1921, 1920, "ActionSpacePane_CharmMenuHide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1921, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ActionSpacePaneFlowTraceData> ActionSpacePaneStartup_LaunchSystemFlow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActionSpacePaneFlowTraceData(value, 1955, 1950, "ActionSpacePaneStartup", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1955, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePaneStartup_PaneRegistered
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1956, 1950, "ActionSpacePaneStartup", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1956, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ActionSpacePaneShutdown_PaneUnregistered
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1965, 1960, "ActionSpacePaneDismiss", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1965, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_PerformRealization_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2000, 2000, "Grid_Controller_PerformRealization", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2000, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridRealizationInfoTraceData> Grid_Controller_PerformRealization_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridRealizationInfoTraceData(value, 2001, 2000, "Grid_Controller_PerformRealization", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2001, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Controller_RealizeTile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2002, 2002, "Grid_Controller_RealizeTile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2002, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Controller_RealizeTile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2003, 2002, "Grid_Controller_RealizeTile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2003, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Controller_UnrealizeTile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2004, 2004, "Grid_Controller_UnrealizeTile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2004, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Controller_UnrealizeTile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2005, 2004, "Grid_Controller_UnrealizeTile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2005, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Layout_UpdateLayout_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2006, 2006, "Grid_Layout_UpdateLayout", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2006, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Layout_UpdateLayout_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2007, 2006, "Grid_Layout_UpdateLayout", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2007, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_AddItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2008, 2008, "Grid_Layout_AddItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2008, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_AddItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2009, 2008, "Grid_Layout_AddItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2009, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_RemoveItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2010, 2010, "Grid_Layout_RemoveItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2010, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_RemoveItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2011, 2010, "Grid_Layout_RemoveItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2011, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_GetItemData_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2012, 2012, "Grid_Layout_GetItemData", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2012, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_Layout_GetItemData_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2013, 2012, "Grid_Layout_GetItemData", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2013, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_SetSize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2014, 2014, "Grid_View_SetSize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2014, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_SetSize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2015, 2014, "Grid_View_SetSize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2015, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridGroupIDTraceData> Grid_View_UpdateGroupBounds_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridGroupIDTraceData(value, 2016, 2016, "Grid_View_UpdateGroupBounds", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2016, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridGroupIDTraceData> Grid_View_UpdateGroupBounds_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridGroupIDTraceData(value, 2017, 2016, "Grid_View_UpdateGroupBounds", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2017, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_View_UpdateTile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2018, 2018, "Grid_View_UpdateTile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2018, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAppIDTraceData> Grid_View_UpdateTile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAppIDTraceData(value, 2019, 2018, "Grid_View_UpdateTile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2019, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTileNavigationTraceData> Grid_View_OnTileNavigation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileNavigationTraceData(value, 2020, 2020, "Grid_View_OnTileNavigation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2020, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridTileNavigationTraceData> Grid_View_OnTileNavigation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileNavigationTraceData(value, 2021, 2020, "Grid_View_OnTileNavigation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2021, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_OnResize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2022, 2022, "Grid_View_OnResize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2022, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_OnResize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2023, 2022, "Grid_View_OnResize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2023, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridScrollPositionTraceData> Grid_View_OnScrolled_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridScrollPositionTraceData(value, 2024, 2024, "Grid_View_OnScrolled", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2024, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_OnScrolled_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2025, 2024, "Grid_View_OnScrolled", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2025, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTileActivationTraceData> Grid_Controller_OnTileActivated_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileActivationTraceData(value, 2026, 2026, "Grid_Controller_OnTileActivated", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2026, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridTileActivationTraceData> Grid_Controller_OnTileActivated_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileActivationTraceData(value, 2027, 2026, "Grid_Controller_OnTileActivated", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2027, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTilePropertyFailureTraceData> GridModelIItemReadPropertyFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTilePropertyFailureTraceData(value, 2036, 2036, "Grid_Model_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2036, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileFailureTraceData> Grid_View_TileUIFactory_CreateTileElement_Failed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileFailureTraceData(value, 2037, 2037, "Grid_View_TileUIFactory_CreateTileElement_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2037, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileFailureTraceData> GridViewTileUIFactoryUpdateTileElementFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileFailureTraceData(value, 2038, 2038, "Grid_View_TileUIFactory_UpdateTileElement_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2038, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Model_Item_Enumeration_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2039, 2039, "Grid_Model_Item_Enumeration", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2039, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridItemCollectionEnumerationTraceData> Grid_Model_Item_Enumeration_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridItemCollectionEnumerationTraceData(value, 2040, 2039, "Grid_Model_Item_Enumeration", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2040, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTileExecuteTraceData> Grid_Controller_ExecuteTileVerb_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileExecuteTraceData(value, 2041, 2041, "Grid_Controller_ExecuteTileVerb", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2041, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridTileExecuteTraceData> Grid_Controller_ExecuteTileVerb_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileExecuteTraceData(value, 2042, 2041, "Grid_Controller_ExecuteTileVerb", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2042, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTileExecuteTraceData> Grid_TileActivationTask_ExecuteItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileExecuteTraceData(value, 2043, 2043, "Grid_TileActivationTask_ExecuteItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2043, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileActivationTask_ExecuteItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2044, 2043, "Grid_TileActivationTask_ExecuteItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2044, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Host_SetItemCollection_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2045, 2045, "Grid_Host_SetItemCollection", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2045, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Host_SetItemCollection_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2046, 2045, "Grid_Host_SetItemCollection", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2046, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Host_VisibleRealized
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2047, 2047, "Grid_Host_VisibleRealized", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2047, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridModelSetRealizedTilesTraceData> Grid_Model_SetRealizedTiles_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridModelSetRealizedTilesTraceData(value, 2048, 2048, "Grid_Model_SetRealizedTiles", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2048, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Model_SetRealizedTiles_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2049, 2048, "Grid_Model_SetRealizedTiles", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2049, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileContextMenuProvider_CreateMenu_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2050, 2050, "Grid_TileContextMenuProvider_CreateMenu", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2050, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileContextMenuProvider_CreateMenu_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2051, 2050, "Grid_TileContextMenuProvider_CreateMenu", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2051, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridMoveItemTraceData> Grid_Controller_MoveItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridMoveItemTraceData(value, 2052, 2052, "Grid_Controller_MoveItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2052, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridMoveItemTraceData> Grid_Controller_MoveItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridMoveItemTraceData(value, 2053, 2052, "Grid_Controller_MoveItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2053, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileRearrange_RearrangeStart_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2054, 2054, "Grid_TileRearrange_RearrangeStart", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2054, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileRearrange_RearrangeStart_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2055, 2054, "Grid_TileRearrange_RearrangeStart", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2055, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileRearrange_RearrangeMove_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2056, 2056, "Grid_TileRearrange_RearrangeMove", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2056, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_TileRearrange_RearrangeMove_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2057, 2056, "Grid_TileRearrange_RearrangeMove", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2057, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_FirstPage_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2058, 2058, "Grid_View_FirstPage", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2058, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_FirstPage_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2059, 2058, "Grid_View_FirstPage", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2059, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_Prefetch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2060, 2060, "Grid_View_Prefetch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2060, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_Prefetch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2061, 2060, "Grid_View_Prefetch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2061, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridOnTileTickledTraceData> Grid_View_OnTileTickled_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnTileTickledTraceData(value, 2062, 2062, "Grid_View_OnTileTickled", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2062, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridOnTileTickledTraceData> Grid_View_OnTileTickled_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnTileTickledTraceData(value, 2063, 2062, "Grid_View_OnTileTickled", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2063, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_OnAutoTickle_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2064, 2064, "Grid_View_OnAutoTickle", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2064, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridViewOnAutoTickleResultTraceData> Grid_View_OnAutoTickle_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridViewOnAutoTickleResultTraceData(value, 2065, 2064, "Grid_View_OnAutoTickle", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2065, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> GridViewVisibleTilesHighQuality
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2066, 2066, "Grid_View_VisibleTilesHighQuality", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2066, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_View_AreTicklesPresent_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2068, 2068, "Grid_View_AreTicklesPresent", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2068, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridAreTicklesPresentResultTraceData> Grid_View_AreTicklesPresent_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridAreTicklesPresentResultTraceData(value, 2069, 2068, "Grid_View_AreTicklesPresent", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2069, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_ToggleTileSize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2070, 2070, "Grid_Controller_ToggleTileSize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2070, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_ToggleTileSize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2071, 2070, "Grid_Controller_ToggleTileSize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2071, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridTileShellItemCreationFailureTraceData> GridModelShellItemCreateFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileShellItemCreationFailureTraceData(value, 2072, 2036, "Grid_Model_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2072, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> GridModelItemCreateFailed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2073, 2036, "Grid_Model_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2073, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeStart_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2074, 2074, "Grid_GroupRearrange_RearrangeStart", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2074, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeStart_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2075, 2074, "Grid_GroupRearrange_RearrangeStart", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2075, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeCancel_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2076, 2076, "Grid_GroupRearrange_RearrangeCancel", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2076, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeCancel_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2077, 2076, "Grid_GroupRearrange_RearrangeCancel", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2077, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2078, 2078, "Grid_GroupRearrange_RearrangeComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2078, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2079, 2078, "Grid_GroupRearrange_RearrangeComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2079, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeMove_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2080, 2080, "Grid_GroupRearrange_RearrangeMove", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2080, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_GroupRearrange_RearrangeMove_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2081, 2080, "Grid_GroupRearrange_RearrangeMove", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2081, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_ShareFromMogo_SharePreflight_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2082, 2082, "Grid_ShareFromMogo_SharePreflight", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2082, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_ShareFromMogo_SharePreflight_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2083, 2082, "Grid_ShareFromMogo_SharePreflight", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2083, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Tile_Verb_Invoked_UnpinFromStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2084, 2084, "Grid_Tile_Verb_Invoked", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2084, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Tile_Verb_Invoked_Share
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2085, 2084, "Grid_Tile_Verb_Invoked", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2085, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileVerbUninstallTraceData> Grid_Tile_Verb_Uninstall_ShortcutsDeleted
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileVerbUninstallTraceData(value, 2086, 2085, "Grid_Tile_Verb_Uninstall", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2086, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileVerbUninstallTraceData> Grid_Tile_Verb_Uninstall_AsyncOperationStarted
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileVerbUninstallTraceData(value, 2087, 2085, "Grid_Tile_Verb_Uninstall", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2087, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridOnCollectionChangedTraceData> Grid_CollectionEvent_OnCollectionChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnCollectionChangedTraceData(value, 2088, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2088, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridOnGetCountDoneTraceData> Grid_CollectionEvent_OnGetCountDone
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnGetCountDoneTraceData(value, 2089, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2089, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridOnCollectionItemsAddedOrDeletedTraceData> Grid_CollectionEvent_OnItemsAdded
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnCollectionItemsAddedOrDeletedTraceData(value, 2090, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2090, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridOnCollectionItemsAddedOrDeletedTraceData> Grid_CollectionEvent_OnItemsDeleted
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnCollectionItemsAddedOrDeletedTraceData(value, 2091, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2091, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_CollectionEvent_OnItemMoved
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2092, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2092, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_CollectionEvent_OnItemTranslated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2093, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2093, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridOnItemChangedTraceData> Grid_CollectionEvent_OnItemChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridOnItemChangedTraceData(value, 2094, 2086, "Grid_CollectionEvent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2094, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileFailureTraceData> Grid_Model_OnTileError
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileFailureTraceData(value, 2095, 2036, "Grid_Model_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2095, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileFailureTraceData> Grid_Model_OnItemError
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileFailureTraceData(value, 2096, 2036, "Grid_Model_Failed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2096, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridViewShowCountTraceData> Grid_View_TickleTiles
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridViewShowCountTraceData(value, 2097, 2097, "Grid_View_PerformTickle", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2097, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridViewShowCountTraceData> Grid_View_PeekTiles
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridViewShowCountTraceData(value, 2098, 2098, "Grid_View_PerformPeek", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2098, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridTileVerbRemoveContentTileTraceData> Grid_Tile_Verb_RemoveContentTile_ShortcutDeleted
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridTileVerbRemoveContentTileTraceData(value, 2099, 2099, "Grid_Tile_Verb_RemoveContentTile", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2099, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PickerPickerLaunchedTraceData> Picker_PickerLaunched_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerPickerLaunchedTraceData(value, 2100, 2100, "Picker_PickerLaunched", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2100, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_PickerReady_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2102, 2102, "Picker_PickerReady", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2102, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_NavigationStart_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2104, 2104, "Picker_NavigationStart", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2104, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_View_ItemToggled_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2106, 2106, "Picker_View_ItemToggled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2106, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_Basket_Ready_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2108, 2108, "Picker_Basket_Ready", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2108, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PickerPickerActionButtonEnabledTraceData> Picker_ActionButton_EnabledChanged_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerPickerActionButtonEnabledTraceData(value, 2110, 2110, "Picker_ActionButton_EnabledChanged", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2110, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_JumpBar_MenuInvoked_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2112, 2112, "Picker_JumpBar_MenuInvoked", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2112, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_JumpBar_MenuInvoked_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2113, 2112, "Picker_JumpBar_MenuInvoked", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2113, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_ActionButton_ContentChanged_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2114, 2114, "Picker_ActionButton_ContentChanged", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2114, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_BusyState_Shown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2116, 2116, "Picker_BusyState_Shown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2116, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_BusyState_Shown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2117, 2116, "Picker_BusyState_Shown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2117, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_WaitForApplications_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2118, 2118, "Picker_WaitForApplications", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2118, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_WaitForApplications_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2119, 2118, "Picker_WaitForApplications", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2119, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_Application_Signalled_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2120, 2120, "Picker_Application_Signalled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2120, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_JumpBar_HomeGroupAvailableCheck_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2122, 2122, "Picker_JumpBar_HomeGroupAvailableCheck", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2122, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerHomeGroupAvailableTemplateTraceData> Picker_JumpBar_HomeGroupAvailableCheck_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerHomeGroupAvailableTemplateTraceData(value, 2123, 2122, "Picker_JumpBar_HomeGroupAvailableCheck", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2123, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Picker_LocationLabel_Updated_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2124, 2124, "Picker_LocationLabel_Updated", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2124, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateLocal_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2126, 2126, "PerfTrack_Picker_NavigateLocal_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2126, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateLocal_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2127, 2126, "PerfTrack_Picker_NavigateLocal_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2127, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateLocal_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2128, 2128, "PerfTrack_Picker_NavigateLocal_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2128, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_NavigateLocal_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2129, 2128, "PerfTrack_Picker_NavigateLocal_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2129, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Tile_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2130, 2130, "PerfTrack_Picker_Launch_Open_Tile_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2130, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Tile_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2131, 2130, "PerfTrack_Picker_Launch_Open_Tile_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2131, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Tile_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2132, 2132, "PerfTrack_Picker_Launch_Open_Tile_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2132, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_Launch_Open_Tile_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2133, 2132, "PerfTrack_Picker_Launch_Open_Tile_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2133, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Thumbnail_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2134, 2134, "PerfTrack_Picker_Launch_Open_Thumbnail_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2134, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Thumbnail_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2135, 2134, "PerfTrack_Picker_Launch_Open_Thumbnail_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2135, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2136, 2136, "PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2136, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2137, 2136, "PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2137, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Save_Tile_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2138, 2138, "PerfTrack_Picker_Launch_Save_Tile_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2138, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Save_Tile_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2139, 2138, "PerfTrack_Picker_Launch_Save_Tile_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2139, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_Launch_Save_Tile_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2140, 2140, "PerfTrack_Picker_Launch_Save_Tile_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2140, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_Launch_Save_Tile_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2141, 2140, "PerfTrack_Picker_Launch_Save_Tile_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2141, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> FileOpenPickerUI_AddFile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2142, 2142, "FileOpenPickerUI_AddFile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2142, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> FileOpenPickerUI_AddFile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2143, 2142, "FileOpenPickerUI_AddFile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2143, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> FileOpenPickerUI_RemoveFile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2144, 2144, "FileOpenPickerUI_RemoveFile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2144, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> FileOpenPickerUI_RemoveFile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2145, 2144, "FileOpenPickerUI_RemoveFile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2145, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateHG_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2146, 2146, "PerfTrack_Picker_NavigateHG_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2146, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateHG_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2147, 2146, "PerfTrack_Picker_NavigateHG_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2147, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateHG_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2148, 2148, "PerfTrack_Picker_NavigateHG_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2148, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_NavigateHG_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2149, 2148, "PerfTrack_Picker_NavigateHG_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2149, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateUNC_Responsive_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2150, 2150, "PerfTrack_Picker_NavigateUNC_Responsive", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2150, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateUNC_Responsive_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2151, 2150, "PerfTrack_Picker_NavigateUNC_Responsive", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2151, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Picker_NavigateUNC_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2152, 2152, "PerfTrack_Picker_NavigateUNC_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2152, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PickerViewCompleteTraceData> PerfTrack_Picker_NavigateUNC_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerViewCompleteTraceData(value, 2153, 2152, "PerfTrack_Picker_NavigateUNC_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2153, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PickerLaunchDurationTraceData> PerfTrack_Picker_Launch_Thumbnail_FirstPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerLaunchDurationTraceData(value, 2154, 2154, "PerfTrack_Picker_Launch_Thumbnail_FirstPage", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2154, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PickerLaunchDurationTraceData> PerfTrack_Picker_Launch_Tile_FirstPage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PickerLaunchDurationTraceData(value, 2155, 2155, "PerfTrack_Picker_Launch_Tile_FirstPage", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2155, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_InitSharing_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2200, 2200, "SharingManager_InitSharing", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2200, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_InitSharing_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2201, 2200, "SharingManager_InitSharing", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2201, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_GetSharableItemCount_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2202, 2202, "SharingManager_GetSharableItemCount", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2202, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingManagerGetSharableItemCountStopTraceData> SharingManager_GetSharableItemCount_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetSharableItemCountStopTraceData(value, 2203, 2202, "SharingManager_GetSharableItemCount", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2203, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingManagerGetSharableItemInfoStartTraceData> SharingManager_GetSharableItemDescription_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetSharableItemInfoStartTraceData(value, 2204, 2204, "SharingManager_GetSharableItemDescription", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2204, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_GetSharableItemDescription_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2205, 2204, "SharingManager_GetSharableItemDescription", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2205, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingManagerGetSharableItemInfoStartTraceData> SharingManager_GetSharableItemData_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetSharableItemInfoStartTraceData(value, 2206, 2206, "SharingManager_GetSharableItemData", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2206, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_GetSharableItemData_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2207, 2206, "SharingManager_GetSharableItemData", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2207, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingManagerGetSharableItemInfoStartTraceData> SharingManager_SelectSharableItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetSharableItemInfoStartTraceData(value, 2208, 2208, "SharingManager_SelectSharableItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2208, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_SelectSharableItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2209, 2208, "SharingManager_SelectSharableItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2209, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_GetAppTargetCount_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2210, 2210, "SharingManager_GetAppTargetCount", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2210, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingManagerTargetCountStopTraceData> SharingManager_GetAppTargetCount_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerTargetCountStopTraceData(value, 2211, 2210, "SharingManager_GetAppTargetCount", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2211, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingManagerGetTargetStartTraceData> SharingManager_GetAppTarget_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetTargetStartTraceData(value, 2212, 2212, "SharingManager_GetAppTarget", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2212, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_GetAppTarget_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2213, 2212, "SharingManager_GetAppTarget", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2213, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_GetQuickShareTargetCount_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2214, 2214, "SharingManager_GetQuickShareTargetCount", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2214, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingManagerTargetCountStopTraceData> SharingManager_GetQuickShareTargetCount_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerTargetCountStopTraceData(value, 2215, 2214, "SharingManager_GetQuickShareTargetCount", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2215, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingManagerGetTargetStartTraceData> SharingManager_GetQuickShareTarget_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingManagerGetTargetStartTraceData(value, 2216, 2216, "SharingManager_GetQuickShareTarget", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2216, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_GetQuickShareTarget_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2217, 2216, "SharingManager_GetQuickShareTarget", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2217, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_ActivateTarget_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2218, 2218, "SharingManager_ActivateTarget", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2218, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_ActivateTarget_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2219, 2218, "SharingManager_ActivateTarget", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2219, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingManager_TransferData_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2220, 2220, "SharingManager_TransferData", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2220, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingManager_TransferData_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2221, 2220, "SharingManager_TransferData", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2221, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingTargetCallback_DoneTransfer_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2222, 2222, "SharingTargetCallback_DoneTransfer", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2222, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingTargetCallback_DoneTransfer_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2223, 2222, "SharingTargetCallback_DoneTransfer", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2223, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> QuickShareTargetList_SaveQuickShareTarget_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2224, 2224, "QuickShareTargetList_SaveQuickShareTarget", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2224, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> QuickShareTargetList_SaveQuickShareTarget_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2225, 2224, "QuickShareTargetList_SaveQuickShareTarget", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2225, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SharingTargetAppList_QueryTargets_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2226, 2226, "SharingTargetAppList_QueryTargets", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2226, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> SharingTargetAppList_QueryTargets_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2227, 2226, "SharingTargetAppList_QueryTargets", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2227, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> QuickShareTargetList_QueryTargets_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2228, 2228, "QuickShareTargetList_QueryTargets", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2228, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> QuickShareTargetList_QueryTargets_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2229, 2228, "QuickShareTargetList_QueryTargets", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2229, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_InvalidPlatform_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2230, 2230, "Share_InvalidPlatform", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2230, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_BGThreadFailure_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2231, 2231, "Share_BGThreadFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2231, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_ShowFailure_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2232, 2232, "Share_ShowFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2232, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_NoSourceItems_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2233, 2233, "Share_NoSourceItems", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2233, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_EnumSourceItemsFailure_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2234, 2234, "Share_EnumSourceItemsFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2234, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_LoadDUIFailure_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2235, 2235, "Share_LoadDUIFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2235, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_NoDestinations_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2236, 2236, "Share_NoDestinations", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2236, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SharingFlowReturnResultTraceData> Share_EnumDestinationsFailure_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SharingFlowReturnResultTraceData(value, 2237, 2237, "Share_EnumDestinationsFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2237, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_InitUI_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2238, 2238, "Share_InitUI", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2238, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_InitUI_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2239, 2238, "Share_InitUI", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2239, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_ContentChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2240, 2240, "Share_ContentChange", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2240, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_ContentChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2241, 2240, "Share_ContentChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2241, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_SpeedBumpToMainView
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2242, 2244, "Share_SpeedBumpToMainView", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2242, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_MainViewToSpeedBump
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2243, 2243, "Share_MainViewToSpeedBump", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2243, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_RunningSharesToView
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2244, 2242, "Share_RunningSharesToView", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2244, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Share_ViewToRunningShares
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2245, 2241, "Share_ViewToRunningShares", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2245, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Share_ShowFlow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2246, 2245, "PerfTrack_Share_ShowFlow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2246, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackShareShowFlowTraceData> PerfTrack_Share_ShowFlow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackShareShowFlowTraceData(value, 2247, 2245, "PerfTrack_Share_ShowFlow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2247, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherInitializeScaleDataTraceData> Launcher_Apps_Initialize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherInitializeScaleDataTraceData(value, 2300, 2300, "Launcher_Initialize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2300, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<LauncherInitializeScaleDataTraceData> Launcher_Apps_Initialize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherInitializeScaleDataTraceData(value, 2301, 2300, "Launcher_Initialize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2301, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2302, 2302, "Launcher_Apps_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2302, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2303, 2302, "Launcher_Apps_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2303, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_EscPressed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2304, 2304, "Launcher_EscPressed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2304, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_Hide_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2305, 2305, "Launcher_Apps_Hide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2305, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_Hide_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2306, 2305, "Launcher_Apps_Hide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2306, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_OpenSearch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2307, 2307, "Launcher_Apps_OpenSearch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2307, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_CloseSearch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2309, 2309, "Launcher_Apps_CloseSearch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2309, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_OnSearch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2313, 2313, "Launcher_OnSearch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2313, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_OnSearch_End
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2314, 2313, "Launcher_OnSearch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2314, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherViewIdentifiersTraceData> Launcher_Apps_ViewChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherViewIdentifiersTraceData(value, 2315, 2315, "Launcher_Apps_ViewChange", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2315, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_Apps_ViewChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2316, 2315, "Launcher_Apps_ViewChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2316, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherViewActivatedTraceData> Launcher_ViewActivated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherViewActivatedTraceData(value, 2317, 2317, "Launcher_ViewActivated", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2317, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_TileDropped_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2318, 2318, "Launcher_TileDropped", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2318, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_TileDropped_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2319, 2315, "Launcher_Apps_ViewChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2319, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_PathCompletion_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2320, 2320, "Launcher_PathCompletion", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2320, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_PathCompletion_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2321, 2320, "Launcher_PathCompletion", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2321, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherViewPickerVisiblityChangedTraceData> Launcher_ViewPicker_VisiblityChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherViewPickerVisiblityChangedTraceData(value, 2322, 2322, "Launcher_ViewPicker_VisiblityChanged", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2322, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Apps_SwitchToAllAppsView_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2324, 2324, "Launcher_Apps_SwitchToAllAppsView", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2324, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridViewReadyInfoTraceData> PerfTrack_Launcher_Apps_SwitchToAllAppsView_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridViewReadyInfoTraceData(value, 2325, 2324, "Launcher_Apps_SwitchToAllAppsView", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2325, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_DesktopToLauncherTransition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2326, 2326, "PerfTrack_DesktopToLauncherTransition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2326, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackDesktopToLauncherTransitionTraceData> PerfTrack_DesktopToLauncherTransition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackDesktopToLauncherTransitionTraceData(value, 2327, 2326, "PerfTrack_DesktopToLauncherTransition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2327, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_SetForegroundWindow
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2328, 2302, "Launcher_Apps_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2328, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_RegisterForDesktopSwitch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2330, 2302, "Launcher_Apps_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2330, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_DesktopSwitchCallback
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2331, 2302, "Launcher_Apps_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2331, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<LauncherRefreshContentsTraceData> Launcher_Apps_RefreshContents_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherRefreshContentsTraceData(value, 2332, 2332, "Launcher_RefreshContents", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2332, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<LauncherRefreshContentsTraceData> Launcher_Apps_RefreshContents_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherRefreshContentsTraceData(value, 2333, 2332, "Launcher_RefreshContents", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2333, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_OrientationChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2356, 2338, "Launcher_OrientationChange", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2356, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_OrientationChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2357, 2338, "Launcher_OrientationChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2357, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_ClearTiles_ClearNotificationCache
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2358, 2339, "Launcher_ClearTiles", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2358, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Launcher_ClearTiles_ClearTilesCache
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2359, 2339, "Launcher_ClearTiles", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2359, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<BackgroundColorChangeInfoTraceData> Launcher_BackgroundColorChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BackgroundColorChangeInfoTraceData(value, 2360, 2340, "Launcher_BackgroundColorChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2360, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Dismiss_Explicit_ToDesktop_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2361, 2341, "Launcher_Dismiss_Explicit_ToDesktop", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2361, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackLauncherDismissExplicitToDesktopStopTraceData> PerfTrack_Launcher_Dismiss_Explicit_ToDesktop_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackLauncherDismissExplicitToDesktopStopTraceData(value, 2362, 2341, "Launcher_Dismiss_Explicit_ToDesktop", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2362, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Dismiss_Explicit_ToImmersiveMode_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2363, 2342, "Launcher_Dismiss_Explicit_ToImmersiveMode", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2363, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData> PerfTrack_Launcher_Dismiss_Explicit_ToImmersiveMode_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData(value, 2364, 2342, "Launcher_Dismiss_Explicit_ToImmersiveMode", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2364, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Show_FromImmersiveMode_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2365, 2343, "Launcher_Show_FromImmersiveMode", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2365, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Show_FromImmersiveMode_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2366, 2343, "Launcher_Show_FromImmersiveMode", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2366, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Apps_SwitchToStartViewFromAllAppsView_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2368, 2344, "Launcher_Apps_SwitchToStartViewFromAllAppsView", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2368, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_Launcher_Apps_SwitchToStartViewFromAllAppsView_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2369, 2344, "Launcher_Apps_SwitchToStartViewFromAllAppsView", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2369, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ShellTraceId_Explorer_Startup_InitializeDesktop_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2370, 2345, "Launcher_Dismiss_Explicit_ToDesktop_First", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2370, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_AppSearch_ViewComplete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2373, 2361, "PerfTrack_AppSearch_ViewComplete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2373, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackAppSearchViewCompleteTemplateTraceData> PerfTrack_AppSearch_ViewComplete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackAppSearchViewCompleteTemplateTraceData(value, 2374, 2361, "PerfTrack_AppSearch_ViewComplete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2374, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_FSA_Search_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2375, 2375, "PerfTrack_FSA_Search", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2375, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackAppSearchViewCompleteTemplateTraceData> PerfTrack_FSA_Search_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackAppSearchViewCompleteTemplateTraceData(value, 2376, 2375, "PerfTrack_FSA_Search", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2376, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_CMS_Search_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2377, 2377, "PerfTrack_CMS_Search", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2377, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackAppSearchViewCompleteTemplateTraceData> PerfTrack_CMS_Search_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackAppSearchViewCompleteTemplateTraceData(value, 2378, 2377, "PerfTrack_CMS_Search", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2378, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppManagerZbandChangeTraceData> Launcher_ActiveZbandChanged_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerZbandChangeTraceData(value, 2379, 2379, "Launcher_ActiveZbandChanged", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2379, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<AppManagerZbandChangeTraceData> Launcher_ActiveZbandChanged_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppManagerZbandChangeTraceData(value, 2380, 2379, "Launcher_ActiveZbandChanged", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2380, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherRequestTileBitmapDataTraceData> Launcher_RequestTileBitmap_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherRequestTileBitmapDataTraceData(value, 2381, 2380, "Launcher_RequestTileBitmap", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2381, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_FSA_Search_Abort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2398, 2375, "PerfTrack_FSA_Search", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2398, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_CMS_Search_Abort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2399, 2377, "PerfTrack_CMS_Search", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2399, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMPackageOperationTraceData> PerfTrack_PLM_SuspendPackage_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationTraceData(value, 2450, 2400, "PerfTrack_PLM_SuspendPackage", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2450, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMPackageOperationStopTraceData> PerfTrack_PLM_SuspendPackage_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationStopTraceData(value, 2451, 2400, "PerfTrack_PLM_SuspendPackage", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2451, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_UserLogoff
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2453, 2412, "PLM_UserLogoff", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2453, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_ConnectedStandbyEntry
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2454, 2413, "PLM_ConnectedStandbyEntry", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2454, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_TerminationPolicy_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2455, 2402, "PLM_TerminationPolicy", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2455, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_TerminationPolicy_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2456, 2402, "PLM_TerminationPolicy", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2456, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_PagedOutPolicy_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2457, 2403, "PLM_PagedOutPolicy", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2457, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> PLM_PagedOutPolicy_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2458, 2403, "PLM_PagedOutPolicy", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2458, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMApplicationHangTraceData> PLM_ApplicationHang_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangTraceData(value, 2459, 2404, "PLM_ApplicationHang", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2459, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMApplicationHangTraceData> PLM_ApplicationHang_Stop_Timeout
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangTraceData(value, 2460, 2404, "PLM_ApplicationHang", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2460, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMApplicationHangTraceData> PLM_ApplicationHang_Stop_ForceClose
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangTraceData(value, 2461, 2404, "PLM_ApplicationHang", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2461, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMApplicationHangTraceData> PLM_ApplicationHang_Stop_AppRecovered
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangTraceData(value, 2462, 2404, "PLM_ApplicationHang", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2462, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMPackageOperationTraceData> PerfTrack_PLM_ResumePackage_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationTraceData(value, 2463, 2405, "PerfTrack_PLM_ResumePackage", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2463, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMPackageOperationStopTraceData> PerfTrack_PLM_ResumePackage_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationStopTraceData(value, 2464, 2405, "PerfTrack_PLM_ResumePackage", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2464, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMApplicationHangActivationTraceData> PerfTrack_PLM_HungApplication_Activation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangActivationTraceData(value, 2466, 2406, "PerfTrack_PLM_HungApplication_Activation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2466, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMApplicationHangActivationTraceData> PerfTrack_PLM_HungApplication_Activation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationHangActivationTraceData(value, 2467, 2406, "PerfTrack_PLM_HungApplication_Activation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2467, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMSuspendDeniedTraceData> PLM_SuspendDenied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMSuspendDeniedTraceData(value, 2471, 2400, "PerfTrack_PLM_SuspendPackage", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2471, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMResumePackageTraceData> PLM_ResumePackage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMResumePackageTraceData(value, 2472, 2405, "PerfTrack_PLM_ResumePackage", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2472, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMPackageStateChangeTraceData> PLM_PackageStateChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageStateChangeTraceData(value, 2473, 2407, "PLM_PackageStateChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2473, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMPSMWakeCounterChangeTraceData> PLM_PSM_WakeCounterChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPSMWakeCounterChangeTraceData(value, 2474, 2408, "PLM_PSM_WakeCounterChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2474, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyEvaluatingMemoryTraceData> PLM_MemoryPolicy_EvaluatingMemory
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyEvaluatingMemoryTraceData(value, 2475, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2475, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyEmptyCandidateTraceData> PLM_MemoryPolicy_EmptyCandidate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyEmptyCandidateTraceData(value, 2476, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2476, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyTerminationExemptionTraceData> PLM_MemoryPolicy_TerminationExemption
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyTerminationExemptionTraceData(value, 2477, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2477, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyTerminationCandidateTraceData> PLM_MemoryPolicy_TerminationCandidate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyTerminationCandidateTraceData(value, 2478, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2478, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyTerminationTraceData> PLM_MemoryPolicy_Termination
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyTerminationTraceData(value, 2479, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2479, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMTerminateAppAPIStartTraceData> PLM_TerminateApp_API_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMTerminateAppAPIStartTraceData(value, 2480, 2410, "PLM_TerminateApp_API", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2480, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMTerminateAppAPIStopTraceData> PLM_TerminateApp_API_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMTerminateAppAPIStopTraceData(value, 2481, 2410, "PLM_TerminateApp_API", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2481, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMTerminateAppStartTraceData> PLM_TerminateApp_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMTerminateAppStartTraceData(value, 2482, 2411, "PLM_TerminateApp", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2482, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMTerminateAppStopTraceData> PLM_TerminateApp_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMTerminateAppStopTraceData(value, 2483, 2411, "PLM_TerminateApp", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2483, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMPackageOperationTraceData> PLM_GlobalApplicationChannel_SuspendTimeout
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationTraceData(value, 2484, 2400, "PerfTrack_PLM_SuspendPackage", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2484, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMPackageOperationTraceData> PLM_GlobalApplicationChannel_MemoryPolicy_Termination
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMPackageOperationTraceData(value, 2485, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2485, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMApplicationOperationTraceData> PLM_GlobalApplicationChannel_LaunchGraceExpired
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMApplicationOperationTraceData(value, 2486, 2414, "PLM_ApplicationLaunch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2486, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMSessionIDTraceData> PLM_MemoryPolicy_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMSessionIDTraceData(value, 2487, 2409, "PLM_MemoryPolicy", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2487, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TPLMSessionIDTraceData> PLM_MemoryPolicy_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMSessionIDTraceData(value, 2488, 2409, "PLM_MemoryPolicy", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2488, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyRundownTraceData> PLM_MemoryPolicy_Rundown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyRundownTraceData(value, 2489, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2489, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TPLMMemoryPolicyExecutionReasonTraceData> PLM_MemoryPolicy_ExecutionReason
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TPLMMemoryPolicyExecutionReasonTraceData(value, 2490, 2409, "PLM_MemoryPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2490, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> UserTile_Flyout_Launch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2500, 2500, "UserTile_Flyout_Launch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2500, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> UserTile_Flyout_Launch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2501, 2500, "UserTile_Flyout_Launch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2501, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> PerfTrack_UserSwitching_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2504, 2504, "PerfTrack_UserSwitching", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2504, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLaunch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2601, 2600, "Settings_SettingsLaunch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2601, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLaunch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2602, 2600, "Settings_SettingsLaunch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2602, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadSysElements_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2604, 2603, "Settings_SettingsLoadSysElements", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2604, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadSysElements_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2605, 2603, "Settings_SettingsLoadSysElements", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2605, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadAppWidgetsBG_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2607, 2606, "Settings_SettingsLoadAppWidgetsBG", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2607, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SettingsFlowReturnResultTraceData> Settings_SettingsLoadAppWidgetsBG_FailureInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowReturnResultTraceData(value, 2608, 2606, "Settings_SettingsLoadAppWidgetsBG", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2608, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadAppWidgetsBG_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2609, 2606, "Settings_SettingsLoadAppWidgetsBG", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2609, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadAppElements_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2611, 2610, "Settings_SettingsLoadAppElements", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2611, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLoadAppElements_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2612, 2610, "Settings_SettingsLoadAppElements", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2612, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLaunch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2614, 2613, "Settings_PermissionsLaunch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2614, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLaunch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2615, 2613, "Settings_PermissionsLaunch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2615, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLoadItems_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2617, 2616, "Settings_PermissionsLoadItems", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2617, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SettingsFlowReturnResultTraceData> Settings_PermissionsLoadItems_FailureInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowReturnResultTraceData(value, 2618, 2616, "Settings_PermissionsLoadItems", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2618, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLoadItems_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2619, 2616, "Settings_PermissionsLoadItems", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2619, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_InputInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2620, 2619, "Settings_Widgets_InputInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2620, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_InputInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2621, 2619, "Settings_Widgets_InputInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2621, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_InputCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2622, 2621, "Settings_Widgets_InputCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2622, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_InputCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2623, 2621, "Settings_Widgets_InputCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2623, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsFlow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2625, 2624, "Settings_SettingsFlow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2625, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsFlow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2626, 2624, "Settings_SettingsFlow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2626, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_FactoryLoadWidgetsBG_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2628, 2627, "Settings_FactoryLoadWidgetsBG", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2628, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_FactoryLoadWidgetsBG_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2629, 2627, "Settings_FactoryLoadWidgetsBG", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2629, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLifetime_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2631, 2630, "Settings_SettingsLifetime", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2631, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_SettingsLifetime_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2632, 2630, "Settings_SettingsLifetime", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2632, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLifetime_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2634, 2633, "Settings_PermissionsLifetime", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2634, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_PermissionsLifetime_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2635, 2633, "Settings_PermissionsLifetime", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2635, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NetworkInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2637, 2636, "Settings_Widgets_NetworkInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2637, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NetworkInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2638, 2636, "Settings_Widgets_NetworkInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2638, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NetworkCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2640, 2639, "Settings_Widgets_NetworkCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2640, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NetworkCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2641, 2639, "Settings_Widgets_NetworkCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2641, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NotificationsInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2643, 2642, "Settings_Widgets_NotificationsInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2643, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NotificationsInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2644, 2642, "Settings_Widgets_NotificationsInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2644, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NotificationsCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2646, 2645, "Settings_Widgets_NotificationsCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2646, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_NotificationsCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2647, 2645, "Settings_Widgets_NotificationsCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2647, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_ShutdownInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2649, 2648, "Settings_Widgets_ShutdownInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2649, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_ShutdownInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2650, 2648, "Settings_Widgets_ShutdownInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2650, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_ShutdownCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2652, 2651, "Settings_Widgets_ShutdownCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2652, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_ShutdownCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2653, 2651, "Settings_Widgets_ShutdownCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2653, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_VolumeInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2655, 2654, "Settings_Widgets_VolumeInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2655, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_VolumeInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2656, 2654, "Settings_Widgets_VolumeInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2656, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_VolumeCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2658, 2657, "Settings_Widgets_VolumeCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2658, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_VolumeCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2659, 2657, "Settings_Widgets_VolumeCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2659, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_BrightnessInit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2661, 2660, "Settings_Widgets_BrightnessInit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2661, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_BrightnessInit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2662, 2660, "Settings_Widgets_BrightnessInit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2662, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_BrightnessCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2664, 2663, "Settings_Widgets_BrightnessCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2664, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Widgets_BrightnessCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2665, 2663, "Settings_Widgets_BrightnessCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2665, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_HotkeyInvoke_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2667, 2666, "Settings_HotkeyInvoke", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2667, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_CharmInvoke_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2669, 2668, "Settings_CharmInvoke", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2669, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SettingsFlowCommandIdTraceData> Settings_GetAppCommands_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowCommandIdTraceData(value, 2671, 2670, "Settings_GetAppCommands", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2671, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_SystemSettings_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2673, 2672, "Settings_Launch_SystemSettings", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2673, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_SystemSettings_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2674, 2672, "Settings_Launch_SystemSettings", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2674, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_ApplicationSettings_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2676, 2675, "Settings_Launch_ApplicationSettings", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2676, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_ApplicationSettings_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2677, 2675, "Settings_Launch_ApplicationSettings", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2677, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SettingsFlowCommandIdTraceData> Settings_Launch_SettingsCommand_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowCommandIdTraceData(value, 2679, 2678, "Settings_Launch_SettingsCommand", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2679, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SettingsFlowReturnResultTraceData> Settings_Launch_SettingsCommand_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowReturnResultTraceData(value, 2680, 2678, "Settings_Launch_SettingsCommand", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2680, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_Permissions_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2682, 2681, "Settings_Launch_Permissions", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2682, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_Permissions_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2683, 2681, "Settings_Launch_Permissions", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2683, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_RateAndReview_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2685, 2684, "Settings_Launch_RateAndReview", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2685, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Launch_RateAndReview_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2686, 2684, "Settings_Launch_RateAndReview", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2686, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Flow_Broker_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2688, 2687, "Settings_Flow_Broker_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2688, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Settings_Flow_Broker_Show_Invoke
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2689, 2687, "Settings_Flow_Broker_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2689, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SettingsFlowReturnResultTraceData> Settings_Flow_Broker_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SettingsFlowReturnResultTraceData(value, 2690, 2687, "Settings_Flow_Broker_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2690, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<FlyoutAnimationStartTraceData> FlyoutAnimation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutAnimationStartTraceData(value, 2701, 2700, "FlyoutAnimation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2701, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutAnimation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2702, 2700, "FlyoutAnimation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2702, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutStartup_BaseCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2711, 2710, "FlyoutStartup", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2711, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<FlyoutStartupIsImmersiveTraceData> FlyoutStartup_IsImmersive
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutStartupIsImmersiveTraceData(value, 2712, 2710, "FlyoutStartup", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2712, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutStartup_BaseCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2713, 2710, "FlyoutStartup", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2713, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutStartup_DisplayCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2715, 2714, "FlyoutDisplayScenario", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2715, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutStartup_DisplayCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2716, 2714, "FlyoutDisplayScenario", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2716, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutDismiss_DismissCalled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2722, 2720, "FlyoutDismiss", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2722, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutDismiss_Close_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2723, 2720, "FlyoutDismiss", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2723, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<FlyoutWindowInfoTraceData> FlyoutDismiss_DestroySent
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutWindowInfoTraceData(value, 2724, 2720, "FlyoutDismiss", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2724, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutDismiss_Close_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2725, 2720, "FlyoutDismiss", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2725, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<FlyoutWindowInfoTraceData> FlyoutReflow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutWindowInfoTraceData(value, 2731, 2730, "FlyoutReflow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2731, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutReflow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2732, 2730, "FlyoutReflow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2732, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<FlyoutWindowInfoTraceData> FlyoutReflow_IHMApplied
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutWindowInfoTraceData(value, 2733, 2730, "FlyoutReflow", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2733, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<FlyoutWindowSideTraceData> FlyoutPositioning_FinalSide
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutWindowSideTraceData(value, 2781, 2780, "FlyoutPositioning", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2781, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<FlyoutWindowRectTraceData> FlyoutPositioning_FinalRect
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutWindowRectTraceData(value, 2782, 2780, "FlyoutPositioning", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2782, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<FlyoutHRESULTTraceData> FlyoutGeneral_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FlyoutHRESULTTraceData(value, 2791, 2790, "FlyoutGeneral", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2791, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> FlyoutGeneral_DisplayChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2792, 2790, "FlyoutGeneral", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2792, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUITemplateMarkupErrorTraceData> TileUI_Template_Parse_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUITemplateMarkupErrorTraceData(value, 2801, 2801, "TileUI_Bind_Notification_To_Template", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2801, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUIUnknownTemplateErrorTraceData> TileUI_Unknown_Template_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIUnknownTemplateErrorTraceData(value, 2802, 2801, "TileUI_Bind_Notification_To_Template", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2802, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUIContentBindErrorTraceData> TileUI_Unknown_Content_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIContentBindErrorTraceData(value, 2803, 2801, "TileUI_Bind_Notification_To_Template", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2803, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_DesktopKeystoneColorComputation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2804, 2802, "TileUI_DesktopKeystoneColorComputation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2804, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_DesktopKeystoneColorComputation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2805, 2802, "TileUI_DesktopKeystoneColorComputation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2805, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileUITileActivatedEventTraceData> TileUI_TileActivatedEvent_Fired
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUITileActivatedEventTraceData(value, 2806, 2803, "TileUI_TileActivatedEvent_Fired", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2806, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUITileRearrangeEventTraceData> TileUI_TileRearrangeEvent_Fired
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUITileRearrangeEventTraceData(value, 2807, 2804, "TileUI_TileRearrangeEvent_Fired", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2807, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_AutoTickleEvent_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2808, 2805, "TileUI_AutoTickleHandler", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2808, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_AutoTickleEvent_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2809, 2805, "TileUI_AutoTickleHandler", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2809, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileUIAutoTickleTimerTraceData> TileUI_AutoTickleTimer_Activated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIAutoTickleTimerTraceData(value, 2810, 2805, "TileUI_AutoTickleHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2810, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_AutoTickleTimer_Canceled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2811, 2805, "TileUI_AutoTickleHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2811, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_TileExpiry_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2812, 2806, "TileUI_ExpiryHandler", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2812, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_TileExpiry_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2813, 2806, "TileUI_ExpiryHandler", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2813, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileUIExpiryTimerTraceData> TileUI_TileExpiry_Activated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIExpiryTimerTraceData(value, 2814, 2806, "TileUI_ExpiryHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2814, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_TileExpiry_Canceled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2815, 2806, "TileUI_ExpiryHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2815, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUIChangeNotificationAnimationTraceData> TileUI_Change_Notification_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIChangeNotificationAnimationTraceData(value, 2816, 2807, "TileUI_Change_Notification", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2816, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TileUIChangeNotificationAnimationTraceData> TileUI_Change_Notification_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIChangeNotificationAnimationTraceData(value, 2817, 2807, "TileUI_Change_Notification", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2817, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> AppSpaceLoadTaskSuccess
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2818, 2808, "AppSpaceLoadTaskSuccess", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2818, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<RegisterTileTraceData> RegisterTile
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new RegisterTileTraceData(value, 2819, 2809, "RegisterTile", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2819, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotifiedTraceData> TileNotified
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotifiedTraceData(value, 2820, 2810, "TileNotified", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2820, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUIChangeNotificationAnimationTraceData> TileUI_Change_Notification_Animation_AutoTickle_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIChangeNotificationAnimationTraceData(value, 2821, 2811, "TileUI_Change_Notification_AutoTickle", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2821, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TileUIChangeNotificationAnimationTraceData> TileUI_Change_Notification_Animation_AutoTickle_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIChangeNotificationAnimationTraceData(value, 2822, 2811, "TileUI_Change_Notification_AutoTickle", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2822, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_WrongFormat
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2823, 2823, "Tile_ImageLoad_WrongFormat", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2823, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_BadSize
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2824, 2824, "Tile_ImageLoad_BadSize", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2824, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_BadPath
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2825, 2825, "Tile_ImageLoad_BadPath", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2825, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_IncorrectDPIOrTheme
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2826, 2826, "Tile_ImageLoad_IncorrectDPIOrTheme", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2826, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_BadProtocol
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2827, 2827, "Tile_ImageLoad_BadProtocol", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2827, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> TileUI_VisibleNotificationExpired
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2828, 2828, "TileUI_VisibleNotificationExpired", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2828, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_ImageLoad_Success
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2829, 2829, "Tile_ImageLoad_Success", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2829, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_RetryRealization_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2830, 2812, "TileUI_RetryRealizationHandler", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2830, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_RetryRealization_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2831, 2812, "TileUI_RetryRealizationHandler", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2831, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileUIRetryRealizationTimerTraceData> TileUI_RetryRealization_Activated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIRetryRealizationTimerTraceData(value, 2832, 2812, "TileUI_RetryRealizationHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2832, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_RetryRealization_Canceled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2833, 2812, "TileUI_RetryRealizationHandler", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2833, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileUIAutoPeekAnimationTraceData> TileUI_AutoPeek_Animation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIAutoPeekAnimationTraceData(value, 2834, 2813, "TileUI_AutoPeek_Animation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2834, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TileUIAutoPeekAnimationTraceData> TileUI_AutoPeek_Animation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileUIAutoPeekAnimationTraceData(value, 2835, 2813, "TileUI_AutoPeek_Animation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2835, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TileUI_CrossSlide_InitialTileMove
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2836, 2814, "TileUI_CrossSlide", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2836, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_OnAppSpaceLoadSuccess
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2837, 2837, "Tile_OnAppSpaceLoadSuccess", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2837, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2EFailureTemplateTraceData> Tile_OnAppSpaceLoadFailure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2EFailureTemplateTraceData(value, 2838, 2838, "Tile_OnAppSpaceLoadFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2838, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileNotificationE2ETemplateTraceData> Tile_MarkNotificationIDAsKnownBad
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileNotificationE2ETemplateTraceData(value, 2839, 2839, "Tile_MarkNotificationIDAsKnownBad", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2839, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_CreateView_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2901, 2900, "TDBN_CreateView", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2901, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_CreateView_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2902, 2900, "TDBN_CreateView", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2902, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyItem_AddModify_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2904, 2903, "TDBN_NotifyItem_AddModify", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2904, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyItem_AddModify_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2905, 2903, "TDBN_NotifyItem_AddModify", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2905, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Reposition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2907, 2906, "TDBN_Reposition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2907, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Reposition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2908, 2906, "TDBN_Reposition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2908, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyItem_Delete_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2910, 2909, "TDBN_NotifyItem_Delete", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2910, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyItem_Delete_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2911, 2909, "TDBN_NotifyItem_Delete", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2911, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyHandle_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2913, 2912, "TDBN_NotifyHandle", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2913, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_NotifyHandle_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2914, 2912, "TDBN_NotifyHandle", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2914, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_TimeDate_Update_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2916, 2915, "TDBN_TimeDate_Update", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2916, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_TimeDate_Update_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2917, 2915, "TDBN_TimeDate_Update", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2917, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Shutdown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2919, 2918, "TDBN_Shutdown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2919, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Shutdown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2920, 2918, "TDBN_Shutdown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2920, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_AudioFlyout_Shutdown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2922, 2921, "TDBN_AudioFlyout_Shutdown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2922, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_AudioFlyout_Shutdown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2923, 2921, "TDBN_AudioFlyout_Shutdown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2923, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_AudioFlyout_Display_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2924, 2922, "TDBN_AudioFlyout_Display", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2924, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2925, 2924, "TDBN_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2925, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2926, 2924, "TDBN_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2926, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Hide_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2928, 2927, "TDBN_Hide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2928, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_Hide_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2929, 2927, "TDBN_Hide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2929, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> TDBN_AudioFlyout_Display_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2930, 2922, "TDBN_AudioFlyout_Display", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2930, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_Register_Licensing_Event_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3000, 3000, "Watermark_Register_Licensing_Event_Error", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3000, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_Window_Creation_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3001, 3001, "Watermark_Window_Creation_Error", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3001, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_GenuineImage_Load_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3002, 3002, "Watermark_GenuineImage_Load_Error", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3002, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_GenuineImage_Blend_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3003, 3003, "Watermark_GenuineImage_Blend_Error", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3003, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_Render_Error
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3004, 3004, "Watermark_Render_Error", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3004, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<WatermarkErrorTraceData> Watermark_Failed_To_Get_Genuine_Status
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WatermarkErrorTraceData(value, 3005, 3005, "Watermark_Failed_To_Get_Genuine_Status", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3005, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveAutoPlay_DeviceAutoPlay_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3101, 3101, "ImmersiveAutoPlay_DeviceAutoPlay", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3101, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveAutoPlay_DeviceAutoPlay_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3102, 3101, "ImmersiveAutoPlay_DeviceAutoPlay", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3102, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DeviceIdentifiersTemplateTraceData> AutoPlay_Prompt_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceIdentifiersTemplateTraceData(value, 3103, 3103, "AutoPlay_Prompt_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3103, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Prompt_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3104, 3103, "AutoPlay_Prompt_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3104, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_DialogThread_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3105, 3105, "AutoPlay_DialogThread", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3105, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_DialogThread_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3106, 3105, "AutoPlay_DialogThread", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3106, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_DialogNoContentThread_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3107, 3107, "AutoPlay_DialogNoContentThread", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3107, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_DialogNoContentThread_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3108, 3107, "AutoPlay_DialogNoContentThread", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3108, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Prompt_Visible_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3109, 3109, "AutoPlay_Prompt_Visible", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3109, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Prompt_Visible_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3110, 3109, "AutoPlay_Prompt_Visible", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3110, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Broker_Device_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3111, 3111, "AutoPlay_Broker_Device", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3111, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Broker_Device_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3112, 3111, "AutoPlay_Broker_Device", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3112, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Calculate_Response_Time_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3113, 3113, "AutoPlay_Calculate_Response_Time", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3113, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AutoPlay_Calculate_Response_Time_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3114, 3113, "AutoPlay_Calculate_Response_Time", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3114, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Volume_FirstConnect_ToUI
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3150, 3150, "AutoPlay_Volume_FirstConnect_ToUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3150, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Volume_FirstConnect_ToDefaultLaunch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3151, 3151, "AutoPlay_Volume_FirstConnect_ToDefaultLaunch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3151, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Volume_NthConnect_ToUI
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3152, 3152, "AutoPlay_Volume_NthConnect_ToUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3152, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Volume_NthConnect_ToDefaultLaunch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3153, 3153, "AutoPlay_Volume_NthConnect_ToDefaultLaunch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3153, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Device_FirstConnect_ToUI
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3154, 3154, "AutoPlay_Device_FirstConnect_ToUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3154, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Device_FirstConnect_ToDefaultLaunch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3155, 3155, "AutoPlay_Device_FirstConnect_ToDefaultLaunch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3155, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Device_NthConnect_ToUI
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3156, 3156, "AutoPlay_Device_NthConnect_ToUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3156, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<AutoPlayLaunchInfoTraceData> AutoPlay_Device_NthConnect_ToDefaultLaunch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AutoPlayLaunchInfoTraceData(value, 3157, 3157, "AutoPlay_Device_NthConnect_ToDefaultLaunch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3157, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EdgeUiInputTraceData> EdgeUi_Invoke_Continuous_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EdgeUiInputTraceData(value, 3200, 3200, "EdgeUi_Invoke_Continuous_Start", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3200, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> EdgeUi_Invoke_Continuous_Commit
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3201, 3201, "EdgeUi_Invoke_Continuous_Commit", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3201, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> EdgeUi_Invoke_Continuous_Cancel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3202, 3202, "EdgeUi_Invoke_Continuous_Cancel", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3202, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EdgeUiInputTraceData> EdgeUi_Invoke_Discrete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EdgeUiInputTraceData(value, 3203, 3203, "EdgeUi_Invoke_Discrete", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3203, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EdgeUiInputTraceData> EdgeUi_Invoke_Continuous_ExtendedStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EdgeUiInputTraceData(value, 3204, 3204, "EdgeUi_Invoke_Continuous_ExtendedStart", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3204, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EdgeUiInputTraceData> EdgeUi_Invoke_Mouse_HitSingleEdge
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EdgeUiInputTraceData(value, 3205, 3205, "EdgeUi_Invoke_Mouse_HitSingleEdge", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3205, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Create_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3300, 3300, "DockedDesktop_Create", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3300, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Create_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3301, 3300, "DockedDesktop_Create", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3301, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_FullCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3302, 3302, "DockedDesktop_FullCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3302, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_FullCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3303, 3302, "DockedDesktop_FullCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3303, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Dock_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3304, 3304, "DockedDesktop_Dock", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3304, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Dock_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3305, 3304, "DockedDesktop_Dock", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3305, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Undock_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3306, 3306, "DockedDesktop_Undock", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3306, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Undock_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3307, 3306, "DockedDesktop_Undock", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3307, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<WindowHandleTraceData> DockedDesktop_CreateButton_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WindowHandleTraceData(value, 3308, 3308, "DockedDesktop_CreateButton", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3308, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<WindowHandleTraceData> DockedDesktop_CreateButton_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WindowHandleTraceData(value, 3309, 3308, "DockedDesktop_CreateButton", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3309, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<WindowHandleTraceData> DockedDesktop_DestroyButton_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WindowHandleTraceData(value, 3310, 3310, "DockedDesktop_DestroyButton", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3310, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<WindowHandleTraceData> DockedDesktop_DestroyButton_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WindowHandleTraceData(value, 3311, 3310, "DockedDesktop_DestroyButton", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3311, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Refresh_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3312, 3312, "DockedDesktop_Refresh", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3312, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_Refresh_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3313, 3312, "DockedDesktop_Refresh", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3313, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DockedDesktopNeedyWindowTraceData> DockedDesktop_HighlightNeedy
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DockedDesktopNeedyWindowTraceData(value, 3314, 3314, "DockedDesktop_HighlightNeedy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3314, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedDesktop_SnapNoCreate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3315, 3315, "DockedDesktop_SnapNoCreate", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3315, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_FileLaunch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4001, 4000, "AssociationLaunch_FileLaunch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_FileLaunch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4002, 4000, "AssociationLaunch_FileLaunch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_ProtocolLaunch_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4004, 4003, "AssociationLaunch_ProtocolLaunch", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4004, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_ProtocolLaunch_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4005, 4003, "AssociationLaunch_ProtocolLaunch", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4005, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_ServerInitialization_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4007, 4006, "AssociationLaunch_ServerInitialization", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4007, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_ServerInitialization_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4008, 4006, "AssociationLaunch_ServerInitialization", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4008, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_FileLaunch_OpenWith_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4011, 4011, "AssociationLaunch_FileLaunch_OpenWith", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> AssociationLaunch_FileLaunch_OpenWith_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 4012, 4011, "AssociationLaunch_FileLaunch_OpenWith", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AssociationLaunch_ProtocolLaunch_OpenWith_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4013, 4013, "AssociationLaunch_ProtocolLaunch_OpenWith", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4013, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> AssociationLaunch_ProtocolLaunch_OpenWith_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 4014, 4013, "AssociationLaunch_ProtocolLaunch_OpenWith", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4014, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TickleEntryTraceData> Tickle_Cache_EntryAdded_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryTraceData(value, 4200, 4200, "Tickle_Cache_EntryAdded", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4200, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TickleEntryWithResultTraceData> Tickle_Cache_EntryAdded_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryWithResultTraceData(value, 4201, 4200, "Tickle_Cache_EntryAdded", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4201, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TickleEntryAndIndexTraceData> Tickle_Cache_IndexExpired
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryAndIndexTraceData(value, 4206, 4206, "Tickle_Cache_IndexExpired", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4206, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TickleEntryTraceData> Tickle_Cache_PaintFromCache_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryTraceData(value, 4208, 4208, "Tickle_Cache_PaintFromCache", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4208, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TickleEntryWithResultTraceData> Tickle_Cache_PaintFromCache_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryWithResultTraceData(value, 4209, 4208, "Tickle_Cache_PaintFromCache", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4209, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TickleEntryIDTraceData> Tickle_Cache_SetFreezeAutoTickle_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryIDTraceData(value, 4210, 4210, "Tickle_Cache_SetFreezeAutoTickle", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4210, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TickleEntryIDWithResultTraceData> Tickle_Cache_SetFreezeAutoTickle_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryIDWithResultTraceData(value, 4211, 4210, "Tickle_Cache_SetFreezeAutoTickle", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4211, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileDataProviderUpdateTickleTileTraceData> TileDataProvider_UpdateTickleTile
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileDataProviderUpdateTickleTileTraceData(value, 4212, 4212, "TileDataProvider_UpdateTickleTile", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4212, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TickleEntryTraceData> Tickle_Cache_CopyToCache_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryTraceData(value, 4214, 4214, "Tickle_Cache_CopyToCache", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4214, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TickleEntryAndIDAndIndexTraceData> Tickle_Cache_CopyToCache_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TickleEntryAndIDAndIndexTraceData(value, 4215, 4214, "Tickle_Cache_CopyToCache", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4215, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_Added_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4300, 4300, "ImmersiveMonitorAdded", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4300, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_Added_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4301, 4300, "ImmersiveMonitorAdded", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4301, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_Added_External_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4302, 4300, "ImmersiveMonitorAdded", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4302, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_Added_External_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4303, 4300, "ImmersiveMonitorAdded", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4303, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_HandleDisplayChange_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4312, 4312, "ImmersiveMonitorHandleDisplayChange", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4312, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_HandleDisplayChange_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4313, 4312, "ImmersiveMonitorHandleDisplayChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4313, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_HandleDisplayChange_External_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4314, 4312, "ImmersiveMonitorHandleDisplayChange", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4314, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_HandleDisplayChange_External_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4315, 4312, "ImmersiveMonitorHandleDisplayChange", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4315, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_ConnectObject_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4316, 4316, "ImmersiveMonitorConnectObject", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4316, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<MonitorIdentityTraceData> Immersive_Monitor_ConnectObject_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MonitorIdentityTraceData(value, 4317, 4316, "ImmersiveMonitorConnectObject", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4317, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_ReconcileMonitors_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4318, 4318, "ImmersiveMonitorReconcileMonitors", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4318, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_ReconcileMonitors_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4319, 4318, "ImmersiveMonitorReconcileMonitors", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4319, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<NoMonitorIdentityTraceData> Immersive_Monitor_ReconcileMonitors_NoIdentity
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NoMonitorIdentityTraceData(value, 4320, 4318, "ImmersiveMonitorReconcileMonitors", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4320, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_SetImmersiveMonitor_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4321, 4321, "ImmersiveMonitorSet", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4321, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_SetImmersiveMonitor_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4322, 4321, "ImmersiveMonitorSet", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4322, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_MoveImmersiveMonitor_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4323, 4323, "ImmersiveMonitorMove", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4323, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Immersive_Monitor_MoveImmersiveMonitor_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4324, 4323, "ImmersiveMonitorMove", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4324, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SemanticZoomChangeTemplateTraceData> Semantic_Zoom_Change_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SemanticZoomChangeTemplateTraceData(value, 4500, 4500, "Semantic_Zoom_Change", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4500, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Semantic_Zoom_Change_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4501, 4500, "Semantic_Zoom_Change", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4501, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ZoomFactorChangeTemplateTraceData> Zoom_Factor_Set
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ZoomFactorChangeTemplateTraceData(value, 4502, 4502, "Zoom_Factor_Set", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4502, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SemanticSwapTemplateTraceData> PerfTrack_Semantic_Swap_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SemanticSwapTemplateTraceData(value, 4503, 4503, "PerfTrack_Semantic_Swap_Start", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4503, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SemanticSwapTemplateTraceData> PerfTrack_Semantic_Swap_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SemanticSwapTemplateTraceData(value, 4504, 4504, "PerfTrack_Semantic_Swap_Stop", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4504, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> StartView_Cache_GetLogoBitmap_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4612, 4612, "StartView_Cache_GetLogoBitmap", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4612, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDValidHRESULTTraceData> StartView_Cache_GetLogoBitmap_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDValidHRESULTTraceData(value, 4613, 4612, "StartView_Cache_GetLogoBitmap", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4613, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> StartView_Cache_CopyToCache_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4614, 4614, "StartView_Cache_CopyToCache", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4614, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDCacheIDHRESULTTraceData> StartView_Cache_CopyToCache_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDCacheIDHRESULTTraceData(value, 4615, 4614, "StartView_Cache_CopyToCache", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4615, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> StartView_Cache_CopyBetweenCaches_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4616, 4616, "StartView_Cache_CopyBetweenCaches", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4616, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDSrcIDDestIDTraceData> StartView_Cache_CopyBetweenCaches_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDSrcIDDestIDTraceData(value, 4617, 4616, "StartView_Cache_CopyBetweenCaches", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4617, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> StartView_Cache_CopyToCaches_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4618, 4618, "StartView_Cache_CopyToCaches", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4618, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDHRESULTTraceData> StartView_Cache_CopyToCaches_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDHRESULTTraceData(value, 4619, 4618, "StartView_Cache_CopyToCaches", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4619, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> StartView_Cache_AddEntry_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4620, 4620, "StartView_Cache_AddEntry", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4620, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDCacheIDHRESULTTraceData> StartView_Cache_AddEntry_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDCacheIDHRESULTTraceData(value, 4621, 4620, "StartView_Cache_AddEntry", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4621, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> StartView_Cache_GetEntryID_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4622, 4622, "StartView_Cache_GetEntryID", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4622, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDCacheIDHRESULTTraceData> StartView_Cache_GetEntryID_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDCacheIDHRESULTTraceData(value, 4623, 4622, "StartView_Cache_GetEntryID", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4623, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> StartView_Cache_UpdateDataCRC_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4624, 4624, "StartView_Cache_UpdateDataCRC", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4624, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData> StartView_Cache_UpdateDataCRC_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData(value, 4625, 4624, "StartView_Cache_UpdateDataCRC", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4625, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> StartView_Cache_ResetData_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4626, 4626, "StartView_Cache_ResetData", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4626, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTTraceData> StartView_Cache_ResetData_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTTraceData(value, 4627, 4626, "StartView_Cache_ResetData", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4627, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> StartView_Cache_GetBitmap_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4628, 4628, "StartView_Cache_GetBitmap", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4628, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDValidHRESULTTraceData> StartView_Cache_GetBitmap_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDValidHRESULTTraceData(value, 4629, 4628, "StartView_Cache_GetBitmap", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4629, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheFilenameTraceData> Tiles_Cache_CreateDataFile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheFilenameTraceData(value, 4630, 4630, "Tiles_Cache_CreateDataFile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4630, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tiles_Cache_CreateDataFile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4631, 4630, "Tiles_Cache_CreateDataFile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4631, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheFilenameTraceData> Tiles_Cache_OpenDataFile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheFilenameTraceData(value, 4632, 4632, "Tiles_Cache_OpenDataFile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4632, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tiles_Cache_OpenDataFile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4633, 4632, "Tiles_Cache_OpenDataFile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4633, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> Tiles_Cache_TestDataCRC_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4634, 4634, "Tiles_Cache_TestDataCRC", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4634, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTTraceData> Tiles_Cache_TestDataCRC_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTTraceData(value, 4635, 4634, "Tiles_Cache_TestDataCRC", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4635, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheMaxHeaderCountTraceData> Tiles_Cache_HeaderFull_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheMaxHeaderCountTraceData(value, 4636, 4636, "Tiles_Cache_HeaderFull", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4636, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TilesCacheDiskFullTraceData> Tiles_Cache_DiskFull_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheDiskFullTraceData(value, 4637, 4637, "Tiles_Cache_DiskFull", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4637, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Tiles_Cache_ReorderTaskFired_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4638, 4638, "Tiles_Cache_ReorderTaskFired", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4638, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tiles_Cache_ReorderTaskFired_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4639, 4638, "Tiles_Cache_ReorderTaskFired", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4639, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Tiles_Cache_IdleTaskCreate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4640, 4640, "Tiles_Cache_IdleTaskCreate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4640, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tiles_Cache_IdleTaskCreate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4641, 4640, "Tiles_Cache_IdleTaskCreate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4641, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheEnableTraceData> Tiles_Cache_IdleTaskUpdate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheEnableTraceData(value, 4642, 4642, "Tiles_Cache_IdleTaskUpdate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4642, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tiles_Cache_IdleTaskUpdate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4643, 4642, "Tiles_Cache_IdleTaskUpdate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4643, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCachePreLoadCountTraceData> StartView_Cache_PreLoad_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCachePreLoadCountTraceData(value, 4644, 4644, "StartView_Cache_PreLoad", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4644, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> StartView_Cache_PreLoad_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4645, 4644, "StartView_Cache_PreLoad", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4645, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCachePreLoadCountTraceData> Tickle_Cache_PreLoad_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCachePreLoadCountTraceData(value, 4646, 4645, "Tickle_Cache_PreLoad", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4646, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Tickle_Cache_PreLoad_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4647, 4645, "Tickle_Cache_PreLoad", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4647, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> Logo_Cache_GetLogoBitmap_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4650, 4650, "Logo_Cache_GetLogoBitmap", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4650, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDValidHRESULTTraceData> Logo_Cache_GetLogoBitmap_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDValidHRESULTTraceData(value, 4651, 4650, "Logo_Cache_GetLogoBitmap", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4651, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> Logo_Cache_AddEntry_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4652, 4652, "Logo_Cache_AddEntry", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4652, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDCacheIDHRESULTTraceData> Logo_Cache_AddEntry_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDCacheIDHRESULTTraceData(value, 4653, 4652, "Logo_Cache_AddEntry", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4653, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheAppIDTraceData> Logo_Cache_GetEntryID_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDTraceData(value, 4654, 4654, "Logo_Cache_GetEntryID", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4654, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheAppIDCacheIDHRESULTTraceData> Logo_Cache_GetEntryID_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheAppIDCacheIDHRESULTTraceData(value, 4655, 4654, "Logo_Cache_GetEntryID", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4655, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> Logo_Cache_UpdateDataCRC_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4656, 4656, "Logo_Cache_UpdateDataCRC", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4656, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData> Logo_Cache_UpdateDataCRC_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData(value, 4657, 4656, "Logo_Cache_UpdateDataCRC", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4657, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCachePreLoadCountTraceData> Logo_Cache_PreLoad_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCachePreLoadCountTraceData(value, 4658, 4658, "Logo_Cache_PreLoad", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4658, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheHRESULTTraceData> Logo_Cache_PreLoad_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheHRESULTTraceData(value, 4659, 4658, "Logo_Cache_PreLoad", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4659, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> Tiles_Cache_UpdateEntryCRC_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4660, 4660, "Tiles_Cache_UpdateEntryCRC", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4660, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData> Tiles_Cache_UpdateEntryCRC_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData(value, 4661, 4660, "Tiles_Cache_UpdateEntryCRC", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4661, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDTraceData> Tiles_Cache_TestEntryCRC_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDTraceData(value, 4662, 4662, "Tiles_Cache_TestEntryCRC", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4662, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTTraceData> Tiles_Cache_TestEntryCRC_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTTraceData(value, 4663, 4662, "Tiles_Cache_TestEntryCRC", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4663, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDValidWidthHeightTraceData> StartView_Cache_PaintToBitmap_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDValidWidthHeightTraceData(value, 4664, 4664, "StartView_Cache_PaintToBitmap", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4664, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDHRESULTTraceData> StartView_Cache_PaintToBitmap_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDHRESULTTraceData(value, 4665, 4664, "StartView_Cache_PaintToBitmap", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4665, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TilesCacheScaleAndTestModeTraceData> Tiles_Cache_Manager_CreateInstance_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheScaleAndTestModeTraceData(value, 4666, 4666, "Tiles_Cache_Manager_CreateInstance", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4666, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<TilesCacheScaleAndTestModeTraceData> Tiles_Cache_Manager_CreateInstance_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheScaleAndTestModeTraceData(value, 4667, 4666, "Tiles_Cache_Manager_CreateInstance", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4667, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileCacheCRCFailureTraceData> Tiles_Cache_Data_CRC_Failure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileCacheCRCFailureTraceData(value, 4668, 4668, "Tiles_Cache_Data_CRC_Failure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4668, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileCacheCRCFailureTraceData> Tiles_Cache_Entry_CRC_Failure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileCacheCRCFailureTraceData(value, 4669, 4669, "Tiles_Cache_Entry_CRC_Failure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4669, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDScaleFactorTraceData> StartView_Cache_UsePreviousCloudScaleFactor_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDScaleFactorTraceData(value, 4670, 4670, "StartView_Cache_UsePreviousCloudScaleFactor", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4670, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TilesCacheCacheIDIndexScaleFactorTraceData> Tickle_Cache_UsePreviousCloudScaleFactor_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TilesCacheCacheIDIndexScaleFactorTraceData(value, 4671, 4671, "Tickle_Cache_UsePreviousCloudScaleFactor", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4671, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<PerfTrackAppActivationTraceData> PerfTrack_AppActivation_Activate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackAppActivationTraceData(value, 5901, 5901, "PerfTrack_AppActivation_Activate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5901, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackAppActivationTraceData> PerfTrack_AppActivation_Activate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackAppActivationTraceData(value, 5902, 5901, "PerfTrack_AppActivation_Activate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5902, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppActivation_ActivateApplicationForContract_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5903, 5903, "AppActivation_ActivateApplicationForContract", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5903, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppActivation_ActivateApplicationForContract_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5904, 5903, "AppActivation_ActivateApplicationForContract", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5904, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppActivation_ActivateApplicationForContractByAppID_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5905, 5905, "AppActivation_ActivateApplicationForContractByAppID", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5905, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppActivation_ActivateApplicationForContractByAppID_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5906, 5905, "AppActivation_ActivateApplicationForContractByAppID", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5906, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ActivationOptionsTemplateTraceData> AppActivation_ActivateExtensionForContract_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationOptionsTemplateTraceData(value, 5907, 5907, "AppActivation_ActivateExtensionForContract", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5907, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<ActivationStepResultTemplateTraceData> AppActivation_ActivateExtensionForContract_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationStepResultTemplateTraceData(value, 5908, 5907, "AppActivation_ActivateExtensionForContract", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5908, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ActivationUnresponsiveAppTemplateTraceData> AppActivation_UnresponsiveApplicationCheck_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationUnresponsiveAppTemplateTraceData(value, 5909, 5909, "AppActivation_UnresponsiveApplicationCheck", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5909, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationStepResultTemplateTraceData> AppActivation_MinimumResolutionCheck_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationStepResultTemplateTraceData(value, 5911, 5911, "AppActivation_MinimumResolutionCheck", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5911, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationStepResultTemplateTraceData> AppActivation_CompositionEnabledCheck_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationStepResultTemplateTraceData(value, 5913, 5913, "AppActivation_CompositionEnabledCheck", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5913, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppActivation_RPCTimeoutSet_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5915, 5915, "AppActivation_RPCTimeoutSet", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5915, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationStepResultTemplateTraceData> AppActivation_SplashScreenFactoried_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationStepResultTemplateTraceData(value, 5917, 5917, "AppActivation_SplashScreenFactoried", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5917, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationPackageSettingsTemplateTraceData> AppActivation_PackageActivationSettings_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationPackageSettingsTemplateTraceData(value, 5919, 5919, "AppActivation_PackageActivationSettings", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5919, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationErrorDialogDisplayedTemplateTraceData> AppActivation_ErrorDialogDisplayed_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationErrorDialogDisplayedTemplateTraceData(value, 5921, 5921, "AppActivation_ErrorDialogDisplayed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5921, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogSuccess
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5950, 5950, "AppActivation_Log_Success", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5950, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogNotRegistered
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5951, 5951, "AppActivation_Log_NotRegistered", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5951, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogMultipleExtensions
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5952, 5952, "AppActivation_Log_MultipleExtensions", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5952, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppFamilyContractTemplateTraceData> AppActivationLogMultiplePackages
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppFamilyContractTemplateTraceData(value, 5953, 5953, "AppActivation_Log_MultiplePackages", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5953, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogUACDisabled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5954, 5954, "AppActivation_Log_UACDisabled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5954, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogFullAdmin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5955, 5955, "AppActivation_Log_FullAdmin", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5955, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogElevated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5956, 5956, "AppActivation_Log_Elevated", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5956, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogMonitorResolution
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5957, 5957, "AppActivation_Log_MonitorResolution", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5957, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogDWMDisabled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5958, 5958, "AppActivation_Log_DWMDisabled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5958, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogTimedOut
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5959, 5959, "AppActivation_Log_TimedOut", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5959, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogRemediationTemplateTraceData> AppActivationLogRemediation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogRemediationTemplateTraceData(value, 5960, 5960, "AppActivation_Log_Remediation", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5960, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogGenericFailureTemplateTraceData> AppActivationLogGenericFailure
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogGenericFailureTemplateTraceData(value, 5961, 5961, "AppActivation_Log_GenericFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5961, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogGenericFailureNoDetailsTemplateTraceData> AppActivationLogGenericFailureNoDetails
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogGenericFailureNoDetailsTemplateTraceData(value, 5962, 5961, "AppActivation_Log_GenericFailure", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5962, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogDisabledByPolicy
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5963, 5963, "AppActivation_Log_DisabledByPolicy", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5963, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ActivationLogAppContractTemplateTraceData> AppActivationLogAppManagerNotRunning
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ActivationLogAppContractTemplateTraceData(value, 5964, 5964, "AppActivation_Log_AppManagerNotRunning", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5964, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_WindowCreation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6010, 6010, "SearchPane_WindowCreation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6010, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_WindowCreation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6011, 6010, "SearchPane_WindowCreation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6011, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6012, 6012, "SearchPane_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6012, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6013, 6012, "SearchPane_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6013, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Hide_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6014, 6014, "SearchPane_Hide", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6014, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Hide_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6015, 6014, "SearchPane_Hide", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6015, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_QueryChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6020, 6020, "SearchPane_QueryChanged", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6020, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_SubmitSearch
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6021, 6021, "SearchPane_SubmitSearch", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6021, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_SearchButton_Pressed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6022, 6022, "SearchPane_SearchButton_Pressed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6022, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_ClearButton_Pressed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6023, 6023, "SearchPane_ClearButton_Pressed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6023, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_SearchBoxFocused
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6024, 6024, "SearchPane_SearchBoxFocused", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6024, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_ResultSuggestionInvoked
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6025, 6025, "SearchPane_ResultSuggestionInvoked", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6025, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_SystemScopeClicked
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6026, 6026, "SearchPane_SystemScopeClicked", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6026, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_SetSuggestions_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6050, 6050, "SearchPane_TypeAhead_SetSuggestions", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6050, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_SetSuggestions_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6051, 6050, "SearchPane_TypeAhead_SetSuggestions", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6051, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_AppendSuggestions_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6052, 6052, "SearchPane_TypeAhead_AppendSuggestions", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6052, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_AppendSuggestions_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6053, 6052, "SearchPane_TypeAhead_AppendSuggestions", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6053, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_AsyncImageDownload_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6054, 6054, "SearchPane_TypeAhead_AsyncImageDownload", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6054, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_TypeAhead_AsyncImageDownload_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6055, 6054, "SearchPane_TypeAhead_AsyncImageDownload", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6055, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_AppList_Populate_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6060, 6060, "SearchPane_AppList_Populate", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6060, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_AppList_Populate_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6061, 6060, "SearchPane_AppList_Populate", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6061, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_CurrentView_Provided
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6070, 6070, "SearchPane_Counts_CurrentView_Provided", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6070, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_TasksCancelled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6071, 6071, "SearchPane_Counts_TasksCancelled", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6071, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Displayed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6072, 6072, "SearchPane_Counts_Displayed", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6072, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Cleared
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6073, 6073, "SearchPane_Counts_Cleared", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6073, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Apps_Task_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6080, 6080, "SearchPane_Counts_Apps_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6080, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Apps_Task_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6081, 6080, "SearchPane_Counts_Apps_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6081, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Settings_Task_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6082, 6082, "SearchPane_Counts_Settings_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6082, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Settings_Task_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6083, 6082, "SearchPane_Counts_Settings_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6083, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Files_Task_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6084, 6084, "SearchPane_Counts_Files_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6084, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> SearchPane_Counts_Files_Task_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6085, 6084, "SearchPane_Counts_Files_Task", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6085, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_GetAvailableSize_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6200, 6200, "AccessibilityDocking_GetAvailableSize", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6200, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_GetAvailableSize_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6201, 6200, "AccessibilityDocking_GetAvailableSize", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6201, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_ReserveDockingSpace_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6202, 6201, "AccessibilityDocking_ReserveDockingSpace", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6202, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_ReserveDockingSpace_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6203, 6201, "AccessibilityDocking_ReserveDockingSpace", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6203, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_DockWindow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6204, 6202, "AccessibilityDocking_DockWindow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6204, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_DockWindow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6205, 6202, "AccessibilityDocking_DockWindow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6205, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_UndockWindow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6206, 6203, "AccessibilityDocking_UndockWindow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6206, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_UndockWindow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6207, 6203, "AccessibilityDocking_UndockWindow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6207, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_QueryWorkArea_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6208, 6204, "AccessibilityDocking_QueryWorkArea", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6208, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AccessibilityDocking_QueryWorkArea_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6209, 6204, "AccessibilityDocking_QueryWorkArea", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6209, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SplashScreen_Shown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6250, 6250, "SplashScreen_Shown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6250, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SplashScreen_Shown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6251, 6250, "SplashScreen_Shown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6251, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SplashScreenImageLoadTraceData> SplashScreen_ImageLoad_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SplashScreenImageLoadTraceData(value, 6252, 6252, "SplashScreen_ImageLoad", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6252, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SplashScreen_ImageLoad_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6253, 6252, "SplashScreen_ImageLoad", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6253, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> SplashScreen_Activation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6256, 6256, "SplashScreen_Activation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6256, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> SplashScreen_Activation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6257, 6256, "SplashScreen_Activation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6257, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PerfTrackSplashScreenStartTraceData> PerfTrack_SplashScreen_FirstResponse_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackSplashScreenStartTraceData(value, 6258, 6258, "PerfTrack_SplashScreen_FirstResponse", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6258, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackSplashScreenStopTraceData> PerfTrack_SplashScreen_FirstResponse_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackSplashScreenStopTraceData(value, 6259, 6258, "PerfTrack_SplashScreen_FirstResponse", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6259, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<PerfTrackSplashScreenStartTraceData> PerfTrack_SplashScreen_AppShown_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackSplashScreenStartTraceData(value, 6260, 6260, "PerfTrack_SplashScreen_AppShown", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6260, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<PerfTrackSplashScreenStopTraceData> PerfTrack_SplashScreen_AppShown_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfTrackSplashScreenStopTraceData(value, 6261, 6260, "PerfTrack_SplashScreen_AppShown", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6261, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SplashScreenContentTraceData> SplashScreen_LoadContent_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SplashScreenContentTraceData(value, 6262, 6262, "SplashScreen_LoadContent", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6262, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedAppManager_Layout_Complete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6301, 6300, "DockedAppManager_Layout", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6301, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedAppBar_VisibilityChange_Shown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6351, 6350, "DockedAppBar_VisibilityChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6351, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> DockedAppBar_VisibilityChange_Hidden
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6352, 6350, "DockedAppBar_VisibilityChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6352, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_PopulateElementWithExtensionTiles_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6400, 6400, "AppList_PopulateElementWithExtensionTiles", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6400, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_PopulateElementWithExtensionTiles_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6401, 6400, "AppList_PopulateElementWithExtensionTiles", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6401, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_CreateExtensionList_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6402, 6402, "AppList_CreateExtensionList", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6402, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_CreateExtensionList_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6403, 6402, "AppList_CreateExtensionList", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6403, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_GetFilteredAndSortedExtensionList_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6404, 6404, "AppList_GetFilteredAndSortedExtensionList", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6404, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_GetFilteredAndSortedExtensionList_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6405, 6404, "AppList_GetFilteredAndSortedExtensionList", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6405, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_PinItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6406, 6406, "AppList_PinItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6406, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_PinItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6407, 6406, "AppList_PinItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6407, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_UnpinItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6408, 6408, "AppList_UnpinItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6408, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_UnpinItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6409, 6408, "AppList_UnpinItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6409, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_HideItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6410, 6410, "AppList_HideItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6410, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_HideItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6411, 6410, "AppList_HideItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6411, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_UnhideItem_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6412, 6412, "AppList_UnhideItem", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6412, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppList_UnhideItem_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6413, 6412, "AppList_UnhideItem", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6413, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<NotificationsPermissionsSettingValueTraceData> Permissions_SettingChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NotificationsPermissionsSettingValueTraceData(value, 6501, 6500, "WPNSettings_PermissionsUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6501, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<NotificationsPermissionsSettingValueTraceData> Permissions_SettingEnabled
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NotificationsPermissionsSettingValueTraceData(value, 6502, 6500, "WPNSettings_PermissionsUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6502, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<NotificationsPermissionsSettingValueTraceData> Permissions_SettingSupported
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NotificationsPermissionsSettingValueTraceData(value, 6503, 6500, "WPNSettings_PermissionsUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6503, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<NotificationsCharmSettingValueTraceData> Charm_SettingChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NotificationsCharmSettingValueTraceData(value, 6505, 6504, "WPNSettings_CharmUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6505, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<NotificationsPermissionsSettingSyncTraceData> Permissions_SettingSync
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NotificationsPermissionsSettingSyncTraceData(value, 6506, 6500, "WPNSettings_PermissionsUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6506, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> Charm_InputReceived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6507, 6504, "WPNSettings_CharmUI", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6507, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ToastUserSession_LockScreenAttach
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6509, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6509, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenDisplay
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6510, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6510, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenCancel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6511, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6511, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenActivate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6512, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6512, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenDismiss
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6513, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6513, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenFocus
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6514, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6514, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenSelection
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6515, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6515, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastUserSession_LockScreenFrozen
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6516, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6516, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ToastUserSession_LockScreenDetach
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6517, 6508, "LockScreenToast_UserSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6517, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ToastLockScreenSession_ToastManagerCreated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6519, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6519, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ToastLockScreenSession_ToastManagerDestroyed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6520, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6520, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_DisplayToast
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6521, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6521, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_CancelToast
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6522, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6522, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_Frozen
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6523, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6523, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ToastLockScreenSession_OrientationChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6524, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6524, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_OnSelection
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6525, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6525, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_OnDismissed
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6526, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6526, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<ToastNotificationInfoTraceData> ToastLockScreenSession_OnFocus
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ToastNotificationInfoTraceData(value, 6527, 6518, "LockScreenToast_LockScreenSession", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6527, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SessionAndDeviceIdentifiersTraceData> ConnectCharm_Print_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SessionAndDeviceIdentifiersTraceData(value, 6601, 6600, "ConnectCharm_Print", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6601, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SessionAndDeviceIdentifiersTraceData> ConnectCharm_Print_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SessionAndDeviceIdentifiersTraceData(value, 6602, 6600, "ConnectCharm_Print", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6602, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DeviceCountTraceData> ConnectCharm_PrintTargetsEnum_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceCountTraceData(value, 6606, 6605, "ConnectCharm_PrintTargetsEnum", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6606, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<DeviceCountTraceData> ConnectCharm_PrintTargetsEnum_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceCountTraceData(value, 6607, 6605, "ConnectCharm_PrintTargetsEnum", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6607, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DeviceIdentifierTraceData> ConnectCharm_Play_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceIdentifierTraceData(value, 6611, 6610, "ConnectCharm_Play", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6611, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<DeviceIdentifierTraceData> ConnectCharm_Play_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceIdentifierTraceData(value, 6612, 6610, "ConnectCharm_Play", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6612, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<DeviceCountTraceData> ConnectCharm_PlayTargetsEnum_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceCountTraceData(value, 6616, 6615, "ConnectCharm_PlayTargetsEnum", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6616, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<DeviceCountTraceData> ConnectCharm_PlayTargetsEnum_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DeviceCountTraceData(value, 6617, 6615, "ConnectCharm_PlayTargetsEnum", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6617, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_Project_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6621, 6620, "ConnectCharm_Project", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6621, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_Project_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6622, 6620, "ConnectCharm_Project", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6622, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_ProximitySendDisplayUi_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6631, 6630, "ConnectCharm_ProximitySendDisplayUi", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6631, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_ProximitySendDisplayUi_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6632, 6630, "ConnectCharm_ProximitySendDisplayUi", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6632, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_ProximitySendSupportCheck_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6636, 6635, "ConnectCharm_ProximitySendSupportCheck", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6636, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ConnectCharm_ProximitySendSupportCheck_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6637, 6635, "ConnectCharm_ProximitySendSupportCheck", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6637, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SourceAppContractCountTraceData> ConnectCharm_DisplayUI_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SourceAppContractCountTraceData(value, 6641, 6640, "ConnectCharm_DisplayUI", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6641, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SourceAppContractCountTraceData> ConnectCharm_DisplayUI_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SourceAppContractCountTraceData(value, 6642, 6640, "ConnectCharm_DisplayUI", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6642, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherSettingsFlyout_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6700, 6700, "ImmersiveLauncherSettingsFlyout_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6700, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherSettingsFlyout_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6701, 6700, "ImmersiveLauncherSettingsFlyout_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6701, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherSettingsFlyout_ClearTiles_Invoked
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6706, 6706, "ImmersiveLauncherSettingsFlyout_ClearTiles", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6706, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherUninstallFlyout_Uninstall_Invoked
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6708, 6708, "ImmersiveLauncherUninstallFlyout_Uninstall", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6708, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData> SecondaryTile_APIInvoked_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData(value, 6710, 6710, "SecondaryTile_APIInvoked", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6710, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> SecondaryTile_APIInvoked_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6711, 6710, "SecondaryTile_APIInvoked", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6711, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_APIOperation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6712, 6712, "SecondaryTile_APIOperation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6712, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> SecondaryTile_APIOperation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6713, 6712, "SecondaryTile_APIOperation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6713, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_FlyoutDisplayed_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6714, 6714, "SecondaryTile_FlyoutDisplayed", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6714, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> SecondaryTile_FlyoutDisplayed_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6715, 6714, "SecondaryTile_FlyoutDisplayed", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6715, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_FlyoutReadyToDisplay
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6716, 6716, "SecondaryTile_FlyoutReadyToDisplay", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6716, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<OperationResultTraceData> SecondaryTile_FlyoutPreviewResult
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6718, 6718, "SecondaryTile_FlyoutPreviewResult", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6718, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveOpenWithUI_CreateAndShow_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6720, 6720, "ImmersiveOpenWithUI_CreateAndShow", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6720, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveOpenWithUI_CreateAndShow_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6721, 6720, "ImmersiveOpenWithUI_CreateAndShow", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6721, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<ImmersiveOpenWithUIModeTemplateTraceData> ImmersiveOpenWithUI_Mode
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ImmersiveOpenWithUIModeTemplateTraceData(value, 6722, 6722, "ImmersiveOpenWithUI_Mode", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6722, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveOpenWithUI_InvokeApp
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6723, 6723, "ImmersiveOpenWithUI_InvokeApp", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6723, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveOpenWithUI_InvokeWMIS
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6724, 6724, "ImmersiveOpenWithUI_InvokeWMIS", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6724, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveOpenWithUI_InvokeAppStore
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6725, 6725, "ImmersiveOpenWithUI_InvokeAppStore", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6725, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherGroupNameFlyout_FlyoutVisible
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6751, 6751, "ImmersiveLauncherGroupNameFlyout_Show", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6751, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherGroupNameFlyout_GroupName_SaveOperationInvoked
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6752, 6752, "ImmersiveLauncherGroupNameFlyout_GroupName", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6752, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Select_Tile_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6760, 6760, "AppBar_Select_Tile", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6760, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Select_Tile_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6761, 6760, "AppBar_Select_Tile", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6761, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Select_Group_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6762, 6762, "AppBar_Select_Group", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6762, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Select_Group_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6763, 6762, "AppBar_Select_Group", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6763, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Execute_Command_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6764, 6764, "AppBar_Execute_Command", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6764, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Execute_Command_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6765, 6764, "AppBar_Execute_Command", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6765, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<AppBarUpdateButtonsTraceData> AppBar_Update_Buttons
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AppBarUpdateButtonsTraceData(value, 6766, 6766, "AppBar_Update_Buttons", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6766, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6767, 6767, "AppBar_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6767, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> AppBar_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6768, 6767, "AppBar_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6768, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateTraceData> TileManagement_PackageInfo_LoadFromManifest_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateTraceData(value, 6780, 6780, "TileManagement_PackageInfo_LoadFromManifest", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6780, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_PackageInfo_LoadFromManifest_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6781, 6780, "TileManagement_PackageInfo_LoadFromManifest", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6781, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateTraceData> TileManagement_PackageInfo_LoadFromDisk_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateTraceData(value, 6782, 6781, "TileManagement_PackageInfo_LoadFromDisk", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6782, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_PackageInfo_LoadFromDisk_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6783, 6781, "TileManagement_PackageInfo_LoadFromDisk", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6783, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateTraceData> TileManagement_PackageInfo_VerifyInformation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateTraceData(value, 6784, 6782, "TileManagement_PackageInfo_VerifyInformation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6784, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_PackageInfo_VerifyInformation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6785, 6782, "TileManagement_PackageInfo_VerifyInformation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6785, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateTraceData> TileManagement_PackageInfo_Revert_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateTraceData(value, 6786, 6783, "TileManagement_PackageInfo_Revert", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6786, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_PackageInfo_Revert_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6787, 6783, "TileManagement_PackageInfo_Revert", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6787, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateTraceData> TileManagement_PackageInfo_Commit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateTraceData(value, 6788, 6784, "TileManagement_PackageInfo_Commit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6788, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_PackageInfo_Commit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6789, 6784, "TileManagement_PackageInfo_Commit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6789, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileRoamingTemplateTraceData> TileManagement_AppTileInfo_InitContentTileRoaming_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileRoamingTemplateTraceData(value, 6790, 6785, "TileManagement_AppTileInfo_InitContentTileRoaming", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6790, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_InitContentTileRoaming_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6791, 6785, "TileManagement_AppTileInfo_InitContentTileRoaming", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6791, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_VerifyInformation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6792, 6786, "TileManagement_AppTileInfo_VerifyInformation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6792, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_VerifyInformation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6793, 6786, "TileManagement_AppTileInfo_VerifyInformation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6793, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_Revert_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6794, 6787, "TileManagement_AppTileInfo_Revert", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6794, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_Revert_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6795, 6787, "TileManagement_AppTileInfo_Revert", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6795, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_Commit_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6796, 6788, "TileManagement_AppTileInfo_Commit", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6796, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_Commit_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6797, 6788, "TileManagement_AppTileInfo_Commit", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6797, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_PopulateShortcut_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6798, 6789, "TileManagement_AppTileInfo_PopulateShortcut", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6798, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_PopulateShortcut_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6799, 6789, "TileManagement_AppTileInfo_PopulateShortcut", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6799, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_CommitShortcut_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6800, 6790, "TileManagement_AppTileInfo_CommitShortcut", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6800, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> TileManagement_AppTileInfo_CommitShortcut_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6801, 6790, "TileManagement_AppTileInfo_CommitShortcut", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6801, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<TileManagementPackageInfoTemplateInstallStateChangeTraceData> TileManagement_PackageInfo_InstallStateChange
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementPackageInfoTemplateInstallStateChangeTraceData(value, 6802, 6791, "TileManagement_PackageInfo_InstallStateChange", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6802, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Commit_Create
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6803, 6792, "TileManagement_AppTileInfo_Commit_Create", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6803, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Commit_Update
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6804, 6793, "TileManagement_AppTileInfo_Commit_Update", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6804, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Commit_Delete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6805, 6794, "TileManagement_AppTileInfo_Commit_Delete", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6805, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Commit_Temporary
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6806, 6795, "TileManagement_AppTileInfo_Commit_Temporary", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6806, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateTraceData> TileManagement_AppTileInfo_Commit_ChangePropValue
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateTraceData(value, 6807, 6796, "TileManagement_AppTileInfo_Commit_ChangePropValue", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6807, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Revert_Create
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6808, 6797, "TileManagement_AppTileInfo_Revert_Create", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6808, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Revert_Update
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6809, 6798, "TileManagement_AppTileInfo_Revert_Update", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6809, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> TileManagement_AppTileInfo_Revert_Delete
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TileManagementAppTileInfoTemplateShortcutChangeTraceData(value, 6810, 6799, "TileManagement_AppTileInfo_Revert_Delete", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6810, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreen_AddInvoked_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6820, 6820, "LockScreen_AddInvoked", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6820, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> LockScreen_AddInvoked_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6821, 6820, "LockScreen_AddInvoked", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6821, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreen_AddOperation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6822, 6821, "LockScreen_AddOperation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6822, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> LockScreen_AddOperation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6823, 6821, "LockScreen_AddOperation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6823, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreen_AddDialogDisplayed_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6824, 6822, "LockScreen_AddDialogDisplayed", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6824, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreen_AddDialogDisplayed_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6825, 6822, "LockScreen_AddDialogDisplayed", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6825, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreen_AddContentionFlyoutDisplayed_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6826, 6823, "LockScreen_AddContentionFlyoutDisplayed", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6826, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<OperationResultTraceData> LockScreen_AddContentionFlyoutDisplayed_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new OperationResultTraceData(value, 6827, 6823, "LockScreen_AddContentionFlyoutDisplayed", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6827, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> LockScreenAddReturnedCachedValue
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6828, 0, null, new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6828, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_FlyoutShowing_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6840, 6840, "SecondaryTile_FlyoutShowing", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6840, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_FlyoutShowing_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6841, 6840, "SecondaryTile_FlyoutShowing", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6841, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_DiskOperation_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6842, 6842, "SecondaryTile_DiskOperation", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6842, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<SecondaryTileApiTypeTemplateTraceData> SecondaryTile_DiskOperation_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new SecondaryTileApiTypeTemplateTraceData(value, 6843, 6842, "SecondaryTile_DiskOperation", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6843, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_RealizeOnlyVisible_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7000, 7000, "Grid_Controller_RealizeOnlyVisible", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7000, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_RealizeOnlyVisible_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7001, 7000, "Grid_Controller_RealizeOnlyVisible", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7001, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherInitializeScaleDataTraceData> Grid_Host_ReloadStateForThemeOrDPITransition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherInitializeScaleDataTraceData(value, 7002, 7002, "Grid_Host_ReloadStateForThemeOrDPITransition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7002, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<LauncherInitializeScaleDataTraceData> Grid_Host_ReloadStateForThemeOrDPITransition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherInitializeScaleDataTraceData(value, 7003, 7002, "Grid_Host_ReloadStateForThemeOrDPITransition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7003, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridSelectedTileCountDataTraceData> Grid_Selected_Item_Count_Changed_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridSelectedTileCountDataTraceData(value, 7004, 7004, "Grid_Selected_Item_Count_Changed", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7004, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridSelectedTileCountDataTraceData> Grid_Selected_Item_Count_Changed_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridSelectedTileCountDataTraceData(value, 7005, 7004, "Grid_Selected_Item_Count_Changed", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7005, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<LauncherViewTransitionUpdateTypeTraceData> Grid_Host_ViewTransition_UpdateType
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LauncherViewTransitionUpdateTypeTraceData(value, 7006, 7006, "Grid_Host_ViewTransition_UpdateType", new Guid(), 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7006, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_PostPaint_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7008, 7008, "Grid_Controller_PostPaint", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7008, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_PostPaint_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7009, 7008, "Grid_Controller_PostPaint", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7009, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_ScheduleFullRealization_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7010, 7010, "Grid_Controller_ScheduleFullRealization", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7010, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_ScheduleFullRealization_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7011, 7010, "Grid_Controller_ScheduleFullRealization", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7011, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_BeginContentTransition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7012, 7012, "Grid_Controller_ContentTransition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7012, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_BeginContentTransition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7013, 7012, "Grid_Controller_ContentTransition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7013, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<GridControllerModelRealizationPhaseTraceData> Grid_Controller_EndContentTransition_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GridControllerModelRealizationPhaseTraceData(value, 7014, 7012, "Grid_Controller_ContentTransition", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7014, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> Grid_Controller_EndContentTransition_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7015, 7012, "Grid_Controller_ContentTransition", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7015, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherHelpFlyout_Show_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7100, 7100, "ImmersiveLauncherHelpFlyout_Show", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7100, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<EmptyTraceData> ImmersiveLauncherHelpFlyout_Show_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7101, 7100, "ImmersiveLauncherHelpFlyout_Show", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7101, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }
        public event Action<UninstallFlyoutRemoveTilesTraceData> ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI_Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new UninstallFlyoutRemoveTilesTraceData(value, 7120, 7120, "ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI", new Guid(), 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7120, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, new Guid());
            }
        }
        public event Action<UninstallFlyoutRemoveTilesTraceData> ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI_Stop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new UninstallFlyoutRemoveTilesTraceData(value, 7121, 7120, "ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI", new Guid(), 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7121, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, new Guid());
            }
        }

       #region Event ID Definitions
        public const TraceEventID ImmersiveShell_Startup_StartEventID = (TraceEventID) 101;
        public const TraceEventID ImmersiveShell_Startup_StopEventID = (TraceEventID) 102;
        public const TraceEventID ImmersiveShell_Component_Startup_StartEventID = (TraceEventID) 111;
        public const TraceEventID ImmersiveShell_Component_Startup_StopEventID = (TraceEventID) 112;
        public const TraceEventID ImmersiveShell_Component_Shutdown_StartEventID = (TraceEventID) 113;
        public const TraceEventID ImmersiveShell_Component_Shutdown_StopEventID = (TraceEventID) 114;
        public const TraceEventID ImmersiveShell_AppManager_ModeChange_StartEventID = (TraceEventID) 121;
        public const TraceEventID ImmersiveShell_AppManager_ModeChange_StopEventID = (TraceEventID) 122;
        public const TraceEventID ImmersiveShell_AppManager_ZbandChange_StartEventID = (TraceEventID) 123;
        public const TraceEventID ImmersiveShell_AppManager_ZbandChange_StopEventID = (TraceEventID) 124;
        public const TraceEventID ImmersiveShell_AppManager_ZbandChanged_StartEventID = (TraceEventID) 125;
        public const TraceEventID ImmersiveShell_AppManager_ZbandChanged_StopEventID = (TraceEventID) 126;
        public const TraceEventID ImmersiveShell_AppManager_ModeChanging_StartEventID = (TraceEventID) 131;
        public const TraceEventID ImmersiveShell_AppManager_ModeChanging_StopEventID = (TraceEventID) 132;
        public const TraceEventID ImmersiveShell_AppManager_ModeChanged_StartEventID = (TraceEventID) 141;
        public const TraceEventID ImmersiveShell_AppManager_ModeChanged_StopEventID = (TraceEventID) 142;
        public const TraceEventID ImmersiveShell_AppManager_Reconstitution_StartEventID = (TraceEventID) 145;
        public const TraceEventID ImmersiveShell_AppManager_Reconstitution_StopEventID = (TraceEventID) 146;
        public const TraceEventID ImmersiveShell_LayoutManager_Update_StartEventID = (TraceEventID) 151;
        public const TraceEventID ImmersiveShell_LayoutManager_Update_StopEventID = (TraceEventID) 152;
        public const TraceEventID ImmersiveShell_LayoutManager_Update_BandInfoEventID = (TraceEventID) 153;
        public const TraceEventID ImmersiveShell_LayoutManager_Initialize_StartEventID = (TraceEventID) 154;
        public const TraceEventID ImmersiveShell_LayoutManager_Initialize_StopEventID = (TraceEventID) 155;
        public const TraceEventID ImmersiveShellLayoutManagerInvalidateEventID = (TraceEventID) 156;
        public const TraceEventID ImmersiveShell_InputHost_Showing_StartEventID = (TraceEventID) 161;
        public const TraceEventID ImmersiveShell_InputHost_Showing_StopEventID = (TraceEventID) 162;
        public const TraceEventID ImmersiveShell_InputHost_Hiding_StartEventID = (TraceEventID) 163;
        public const TraceEventID ImmersiveShell_InputHost_Hiding_StopEventID = (TraceEventID) 164;
        public const TraceEventID ImmersiveShell_InputHost_AppNotification_StartEventID = (TraceEventID) 165;
        public const TraceEventID ImmersiveShell_InputHost_AppNotification_StopEventID = (TraceEventID) 166;
        public const TraceEventID ImmersiveShell_AppManager_ApplicationStateChangedEventID = (TraceEventID) 171;
        public const TraceEventID ImmersiveShell_UI_Drag_InfoEventID = (TraceEventID) 181;
        public const TraceEventID ImmersiveShell_AppSpace_ParseXML_StartEventID = (TraceEventID) 1001;
        public const TraceEventID ImmersiveShell_AppSpace_ParseXML_StopEventID = (TraceEventID) 1002;
        public const TraceEventID ImmersiveShell_AppSpace_ParseXML_ErrorEventID = (TraceEventID) 1003;
        public const TraceEventID TileXML_MissingTemplateForCurrentSizeEventID = (TraceEventID) 1004;
        public const TraceEventID ImmersiveShell_AppSpace_CreateLayout_StartEventID = (TraceEventID) 1011;
        public const TraceEventID ImmersiveShell_AppSpace_CreateLayout_StopEventID = (TraceEventID) 1012;
        public const TraceEventID TileXML_ProcessMRTResourceEventID = (TraceEventID) 1013;
        public const TraceEventID TileXML_PayloadTooLargeEventID = (TraceEventID) 1014;
        public const TraceEventID TileXML_PayloadTooSmallEventID = (TraceEventID) 1015;
        public const TraceEventID TileXML_InvalidUnicodeFormatEventID = (TraceEventID) 1016;
        public const TraceEventID TileXML_InvalidAttributesEventID = (TraceEventID) 1017;
        public const TraceEventID TileXML_TagPresentTooManyTimesEventID = (TraceEventID) 1018;
        public const TraceEventID TileXML_UnknownElementEventID = (TraceEventID) 1019;
        public const TraceEventID TileXML_UnexpectedTextEventID = (TraceEventID) 1020;
        public const TraceEventID TileXML_MoreThanOneVisualPresentEventID = (TraceEventID) 1021;
        public const TraceEventID ImmersiveShell_Badge_ParseXML_StartEventID = (TraceEventID) 1201;
        public const TraceEventID ImmersiveShell_Badge_ParseXML_StopEventID = (TraceEventID) 1202;
        public const TraceEventID ImmersiveShell_Badge_ParseXML_ErrorEventID = (TraceEventID) 1203;
        public const TraceEventID AppPositioner_LayoutChange_ChangedEventID = (TraceEventID) 1301;
        public const TraceEventID AppPositioner_AppSwitch_SwitchedEventID = (TraceEventID) 1306;
        public const TraceEventID AppGutter_Drag_StartEventID = (TraceEventID) 1351;
        public const TraceEventID AppGutter_Drag_StopEventID = (TraceEventID) 1352;
        public const TraceEventID BackstackManager_GetBackstack_StartEventID = (TraceEventID) 1401;
        public const TraceEventID BackstackManager_GetBackstack_InfoEventID = (TraceEventID) 1402;
        public const TraceEventID BackstackManager_GetBackstack_StopEventID = (TraceEventID) 1403;
        public const TraceEventID BackstackManager_ClearBackstack_StartEventID = (TraceEventID) 1405;
        public const TraceEventID BackstackManager_ClearBackstack_StopEventID = (TraceEventID) 1406;
        public const TraceEventID BackstackManager_RemoveApp_InfoEventID = (TraceEventID) 1408;
        public const TraceEventID SwitchModeManager_BeginModeEventID = (TraceEventID) 1451;
        public const TraceEventID SwitchModeManager_EndModeEventID = (TraceEventID) 1453;
        public const TraceEventID SwitchModeManager_Switch_InfoEventID = (TraceEventID) 1455;
        public const TraceEventID DropFeedback_Show_InfoEventID = (TraceEventID) 1460;
        public const TraceEventID DropFeedback_Hide_InfoEventID = (TraceEventID) 1461;
        public const TraceEventID DropFeedbackItem_Show_InfoEventID = (TraceEventID) 1462;
        public const TraceEventID DropFeedbackItem_Update_InfoEventID = (TraceEventID) 1463;
        public const TraceEventID DragVisual_Show_InfoEventID = (TraceEventID) 1470;
        public const TraceEventID DragVisual_AppChange_InfoEventID = (TraceEventID) 1471;
        public const TraceEventID DragVisual_ModeChange_InfoEventID = (TraceEventID) 1472;
        public const TraceEventID DragVisual_Hide_InfoEventID = (TraceEventID) 1473;
        public const TraceEventID DragVisual_Destroy_InfoEventID = (TraceEventID) 1474;
        public const TraceEventID DragVisual_TargetChanged_InfoEventID = (TraceEventID) 1476;
        public const TraceEventID PlaybackManager_Advise_StartEventID = (TraceEventID) 1501;
        public const TraceEventID PlaybackManager_Advise_StopEventID = (TraceEventID) 1502;
        public const TraceEventID PlaybackManager_Unadvise_StartEventID = (TraceEventID) 1504;
        public const TraceEventID PlaybackManager_Unadvise_StopEventID = (TraceEventID) 1505;
        public const TraceEventID PlaybackManager_Change_SessionState_StartEventID = (TraceEventID) 1507;
        public const TraceEventID PlaybackManager_Change_SessionState_StopEventID = (TraceEventID) 1508;
        public const TraceEventID PlaybackManager_DuckSessionEventID = (TraceEventID) 1509;
        public const TraceEventID PlaybackManager_UnDuckSessionEventID = (TraceEventID) 1512;
        public const TraceEventID PlaybackManager_AudioOnVolumeDuckSession_StartEventID = (TraceEventID) 1516;
        public const TraceEventID PlaybackManager_AudioOnVolumeDuckSession_StopEventID = (TraceEventID) 1517;
        public const TraceEventID PlaybackManager_AudioOnVolumeUnDuckSession_StartEventID = (TraceEventID) 1519;
        public const TraceEventID PlaybackManager_AudioOnVolumeUnDuckSession_StopEventID = (TraceEventID) 1520;
        public const TraceEventID PlaybackManager_Initialization_StartEventID = (TraceEventID) 1522;
        public const TraceEventID PlaybackManager_Initialization_StopEventID = (TraceEventID) 1523;
        public const TraceEventID PlaybackManager_SendEvent_StartEventID = (TraceEventID) 1525;
        public const TraceEventID PlaybackManager_SendEvent_StopEventID = (TraceEventID) 1526;
        public const TraceEventID AppsFolder_ParseDisplayName_StartEventID = (TraceEventID) 1601;
        public const TraceEventID AppsFolder_ParseDisplayName_StopEventID = (TraceEventID) 1602;
        public const TraceEventID AppsFolder_EnumObjects_StartEventID = (TraceEventID) 1603;
        public const TraceEventID AppsFolder_EnumObjects_StopEventID = (TraceEventID) 1604;
        public const TraceEventID AppsFolder_GetDetailsEx_StartEventID = (TraceEventID) 1605;
        public const TraceEventID AppsFolder_GetDetailsEx_StopEventID = (TraceEventID) 1606;
        public const TraceEventID AppsFolder_MoveItem_StartEventID = (TraceEventID) 1607;
        public const TraceEventID AppsFolder_MoveItem_StopEventID = (TraceEventID) 1608;
        public const TraceEventID AppsFolder_GetPropertyStore_StartEventID = (TraceEventID) 1609;
        public const TraceEventID AppsFolder_GetPropertyStore_StopEventID = (TraceEventID) 1610;
        public const TraceEventID AppsFolder_GetPropertyStoreForKeys_StartEventID = (TraceEventID) 1611;
        public const TraceEventID AppsFolder_GetPropertyStoreForKeys_StopEventID = (TraceEventID) 1612;
        public const TraceEventID AppsFolder_ImmersiveApp_OpenVerb_StartEventID = (TraceEventID) 1613;
        public const TraceEventID AppsFolder_ImmersiveApp_OpenVerb_StopEventID = (TraceEventID) 1614;
        public const TraceEventID AppsFolderItemState_NotifyChange_InfoEventID = (TraceEventID) 1615;
        public const TraceEventID AppsFolder_DualModeVerb_StartEventID = (TraceEventID) 1617;
        public const TraceEventID AppsFolder_DualModeVerb_StopEventID = (TraceEventID) 1618;
        public const TraceEventID AppsFolder_DualModeVerb_BeforeExecuteEventID = (TraceEventID) 1619;
        public const TraceEventID AppsFolderImmersiveAppOpenVerbExecutionAttemptResultEventID = (TraceEventID) 1620;
        public const TraceEventID AppsFolderImmersiveAppOpenVerbResultEventID = (TraceEventID) 1621;
        public const TraceEventID ImmersiveShell_Toast_Manager_Init_StartEventID = (TraceEventID) 1701;
        public const TraceEventID ImmersiveShell_Toast_Manager_Init_StopEventID = (TraceEventID) 1702;
        public const TraceEventID ImmersiveShell_Toast_Create_Platform_Session_StartEventID = (TraceEventID) 1704;
        public const TraceEventID ImmersiveShell_Toast_Create_Platform_Session_StopEventID = (TraceEventID) 1705;
        public const TraceEventID ImmersiveShell_Toast_Start_PositionEventID = (TraceEventID) 1707;
        public const TraceEventID ImmersiveShell_Toast_Display_LimitEventID = (TraceEventID) 1709;
        public const TraceEventID ImmersiveShell_Toast_Opaque_State_DurationEventID = (TraceEventID) 1711;
        public const TraceEventID ImmersiveShell_Toast_SizeEventID = (TraceEventID) 1713;
        public const TraceEventID ImmersiveShell_Toast_Data_Processing_StartEventID = (TraceEventID) 1718;
        public const TraceEventID ImmersiveShell_Toast_Data_Processing_StopEventID = (TraceEventID) 1719;
        public const TraceEventID ImmersiveShell_Toast_UI_Rendering_StartEventID = (TraceEventID) 1721;
        public const TraceEventID ImmersiveShell_Toast_Position_InfoEventID = (TraceEventID) 1722;
        public const TraceEventID ImmersiveShell_Toast_Display_List_EnterEventID = (TraceEventID) 1723;
        public const TraceEventID ImmersiveShell_Toast_UI_Rendering_StopEventID = (TraceEventID) 1724;
        public const TraceEventID ImmersiveShell_Toast_Max_Display_Limit_ReachedEventID = (TraceEventID) 1726;
        public const TraceEventID ImmersiveShell_Toast_Opaque_State_EnterEventID = (TraceEventID) 1728;
        public const TraceEventID ImmersiveShell_Toast_Opaque_State_LeaveEventID = (TraceEventID) 1729;
        public const TraceEventID ImmersiveShell_Toast_Decay_State_EnterEventID = (TraceEventID) 1731;
        public const TraceEventID ImmersiveShell_Toast_Decay_State_LeaveEventID = (TraceEventID) 1732;
        public const TraceEventID ImmersiveShell_Toast_Working_State_EnterEventID = (TraceEventID) 1734;
        public const TraceEventID ImmersiveShell_Toast_Working_State_LeaveEventID = (TraceEventID) 1735;
        public const TraceEventID ImmersiveShell_Toast_ActivateEventID = (TraceEventID) 1737;
        public const TraceEventID ImmersiveShell_Toast_UI_Rendering_ErrorEventID = (TraceEventID) 1738;
        public const TraceEventID ImmersiveShell_Toast_DismissEventID = (TraceEventID) 1740;
        public const TraceEventID ImmersiveShell_Toast_Remove_Display_StartEventID = (TraceEventID) 1742;
        public const TraceEventID ImmersiveShell_Toast_Remove_Display_StopEventID = (TraceEventID) 1743;
        public const TraceEventID ImmersiveShell_Toast_Working_UI_EnabledEventID = (TraceEventID) 1745;
        public const TraceEventID ImmersiveShell_Toast_Rerrange_Layout_StartEventID = (TraceEventID) 1747;
        public const TraceEventID ImmersiveShell_Toast_Rerrange_Layout_StopEventID = (TraceEventID) 1748;
        public const TraceEventID ImmersiveShell_Toast_XML_ParsingEventID = (TraceEventID) 1749;
        public const TraceEventID ImmersiveShell_Toast_Data_RenderingEventID = (TraceEventID) 1750;
        public const TraceEventID ImmersiveShell_Toast_Rendering_Data_ErrorEventID = (TraceEventID) 1751;
        public const TraceEventID ImmersiveShell_Toast_Rendering_Data_DoneEventID = (TraceEventID) 1752;
        public const TraceEventID ImmersiveShell_Toast_Play_Audio_StartEventID = (TraceEventID) 1754;
        public const TraceEventID ImmersiveShell_Toast_Play_Audio_BusyEventID = (TraceEventID) 1755;
        public const TraceEventID ImmersiveShell_Toast_Stop_AudioEventID = (TraceEventID) 1756;
        public const TraceEventID ImmersiveShell_Toast_Play_Audio_CompleteEventID = (TraceEventID) 1757;
        public const TraceEventID ImmersiveShell_Toast_Play_Audio_ErrorEventID = (TraceEventID) 1758;
        public const TraceEventID ImmersiveShell_Toast_Display_List_ExitEventID = (TraceEventID) 1759;
        public const TraceEventID ImmersiveShell_Toast_Overflow_EnqueueEventID = (TraceEventID) 1760;
        public const TraceEventID ImmersiveShell_Toast_Overflow_DequeueEventID = (TraceEventID) 1761;
        public const TraceEventID ImmersiveShell_Toast_CancelledEventID = (TraceEventID) 1762;
        public const TraceEventID ImmersiveShell_Toast_Cancel_ReceivedEventID = (TraceEventID) 1763;
        public const TraceEventID ImmersiveShell_Toast_Cancel_StoredEventID = (TraceEventID) 1764;
        public const TraceEventID ImmersiveShell_Toast_FrozenEventID = (TraceEventID) 1765;
        public const TraceEventID ImmersiveShell_Toast_XML_Parsing_ErrorEventID = (TraceEventID) 1766;
        public const TraceEventID ImmersiveShell_Toast_ImmersiveActivation_ErrorEventID = (TraceEventID) 1767;
        public const TraceEventID ImmersiveShell_Toast_FadeIn_Animation_StartEventID = (TraceEventID) 1772;
        public const TraceEventID ImmersiveShell_Toast_FadeIn_Animation_StopEventID = (TraceEventID) 1773;
        public const TraceEventID ImmersiveShell_Toast_FadeOut_Animation_StartEventID = (TraceEventID) 1775;
        public const TraceEventID ImmersiveShell_Toast_FadeOut_Animation_StopEventID = (TraceEventID) 1776;
        public const TraceEventID ImmersiveShell_Toast_Entry_Animation_StartEventID = (TraceEventID) 1778;
        public const TraceEventID ImmersiveShell_Toast_Entry_Animation_StopEventID = (TraceEventID) 1779;
        public const TraceEventID ImmersiveShell_Toast_Exit_Animation_StartEventID = (TraceEventID) 1781;
        public const TraceEventID ImmersiveShell_Toast_Exit_Animation_StopEventID = (TraceEventID) 1782;
        public const TraceEventID ImmersiveShell_Toast_Reposition_Animation_StartEventID = (TraceEventID) 1784;
        public const TraceEventID ImmersiveShell_Toast_Reposition_Animation_StopEventID = (TraceEventID) 1785;
        public const TraceEventID ImmersiveShell_Toast_TapUp_Animation_StartEventID = (TraceEventID) 1787;
        public const TraceEventID ImmersiveShell_Toast_TapUp_Animation_StopEventID = (TraceEventID) 1788;
        public const TraceEventID ImmersiveShell_Toast_TapDown_Animation_StartEventID = (TraceEventID) 1790;
        public const TraceEventID ImmersiveShell_Toast_TapDown_Animation_StopEventID = (TraceEventID) 1791;
        public const TraceEventID TileNotifications_CreateSessionEventID = (TraceEventID) 1800;
        public const TraceEventID TileNotifications_UpdateSessionEventID = (TraceEventID) 1803;
        public const TraceEventID TileNotifications_CloseSessionEventID = (TraceEventID) 1806;
        public const TraceEventID TileNotifications_SessionNotificationArrivedEventID = (TraceEventID) 1809;
        public const TraceEventID TileNotifications_RequestNotificationEventID = (TraceEventID) 1812;
        public const TraceEventID TileNotifications_RequestNotificationArrivedEventID = (TraceEventID) 1815;
        public const TraceEventID TileNotifications_NotificationSinkCalledEventID = (TraceEventID) 1818;
        public const TraceEventID TileNotifications_RequestResourceEventID = (TraceEventID) 1821;
        public const TraceEventID TileNotifications_ResourceArrivedEventID = (TraceEventID) 1824;
        public const TraceEventID TileNotifications_ResourceSinkCalledEventID = (TraceEventID) 1827;
        public const TraceEventID TileNotifications_PauseNotificationsEventID = (TraceEventID) 1830;
        public const TraceEventID TileNotifications_ResumeNotificationsEventID = (TraceEventID) 1833;
        public const TraceEventID TileNotifications_FailedInstallEventID = (TraceEventID) 1836;
        public const TraceEventID TileNotifications_BadgeNumberEventID = (TraceEventID) 1839;
        public const TraceEventID TileNotifications_BadgeGlyphEventID = (TraceEventID) 1840;
        public const TraceEventID TileNotifications_ClearNotificationsEventID = (TraceEventID) 1843;
        public const TraceEventID CreateMRTResourceContext_StartEventID = (TraceEventID) 1844;
        public const TraceEventID CreateMRTResourceContext_StopEventID = (TraceEventID) 1845;
        public const TraceEventID CreateDecoratedFileWithDpis_StartEventID = (TraceEventID) 1846;
        public const TraceEventID CreateDecoratedFileWithDpis_StopEventID = (TraceEventID) 1847;
        public const TraceEventID TilesNotifications_AnimationScheduledEventID = (TraceEventID) 1849;
        public const TraceEventID TilesNotifications_AnimationPlayedEventID = (TraceEventID) 1850;
        public const TraceEventID TileNotifications_QueryNotificationsEnabled_StartEventID = (TraceEventID) 1852;
        public const TraceEventID TileNotifications_QueryNotificationsEnabled_StopEventID = (TraceEventID) 1853;
        public const TraceEventID ActionSpacePane_CharmBarShow_StartEventID = (TraceEventID) 1900;
        public const TraceEventID ActionSpacePane_CharmBarShow_StopEventID = (TraceEventID) 1901;
        public const TraceEventID ActionSpacePane_CharmBarHide_StartEventID = (TraceEventID) 1902;
        public const TraceEventID ActionSpacePane_CharmBarHide_StopEventID = (TraceEventID) 1903;
        public const TraceEventID ActionSpacePane_CharmBarPosition_StartEventID = (TraceEventID) 1904;
        public const TraceEventID ActionSpacePane_CharmBarPosition_StopEventID = (TraceEventID) 1905;
        public const TraceEventID ActionSpacePane_CharmBarUpdate_StartEventID = (TraceEventID) 1906;
        public const TraceEventID ActionSpacePane_CharmBarUpdate_StopEventID = (TraceEventID) 1907;
        public const TraceEventID ActionSpacePane_CharmActivate_StartEventID = (TraceEventID) 1908;
        public const TraceEventID ActionSpacePane_CharmActivate_StopEventID = (TraceEventID) 1909;
        public const TraceEventID ActionSpacePane_CharmBarHardwareButtonEvent_StartEventID = (TraceEventID) 1916;
        public const TraceEventID ActionSpacePane_CharmBarHardwareButtonEvent_StopEventID = (TraceEventID) 1917;
        public const TraceEventID ActionSpacePane_CharmMenuShow_StartEventID = (TraceEventID) 1918;
        public const TraceEventID ActionSpacePane_CharmMenuShow_StopEventID = (TraceEventID) 1919;
        public const TraceEventID ActionSpacePane_CharmMenuHide_StartEventID = (TraceEventID) 1920;
        public const TraceEventID ActionSpacePane_CharmMenuHide_StopEventID = (TraceEventID) 1921;
        public const TraceEventID ActionSpacePaneStartup_LaunchSystemFlow_StartEventID = (TraceEventID) 1955;
        public const TraceEventID ActionSpacePaneStartup_PaneRegisteredEventID = (TraceEventID) 1956;
        public const TraceEventID ActionSpacePaneShutdown_PaneUnregisteredEventID = (TraceEventID) 1965;
        public const TraceEventID Grid_Controller_PerformRealization_StartEventID = (TraceEventID) 2000;
        public const TraceEventID Grid_Controller_PerformRealization_StopEventID = (TraceEventID) 2001;
        public const TraceEventID Grid_Controller_RealizeTile_StartEventID = (TraceEventID) 2002;
        public const TraceEventID Grid_Controller_RealizeTile_StopEventID = (TraceEventID) 2003;
        public const TraceEventID Grid_Controller_UnrealizeTile_StartEventID = (TraceEventID) 2004;
        public const TraceEventID Grid_Controller_UnrealizeTile_StopEventID = (TraceEventID) 2005;
        public const TraceEventID Grid_Layout_UpdateLayout_StartEventID = (TraceEventID) 2006;
        public const TraceEventID Grid_Layout_UpdateLayout_StopEventID = (TraceEventID) 2007;
        public const TraceEventID Grid_Layout_AddItem_StartEventID = (TraceEventID) 2008;
        public const TraceEventID Grid_Layout_AddItem_StopEventID = (TraceEventID) 2009;
        public const TraceEventID Grid_Layout_RemoveItem_StartEventID = (TraceEventID) 2010;
        public const TraceEventID Grid_Layout_RemoveItem_StopEventID = (TraceEventID) 2011;
        public const TraceEventID Grid_Layout_GetItemData_StartEventID = (TraceEventID) 2012;
        public const TraceEventID Grid_Layout_GetItemData_StopEventID = (TraceEventID) 2013;
        public const TraceEventID Grid_View_SetSize_StartEventID = (TraceEventID) 2014;
        public const TraceEventID Grid_View_SetSize_StopEventID = (TraceEventID) 2015;
        public const TraceEventID Grid_View_UpdateGroupBounds_StartEventID = (TraceEventID) 2016;
        public const TraceEventID Grid_View_UpdateGroupBounds_StopEventID = (TraceEventID) 2017;
        public const TraceEventID Grid_View_UpdateTile_StartEventID = (TraceEventID) 2018;
        public const TraceEventID Grid_View_UpdateTile_StopEventID = (TraceEventID) 2019;
        public const TraceEventID Grid_View_OnTileNavigation_StartEventID = (TraceEventID) 2020;
        public const TraceEventID Grid_View_OnTileNavigation_StopEventID = (TraceEventID) 2021;
        public const TraceEventID Grid_View_OnResize_StartEventID = (TraceEventID) 2022;
        public const TraceEventID Grid_View_OnResize_StopEventID = (TraceEventID) 2023;
        public const TraceEventID Grid_View_OnScrolled_StartEventID = (TraceEventID) 2024;
        public const TraceEventID Grid_View_OnScrolled_StopEventID = (TraceEventID) 2025;
        public const TraceEventID Grid_Controller_OnTileActivated_StartEventID = (TraceEventID) 2026;
        public const TraceEventID Grid_Controller_OnTileActivated_StopEventID = (TraceEventID) 2027;
        public const TraceEventID GridModelIItemReadPropertyFailedEventID = (TraceEventID) 2036;
        public const TraceEventID Grid_View_TileUIFactory_CreateTileElement_FailedEventID = (TraceEventID) 2037;
        public const TraceEventID GridViewTileUIFactoryUpdateTileElementFailedEventID = (TraceEventID) 2038;
        public const TraceEventID Grid_Model_Item_Enumeration_StartEventID = (TraceEventID) 2039;
        public const TraceEventID Grid_Model_Item_Enumeration_StopEventID = (TraceEventID) 2040;
        public const TraceEventID Grid_Controller_ExecuteTileVerb_StartEventID = (TraceEventID) 2041;
        public const TraceEventID Grid_Controller_ExecuteTileVerb_StopEventID = (TraceEventID) 2042;
        public const TraceEventID Grid_TileActivationTask_ExecuteItem_StartEventID = (TraceEventID) 2043;
        public const TraceEventID Grid_TileActivationTask_ExecuteItem_StopEventID = (TraceEventID) 2044;
        public const TraceEventID Grid_Host_SetItemCollection_StartEventID = (TraceEventID) 2045;
        public const TraceEventID Grid_Host_SetItemCollection_StopEventID = (TraceEventID) 2046;
        public const TraceEventID Grid_Host_VisibleRealizedEventID = (TraceEventID) 2047;
        public const TraceEventID Grid_Model_SetRealizedTiles_StartEventID = (TraceEventID) 2048;
        public const TraceEventID Grid_Model_SetRealizedTiles_StopEventID = (TraceEventID) 2049;
        public const TraceEventID Grid_TileContextMenuProvider_CreateMenu_StartEventID = (TraceEventID) 2050;
        public const TraceEventID Grid_TileContextMenuProvider_CreateMenu_StopEventID = (TraceEventID) 2051;
        public const TraceEventID Grid_Controller_MoveItem_StartEventID = (TraceEventID) 2052;
        public const TraceEventID Grid_Controller_MoveItem_StopEventID = (TraceEventID) 2053;
        public const TraceEventID Grid_TileRearrange_RearrangeStart_StartEventID = (TraceEventID) 2054;
        public const TraceEventID Grid_TileRearrange_RearrangeStart_StopEventID = (TraceEventID) 2055;
        public const TraceEventID Grid_TileRearrange_RearrangeMove_StartEventID = (TraceEventID) 2056;
        public const TraceEventID Grid_TileRearrange_RearrangeMove_StopEventID = (TraceEventID) 2057;
        public const TraceEventID Grid_View_FirstPage_StartEventID = (TraceEventID) 2058;
        public const TraceEventID Grid_View_FirstPage_StopEventID = (TraceEventID) 2059;
        public const TraceEventID Grid_View_Prefetch_StartEventID = (TraceEventID) 2060;
        public const TraceEventID Grid_View_Prefetch_StopEventID = (TraceEventID) 2061;
        public const TraceEventID Grid_View_OnTileTickled_StartEventID = (TraceEventID) 2062;
        public const TraceEventID Grid_View_OnTileTickled_StopEventID = (TraceEventID) 2063;
        public const TraceEventID Grid_View_OnAutoTickle_StartEventID = (TraceEventID) 2064;
        public const TraceEventID Grid_View_OnAutoTickle_StopEventID = (TraceEventID) 2065;
        public const TraceEventID GridViewVisibleTilesHighQualityEventID = (TraceEventID) 2066;
        public const TraceEventID Grid_View_AreTicklesPresent_StartEventID = (TraceEventID) 2068;
        public const TraceEventID Grid_View_AreTicklesPresent_StopEventID = (TraceEventID) 2069;
        public const TraceEventID Grid_Controller_ToggleTileSize_StartEventID = (TraceEventID) 2070;
        public const TraceEventID Grid_Controller_ToggleTileSize_StopEventID = (TraceEventID) 2071;
        public const TraceEventID GridModelShellItemCreateFailedEventID = (TraceEventID) 2072;
        public const TraceEventID GridModelItemCreateFailedEventID = (TraceEventID) 2073;
        public const TraceEventID Grid_GroupRearrange_RearrangeStart_StartEventID = (TraceEventID) 2074;
        public const TraceEventID Grid_GroupRearrange_RearrangeStart_StopEventID = (TraceEventID) 2075;
        public const TraceEventID Grid_GroupRearrange_RearrangeCancel_StartEventID = (TraceEventID) 2076;
        public const TraceEventID Grid_GroupRearrange_RearrangeCancel_StopEventID = (TraceEventID) 2077;
        public const TraceEventID Grid_GroupRearrange_RearrangeComplete_StartEventID = (TraceEventID) 2078;
        public const TraceEventID Grid_GroupRearrange_RearrangeComplete_StopEventID = (TraceEventID) 2079;
        public const TraceEventID Grid_GroupRearrange_RearrangeMove_StartEventID = (TraceEventID) 2080;
        public const TraceEventID Grid_GroupRearrange_RearrangeMove_StopEventID = (TraceEventID) 2081;
        public const TraceEventID Grid_ShareFromMogo_SharePreflight_StartEventID = (TraceEventID) 2082;
        public const TraceEventID Grid_ShareFromMogo_SharePreflight_StopEventID = (TraceEventID) 2083;
        public const TraceEventID Grid_Tile_Verb_Invoked_UnpinFromStartEventID = (TraceEventID) 2084;
        public const TraceEventID Grid_Tile_Verb_Invoked_ShareEventID = (TraceEventID) 2085;
        public const TraceEventID Grid_Tile_Verb_Uninstall_ShortcutsDeletedEventID = (TraceEventID) 2086;
        public const TraceEventID Grid_Tile_Verb_Uninstall_AsyncOperationStartedEventID = (TraceEventID) 2087;
        public const TraceEventID Grid_CollectionEvent_OnCollectionChangedEventID = (TraceEventID) 2088;
        public const TraceEventID Grid_CollectionEvent_OnGetCountDoneEventID = (TraceEventID) 2089;
        public const TraceEventID Grid_CollectionEvent_OnItemsAddedEventID = (TraceEventID) 2090;
        public const TraceEventID Grid_CollectionEvent_OnItemsDeletedEventID = (TraceEventID) 2091;
        public const TraceEventID Grid_CollectionEvent_OnItemMovedEventID = (TraceEventID) 2092;
        public const TraceEventID Grid_CollectionEvent_OnItemTranslatedEventID = (TraceEventID) 2093;
        public const TraceEventID Grid_CollectionEvent_OnItemChangedEventID = (TraceEventID) 2094;
        public const TraceEventID Grid_Model_OnTileErrorEventID = (TraceEventID) 2095;
        public const TraceEventID Grid_Model_OnItemErrorEventID = (TraceEventID) 2096;
        public const TraceEventID Grid_View_TickleTilesEventID = (TraceEventID) 2097;
        public const TraceEventID Grid_View_PeekTilesEventID = (TraceEventID) 2098;
        public const TraceEventID Grid_Tile_Verb_RemoveContentTile_ShortcutDeletedEventID = (TraceEventID) 2099;
        public const TraceEventID Picker_PickerLaunched_InfoEventID = (TraceEventID) 2100;
        public const TraceEventID Picker_PickerReady_InfoEventID = (TraceEventID) 2102;
        public const TraceEventID Picker_NavigationStart_InfoEventID = (TraceEventID) 2104;
        public const TraceEventID Picker_View_ItemToggled_InfoEventID = (TraceEventID) 2106;
        public const TraceEventID Picker_Basket_Ready_InfoEventID = (TraceEventID) 2108;
        public const TraceEventID Picker_ActionButton_EnabledChanged_InfoEventID = (TraceEventID) 2110;
        public const TraceEventID Picker_JumpBar_MenuInvoked_StartEventID = (TraceEventID) 2112;
        public const TraceEventID Picker_JumpBar_MenuInvoked_StopEventID = (TraceEventID) 2113;
        public const TraceEventID Picker_ActionButton_ContentChanged_InfoEventID = (TraceEventID) 2114;
        public const TraceEventID Picker_BusyState_Shown_StartEventID = (TraceEventID) 2116;
        public const TraceEventID Picker_BusyState_Shown_StopEventID = (TraceEventID) 2117;
        public const TraceEventID Picker_WaitForApplications_StartEventID = (TraceEventID) 2118;
        public const TraceEventID Picker_WaitForApplications_StopEventID = (TraceEventID) 2119;
        public const TraceEventID Picker_Application_Signalled_InfoEventID = (TraceEventID) 2120;
        public const TraceEventID Picker_JumpBar_HomeGroupAvailableCheck_StartEventID = (TraceEventID) 2122;
        public const TraceEventID Picker_JumpBar_HomeGroupAvailableCheck_StopEventID = (TraceEventID) 2123;
        public const TraceEventID Picker_LocationLabel_Updated_InfoEventID = (TraceEventID) 2124;
        public const TraceEventID PerfTrack_Picker_NavigateLocal_Responsive_StartEventID = (TraceEventID) 2126;
        public const TraceEventID PerfTrack_Picker_NavigateLocal_Responsive_StopEventID = (TraceEventID) 2127;
        public const TraceEventID PerfTrack_Picker_NavigateLocal_ViewComplete_StartEventID = (TraceEventID) 2128;
        public const TraceEventID PerfTrack_Picker_NavigateLocal_ViewComplete_StopEventID = (TraceEventID) 2129;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Tile_Responsive_StartEventID = (TraceEventID) 2130;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Tile_Responsive_StopEventID = (TraceEventID) 2131;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Tile_ViewComplete_StartEventID = (TraceEventID) 2132;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Tile_ViewComplete_StopEventID = (TraceEventID) 2133;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Thumbnail_Responsive_StartEventID = (TraceEventID) 2134;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Thumbnail_Responsive_StopEventID = (TraceEventID) 2135;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete_StartEventID = (TraceEventID) 2136;
        public const TraceEventID PerfTrack_Picker_Launch_Open_Thumbnail_ViewComplete_StopEventID = (TraceEventID) 2137;
        public const TraceEventID PerfTrack_Picker_Launch_Save_Tile_Responsive_StartEventID = (TraceEventID) 2138;
        public const TraceEventID PerfTrack_Picker_Launch_Save_Tile_Responsive_StopEventID = (TraceEventID) 2139;
        public const TraceEventID PerfTrack_Picker_Launch_Save_Tile_ViewComplete_StartEventID = (TraceEventID) 2140;
        public const TraceEventID PerfTrack_Picker_Launch_Save_Tile_ViewComplete_StopEventID = (TraceEventID) 2141;
        public const TraceEventID FileOpenPickerUI_AddFile_StartEventID = (TraceEventID) 2142;
        public const TraceEventID FileOpenPickerUI_AddFile_StopEventID = (TraceEventID) 2143;
        public const TraceEventID FileOpenPickerUI_RemoveFile_StartEventID = (TraceEventID) 2144;
        public const TraceEventID FileOpenPickerUI_RemoveFile_StopEventID = (TraceEventID) 2145;
        public const TraceEventID PerfTrack_Picker_NavigateHG_Responsive_StartEventID = (TraceEventID) 2146;
        public const TraceEventID PerfTrack_Picker_NavigateHG_Responsive_StopEventID = (TraceEventID) 2147;
        public const TraceEventID PerfTrack_Picker_NavigateHG_ViewComplete_StartEventID = (TraceEventID) 2148;
        public const TraceEventID PerfTrack_Picker_NavigateHG_ViewComplete_StopEventID = (TraceEventID) 2149;
        public const TraceEventID PerfTrack_Picker_NavigateUNC_Responsive_StartEventID = (TraceEventID) 2150;
        public const TraceEventID PerfTrack_Picker_NavigateUNC_Responsive_StopEventID = (TraceEventID) 2151;
        public const TraceEventID PerfTrack_Picker_NavigateUNC_ViewComplete_StartEventID = (TraceEventID) 2152;
        public const TraceEventID PerfTrack_Picker_NavigateUNC_ViewComplete_StopEventID = (TraceEventID) 2153;
        public const TraceEventID PerfTrack_Picker_Launch_Thumbnail_FirstPageEventID = (TraceEventID) 2154;
        public const TraceEventID PerfTrack_Picker_Launch_Tile_FirstPageEventID = (TraceEventID) 2155;
        public const TraceEventID SharingManager_InitSharing_StartEventID = (TraceEventID) 2200;
        public const TraceEventID SharingManager_InitSharing_StopEventID = (TraceEventID) 2201;
        public const TraceEventID SharingManager_GetSharableItemCount_StartEventID = (TraceEventID) 2202;
        public const TraceEventID SharingManager_GetSharableItemCount_StopEventID = (TraceEventID) 2203;
        public const TraceEventID SharingManager_GetSharableItemDescription_StartEventID = (TraceEventID) 2204;
        public const TraceEventID SharingManager_GetSharableItemDescription_StopEventID = (TraceEventID) 2205;
        public const TraceEventID SharingManager_GetSharableItemData_StartEventID = (TraceEventID) 2206;
        public const TraceEventID SharingManager_GetSharableItemData_StopEventID = (TraceEventID) 2207;
        public const TraceEventID SharingManager_SelectSharableItem_StartEventID = (TraceEventID) 2208;
        public const TraceEventID SharingManager_SelectSharableItem_StopEventID = (TraceEventID) 2209;
        public const TraceEventID SharingManager_GetAppTargetCount_StartEventID = (TraceEventID) 2210;
        public const TraceEventID SharingManager_GetAppTargetCount_StopEventID = (TraceEventID) 2211;
        public const TraceEventID SharingManager_GetAppTarget_StartEventID = (TraceEventID) 2212;
        public const TraceEventID SharingManager_GetAppTarget_StopEventID = (TraceEventID) 2213;
        public const TraceEventID SharingManager_GetQuickShareTargetCount_StartEventID = (TraceEventID) 2214;
        public const TraceEventID SharingManager_GetQuickShareTargetCount_StopEventID = (TraceEventID) 2215;
        public const TraceEventID SharingManager_GetQuickShareTarget_StartEventID = (TraceEventID) 2216;
        public const TraceEventID SharingManager_GetQuickShareTarget_StopEventID = (TraceEventID) 2217;
        public const TraceEventID SharingManager_ActivateTarget_StartEventID = (TraceEventID) 2218;
        public const TraceEventID SharingManager_ActivateTarget_StopEventID = (TraceEventID) 2219;
        public const TraceEventID SharingManager_TransferData_StartEventID = (TraceEventID) 2220;
        public const TraceEventID SharingManager_TransferData_StopEventID = (TraceEventID) 2221;
        public const TraceEventID SharingTargetCallback_DoneTransfer_StartEventID = (TraceEventID) 2222;
        public const TraceEventID SharingTargetCallback_DoneTransfer_StopEventID = (TraceEventID) 2223;
        public const TraceEventID QuickShareTargetList_SaveQuickShareTarget_StartEventID = (TraceEventID) 2224;
        public const TraceEventID QuickShareTargetList_SaveQuickShareTarget_StopEventID = (TraceEventID) 2225;
        public const TraceEventID SharingTargetAppList_QueryTargets_StartEventID = (TraceEventID) 2226;
        public const TraceEventID SharingTargetAppList_QueryTargets_StopEventID = (TraceEventID) 2227;
        public const TraceEventID QuickShareTargetList_QueryTargets_StartEventID = (TraceEventID) 2228;
        public const TraceEventID QuickShareTargetList_QueryTargets_StopEventID = (TraceEventID) 2229;
        public const TraceEventID Share_InvalidPlatform_InfoEventID = (TraceEventID) 2230;
        public const TraceEventID Share_BGThreadFailure_InfoEventID = (TraceEventID) 2231;
        public const TraceEventID Share_ShowFailure_InfoEventID = (TraceEventID) 2232;
        public const TraceEventID Share_NoSourceItems_InfoEventID = (TraceEventID) 2233;
        public const TraceEventID Share_EnumSourceItemsFailure_InfoEventID = (TraceEventID) 2234;
        public const TraceEventID Share_LoadDUIFailure_InfoEventID = (TraceEventID) 2235;
        public const TraceEventID Share_NoDestinations_InfoEventID = (TraceEventID) 2236;
        public const TraceEventID Share_EnumDestinationsFailure_InfoEventID = (TraceEventID) 2237;
        public const TraceEventID Share_InitUI_StartEventID = (TraceEventID) 2238;
        public const TraceEventID Share_InitUI_StopEventID = (TraceEventID) 2239;
        public const TraceEventID Share_ContentChange_StartEventID = (TraceEventID) 2240;
        public const TraceEventID Share_ContentChange_StopEventID = (TraceEventID) 2241;
        public const TraceEventID Share_SpeedBumpToMainViewEventID = (TraceEventID) 2242;
        public const TraceEventID Share_MainViewToSpeedBumpEventID = (TraceEventID) 2243;
        public const TraceEventID Share_RunningSharesToViewEventID = (TraceEventID) 2244;
        public const TraceEventID Share_ViewToRunningSharesEventID = (TraceEventID) 2245;
        public const TraceEventID PerfTrack_Share_ShowFlow_StartEventID = (TraceEventID) 2246;
        public const TraceEventID PerfTrack_Share_ShowFlow_StopEventID = (TraceEventID) 2247;
        public const TraceEventID Launcher_Apps_Initialize_StartEventID = (TraceEventID) 2300;
        public const TraceEventID Launcher_Apps_Initialize_StopEventID = (TraceEventID) 2301;
        public const TraceEventID Launcher_Apps_Show_StartEventID = (TraceEventID) 2302;
        public const TraceEventID Launcher_Apps_Show_StopEventID = (TraceEventID) 2303;
        public const TraceEventID Launcher_EscPressedEventID = (TraceEventID) 2304;
        public const TraceEventID Launcher_Apps_Hide_StartEventID = (TraceEventID) 2305;
        public const TraceEventID Launcher_Apps_Hide_StopEventID = (TraceEventID) 2306;
        public const TraceEventID Launcher_Apps_OpenSearchEventID = (TraceEventID) 2307;
        public const TraceEventID Launcher_Apps_CloseSearchEventID = (TraceEventID) 2309;
        public const TraceEventID Launcher_OnSearch_StartEventID = (TraceEventID) 2313;
        public const TraceEventID Launcher_OnSearch_EndEventID = (TraceEventID) 2314;
        public const TraceEventID Launcher_Apps_ViewChange_StartEventID = (TraceEventID) 2315;
        public const TraceEventID Launcher_Apps_ViewChange_StopEventID = (TraceEventID) 2316;
        public const TraceEventID Launcher_ViewActivatedEventID = (TraceEventID) 2317;
        public const TraceEventID Launcher_TileDropped_StartEventID = (TraceEventID) 2318;
        public const TraceEventID Launcher_TileDropped_StopEventID = (TraceEventID) 2319;
        public const TraceEventID PerfTrack_Launcher_PathCompletion_StartEventID = (TraceEventID) 2320;
        public const TraceEventID PerfTrack_Launcher_PathCompletion_StopEventID = (TraceEventID) 2321;
        public const TraceEventID Launcher_ViewPicker_VisiblityChangedEventID = (TraceEventID) 2322;
        public const TraceEventID PerfTrack_Launcher_Apps_SwitchToAllAppsView_StartEventID = (TraceEventID) 2324;
        public const TraceEventID PerfTrack_Launcher_Apps_SwitchToAllAppsView_StopEventID = (TraceEventID) 2325;
        public const TraceEventID PerfTrack_DesktopToLauncherTransition_StartEventID = (TraceEventID) 2326;
        public const TraceEventID PerfTrack_DesktopToLauncherTransition_StopEventID = (TraceEventID) 2327;
        public const TraceEventID Launcher_SetForegroundWindowEventID = (TraceEventID) 2328;
        public const TraceEventID Launcher_RegisterForDesktopSwitchEventID = (TraceEventID) 2330;
        public const TraceEventID Launcher_DesktopSwitchCallbackEventID = (TraceEventID) 2331;
        public const TraceEventID Launcher_Apps_RefreshContents_StartEventID = (TraceEventID) 2332;
        public const TraceEventID Launcher_Apps_RefreshContents_StopEventID = (TraceEventID) 2333;
        public const TraceEventID PerfTrack_Launcher_OrientationChange_StartEventID = (TraceEventID) 2356;
        public const TraceEventID PerfTrack_Launcher_OrientationChange_StopEventID = (TraceEventID) 2357;
        public const TraceEventID Launcher_ClearTiles_ClearNotificationCacheEventID = (TraceEventID) 2358;
        public const TraceEventID Launcher_ClearTiles_ClearTilesCacheEventID = (TraceEventID) 2359;
        public const TraceEventID Launcher_BackgroundColorChangeEventID = (TraceEventID) 2360;
        public const TraceEventID PerfTrack_Launcher_Dismiss_Explicit_ToDesktop_StartEventID = (TraceEventID) 2361;
        public const TraceEventID PerfTrack_Launcher_Dismiss_Explicit_ToDesktop_StopEventID = (TraceEventID) 2362;
        public const TraceEventID PerfTrack_Launcher_Dismiss_Explicit_ToImmersiveMode_StartEventID = (TraceEventID) 2363;
        public const TraceEventID PerfTrack_Launcher_Dismiss_Explicit_ToImmersiveMode_StopEventID = (TraceEventID) 2364;
        public const TraceEventID PerfTrack_Launcher_Show_FromImmersiveMode_StartEventID = (TraceEventID) 2365;
        public const TraceEventID PerfTrack_Launcher_Show_FromImmersiveMode_StopEventID = (TraceEventID) 2366;
        public const TraceEventID PerfTrack_Launcher_Apps_SwitchToStartViewFromAllAppsView_StartEventID = (TraceEventID) 2368;
        public const TraceEventID PerfTrack_Launcher_Apps_SwitchToStartViewFromAllAppsView_StopEventID = (TraceEventID) 2369;
        public const TraceEventID ShellTraceId_Explorer_Startup_InitializeDesktop_StartEventID = (TraceEventID) 2370;
        public const TraceEventID PerfTrack_AppSearch_ViewComplete_StartEventID = (TraceEventID) 2373;
        public const TraceEventID PerfTrack_AppSearch_ViewComplete_StopEventID = (TraceEventID) 2374;
        public const TraceEventID PerfTrack_FSA_Search_StartEventID = (TraceEventID) 2375;
        public const TraceEventID PerfTrack_FSA_Search_StopEventID = (TraceEventID) 2376;
        public const TraceEventID PerfTrack_CMS_Search_StartEventID = (TraceEventID) 2377;
        public const TraceEventID PerfTrack_CMS_Search_StopEventID = (TraceEventID) 2378;
        public const TraceEventID Launcher_ActiveZbandChanged_StartEventID = (TraceEventID) 2379;
        public const TraceEventID Launcher_ActiveZbandChanged_StopEventID = (TraceEventID) 2380;
        public const TraceEventID Launcher_RequestTileBitmap_InfoEventID = (TraceEventID) 2381;
        public const TraceEventID PerfTrack_FSA_Search_AbortEventID = (TraceEventID) 2398;
        public const TraceEventID PerfTrack_CMS_Search_AbortEventID = (TraceEventID) 2399;
        public const TraceEventID PerfTrack_PLM_SuspendPackage_StartEventID = (TraceEventID) 2450;
        public const TraceEventID PerfTrack_PLM_SuspendPackage_StopEventID = (TraceEventID) 2451;
        public const TraceEventID PLM_UserLogoffEventID = (TraceEventID) 2453;
        public const TraceEventID PLM_ConnectedStandbyEntryEventID = (TraceEventID) 2454;
        public const TraceEventID PLM_TerminationPolicy_StartEventID = (TraceEventID) 2455;
        public const TraceEventID PLM_TerminationPolicy_StopEventID = (TraceEventID) 2456;
        public const TraceEventID PLM_PagedOutPolicy_StartEventID = (TraceEventID) 2457;
        public const TraceEventID PLM_PagedOutPolicy_StopEventID = (TraceEventID) 2458;
        public const TraceEventID PLM_ApplicationHang_StartEventID = (TraceEventID) 2459;
        public const TraceEventID PLM_ApplicationHang_Stop_TimeoutEventID = (TraceEventID) 2460;
        public const TraceEventID PLM_ApplicationHang_Stop_ForceCloseEventID = (TraceEventID) 2461;
        public const TraceEventID PLM_ApplicationHang_Stop_AppRecoveredEventID = (TraceEventID) 2462;
        public const TraceEventID PerfTrack_PLM_ResumePackage_StartEventID = (TraceEventID) 2463;
        public const TraceEventID PerfTrack_PLM_ResumePackage_StopEventID = (TraceEventID) 2464;
        public const TraceEventID PerfTrack_PLM_HungApplication_Activation_StartEventID = (TraceEventID) 2466;
        public const TraceEventID PerfTrack_PLM_HungApplication_Activation_StopEventID = (TraceEventID) 2467;
        public const TraceEventID PLM_SuspendDeniedEventID = (TraceEventID) 2471;
        public const TraceEventID PLM_ResumePackageEventID = (TraceEventID) 2472;
        public const TraceEventID PLM_PackageStateChangeEventID = (TraceEventID) 2473;
        public const TraceEventID PLM_PSM_WakeCounterChangeEventID = (TraceEventID) 2474;
        public const TraceEventID PLM_MemoryPolicy_EvaluatingMemoryEventID = (TraceEventID) 2475;
        public const TraceEventID PLM_MemoryPolicy_EmptyCandidateEventID = (TraceEventID) 2476;
        public const TraceEventID PLM_MemoryPolicy_TerminationExemptionEventID = (TraceEventID) 2477;
        public const TraceEventID PLM_MemoryPolicy_TerminationCandidateEventID = (TraceEventID) 2478;
        public const TraceEventID PLM_MemoryPolicy_TerminationEventID = (TraceEventID) 2479;
        public const TraceEventID PLM_TerminateApp_API_StartEventID = (TraceEventID) 2480;
        public const TraceEventID PLM_TerminateApp_API_StopEventID = (TraceEventID) 2481;
        public const TraceEventID PLM_TerminateApp_StartEventID = (TraceEventID) 2482;
        public const TraceEventID PLM_TerminateApp_StopEventID = (TraceEventID) 2483;
        public const TraceEventID PLM_GlobalApplicationChannel_SuspendTimeoutEventID = (TraceEventID) 2484;
        public const TraceEventID PLM_GlobalApplicationChannel_MemoryPolicy_TerminationEventID = (TraceEventID) 2485;
        public const TraceEventID PLM_GlobalApplicationChannel_LaunchGraceExpiredEventID = (TraceEventID) 2486;
        public const TraceEventID PLM_MemoryPolicy_StartEventID = (TraceEventID) 2487;
        public const TraceEventID PLM_MemoryPolicy_StopEventID = (TraceEventID) 2488;
        public const TraceEventID PLM_MemoryPolicy_RundownEventID = (TraceEventID) 2489;
        public const TraceEventID PLM_MemoryPolicy_ExecutionReasonEventID = (TraceEventID) 2490;
        public const TraceEventID UserTile_Flyout_Launch_StartEventID = (TraceEventID) 2500;
        public const TraceEventID UserTile_Flyout_Launch_StopEventID = (TraceEventID) 2501;
        public const TraceEventID PerfTrack_UserSwitching_StartEventID = (TraceEventID) 2504;
        public const TraceEventID Settings_SettingsLaunch_StartEventID = (TraceEventID) 2601;
        public const TraceEventID Settings_SettingsLaunch_StopEventID = (TraceEventID) 2602;
        public const TraceEventID Settings_SettingsLoadSysElements_StartEventID = (TraceEventID) 2604;
        public const TraceEventID Settings_SettingsLoadSysElements_StopEventID = (TraceEventID) 2605;
        public const TraceEventID Settings_SettingsLoadAppWidgetsBG_StartEventID = (TraceEventID) 2607;
        public const TraceEventID Settings_SettingsLoadAppWidgetsBG_FailureInfoEventID = (TraceEventID) 2608;
        public const TraceEventID Settings_SettingsLoadAppWidgetsBG_StopEventID = (TraceEventID) 2609;
        public const TraceEventID Settings_SettingsLoadAppElements_StartEventID = (TraceEventID) 2611;
        public const TraceEventID Settings_SettingsLoadAppElements_StopEventID = (TraceEventID) 2612;
        public const TraceEventID Settings_PermissionsLaunch_StartEventID = (TraceEventID) 2614;
        public const TraceEventID Settings_PermissionsLaunch_StopEventID = (TraceEventID) 2615;
        public const TraceEventID Settings_PermissionsLoadItems_StartEventID = (TraceEventID) 2617;
        public const TraceEventID Settings_PermissionsLoadItems_FailureInfoEventID = (TraceEventID) 2618;
        public const TraceEventID Settings_PermissionsLoadItems_StopEventID = (TraceEventID) 2619;
        public const TraceEventID Settings_Widgets_InputInit_StartEventID = (TraceEventID) 2620;
        public const TraceEventID Settings_Widgets_InputInit_StopEventID = (TraceEventID) 2621;
        public const TraceEventID Settings_Widgets_InputCreate_StartEventID = (TraceEventID) 2622;
        public const TraceEventID Settings_Widgets_InputCreate_StopEventID = (TraceEventID) 2623;
        public const TraceEventID Settings_SettingsFlow_StartEventID = (TraceEventID) 2625;
        public const TraceEventID Settings_SettingsFlow_StopEventID = (TraceEventID) 2626;
        public const TraceEventID Settings_FactoryLoadWidgetsBG_StartEventID = (TraceEventID) 2628;
        public const TraceEventID Settings_FactoryLoadWidgetsBG_StopEventID = (TraceEventID) 2629;
        public const TraceEventID Settings_SettingsLifetime_StartEventID = (TraceEventID) 2631;
        public const TraceEventID Settings_SettingsLifetime_StopEventID = (TraceEventID) 2632;
        public const TraceEventID Settings_PermissionsLifetime_StartEventID = (TraceEventID) 2634;
        public const TraceEventID Settings_PermissionsLifetime_StopEventID = (TraceEventID) 2635;
        public const TraceEventID Settings_Widgets_NetworkInit_StartEventID = (TraceEventID) 2637;
        public const TraceEventID Settings_Widgets_NetworkInit_StopEventID = (TraceEventID) 2638;
        public const TraceEventID Settings_Widgets_NetworkCreate_StartEventID = (TraceEventID) 2640;
        public const TraceEventID Settings_Widgets_NetworkCreate_StopEventID = (TraceEventID) 2641;
        public const TraceEventID Settings_Widgets_NotificationsInit_StartEventID = (TraceEventID) 2643;
        public const TraceEventID Settings_Widgets_NotificationsInit_StopEventID = (TraceEventID) 2644;
        public const TraceEventID Settings_Widgets_NotificationsCreate_StartEventID = (TraceEventID) 2646;
        public const TraceEventID Settings_Widgets_NotificationsCreate_StopEventID = (TraceEventID) 2647;
        public const TraceEventID Settings_Widgets_ShutdownInit_StartEventID = (TraceEventID) 2649;
        public const TraceEventID Settings_Widgets_ShutdownInit_StopEventID = (TraceEventID) 2650;
        public const TraceEventID Settings_Widgets_ShutdownCreate_StartEventID = (TraceEventID) 2652;
        public const TraceEventID Settings_Widgets_ShutdownCreate_StopEventID = (TraceEventID) 2653;
        public const TraceEventID Settings_Widgets_VolumeInit_StartEventID = (TraceEventID) 2655;
        public const TraceEventID Settings_Widgets_VolumeInit_StopEventID = (TraceEventID) 2656;
        public const TraceEventID Settings_Widgets_VolumeCreate_StartEventID = (TraceEventID) 2658;
        public const TraceEventID Settings_Widgets_VolumeCreate_StopEventID = (TraceEventID) 2659;
        public const TraceEventID Settings_Widgets_BrightnessInit_StartEventID = (TraceEventID) 2661;
        public const TraceEventID Settings_Widgets_BrightnessInit_StopEventID = (TraceEventID) 2662;
        public const TraceEventID Settings_Widgets_BrightnessCreate_StartEventID = (TraceEventID) 2664;
        public const TraceEventID Settings_Widgets_BrightnessCreate_StopEventID = (TraceEventID) 2665;
        public const TraceEventID Settings_HotkeyInvoke_InfoEventID = (TraceEventID) 2667;
        public const TraceEventID Settings_CharmInvoke_InfoEventID = (TraceEventID) 2669;
        public const TraceEventID Settings_GetAppCommands_InfoEventID = (TraceEventID) 2671;
        public const TraceEventID Settings_Launch_SystemSettings_StartEventID = (TraceEventID) 2673;
        public const TraceEventID Settings_Launch_SystemSettings_StopEventID = (TraceEventID) 2674;
        public const TraceEventID Settings_Launch_ApplicationSettings_StartEventID = (TraceEventID) 2676;
        public const TraceEventID Settings_Launch_ApplicationSettings_StopEventID = (TraceEventID) 2677;
        public const TraceEventID Settings_Launch_SettingsCommand_StartEventID = (TraceEventID) 2679;
        public const TraceEventID Settings_Launch_SettingsCommand_StopEventID = (TraceEventID) 2680;
        public const TraceEventID Settings_Launch_Permissions_StartEventID = (TraceEventID) 2682;
        public const TraceEventID Settings_Launch_Permissions_StopEventID = (TraceEventID) 2683;
        public const TraceEventID Settings_Launch_RateAndReview_StartEventID = (TraceEventID) 2685;
        public const TraceEventID Settings_Launch_RateAndReview_StopEventID = (TraceEventID) 2686;
        public const TraceEventID Settings_Flow_Broker_Show_StartEventID = (TraceEventID) 2688;
        public const TraceEventID Settings_Flow_Broker_Show_InvokeEventID = (TraceEventID) 2689;
        public const TraceEventID Settings_Flow_Broker_Show_StopEventID = (TraceEventID) 2690;
        public const TraceEventID FlyoutAnimation_StartEventID = (TraceEventID) 2701;
        public const TraceEventID FlyoutAnimation_StopEventID = (TraceEventID) 2702;
        public const TraceEventID FlyoutStartup_BaseCreate_StartEventID = (TraceEventID) 2711;
        public const TraceEventID FlyoutStartup_IsImmersiveEventID = (TraceEventID) 2712;
        public const TraceEventID FlyoutStartup_BaseCreate_StopEventID = (TraceEventID) 2713;
        public const TraceEventID FlyoutStartup_DisplayCreate_StartEventID = (TraceEventID) 2715;
        public const TraceEventID FlyoutStartup_DisplayCreate_StopEventID = (TraceEventID) 2716;
        public const TraceEventID FlyoutDismiss_DismissCalledEventID = (TraceEventID) 2722;
        public const TraceEventID FlyoutDismiss_Close_StartEventID = (TraceEventID) 2723;
        public const TraceEventID FlyoutDismiss_DestroySentEventID = (TraceEventID) 2724;
        public const TraceEventID FlyoutDismiss_Close_StopEventID = (TraceEventID) 2725;
        public const TraceEventID FlyoutReflow_StartEventID = (TraceEventID) 2731;
        public const TraceEventID FlyoutReflow_StopEventID = (TraceEventID) 2732;
        public const TraceEventID FlyoutReflow_IHMAppliedEventID = (TraceEventID) 2733;
        public const TraceEventID FlyoutPositioning_FinalSideEventID = (TraceEventID) 2781;
        public const TraceEventID FlyoutPositioning_FinalRectEventID = (TraceEventID) 2782;
        public const TraceEventID FlyoutGeneral_ErrorEventID = (TraceEventID) 2791;
        public const TraceEventID FlyoutGeneral_DisplayChangeEventID = (TraceEventID) 2792;
        public const TraceEventID TileUI_Template_Parse_ErrorEventID = (TraceEventID) 2801;
        public const TraceEventID TileUI_Unknown_Template_ErrorEventID = (TraceEventID) 2802;
        public const TraceEventID TileUI_Unknown_Content_ErrorEventID = (TraceEventID) 2803;
        public const TraceEventID TileUI_DesktopKeystoneColorComputation_StartEventID = (TraceEventID) 2804;
        public const TraceEventID TileUI_DesktopKeystoneColorComputation_StopEventID = (TraceEventID) 2805;
        public const TraceEventID TileUI_TileActivatedEvent_FiredEventID = (TraceEventID) 2806;
        public const TraceEventID TileUI_TileRearrangeEvent_FiredEventID = (TraceEventID) 2807;
        public const TraceEventID TileUI_AutoTickleEvent_StartEventID = (TraceEventID) 2808;
        public const TraceEventID TileUI_AutoTickleEvent_StopEventID = (TraceEventID) 2809;
        public const TraceEventID TileUI_AutoTickleTimer_ActivatedEventID = (TraceEventID) 2810;
        public const TraceEventID TileUI_AutoTickleTimer_CanceledEventID = (TraceEventID) 2811;
        public const TraceEventID TileUI_TileExpiry_StartEventID = (TraceEventID) 2812;
        public const TraceEventID TileUI_TileExpiry_StopEventID = (TraceEventID) 2813;
        public const TraceEventID TileUI_TileExpiry_ActivatedEventID = (TraceEventID) 2814;
        public const TraceEventID TileUI_TileExpiry_CanceledEventID = (TraceEventID) 2815;
        public const TraceEventID TileUI_Change_Notification_Animation_StartEventID = (TraceEventID) 2816;
        public const TraceEventID TileUI_Change_Notification_Animation_StopEventID = (TraceEventID) 2817;
        public const TraceEventID AppSpaceLoadTaskSuccessEventID = (TraceEventID) 2818;
        public const TraceEventID RegisterTileEventID = (TraceEventID) 2819;
        public const TraceEventID TileNotifiedEventID = (TraceEventID) 2820;
        public const TraceEventID TileUI_Change_Notification_Animation_AutoTickle_StartEventID = (TraceEventID) 2821;
        public const TraceEventID TileUI_Change_Notification_Animation_AutoTickle_StopEventID = (TraceEventID) 2822;
        public const TraceEventID Tile_ImageLoad_WrongFormatEventID = (TraceEventID) 2823;
        public const TraceEventID Tile_ImageLoad_BadSizeEventID = (TraceEventID) 2824;
        public const TraceEventID Tile_ImageLoad_BadPathEventID = (TraceEventID) 2825;
        public const TraceEventID Tile_ImageLoad_IncorrectDPIOrThemeEventID = (TraceEventID) 2826;
        public const TraceEventID Tile_ImageLoad_BadProtocolEventID = (TraceEventID) 2827;
        public const TraceEventID TileUI_VisibleNotificationExpiredEventID = (TraceEventID) 2828;
        public const TraceEventID Tile_ImageLoad_SuccessEventID = (TraceEventID) 2829;
        public const TraceEventID TileUI_RetryRealization_StartEventID = (TraceEventID) 2830;
        public const TraceEventID TileUI_RetryRealization_StopEventID = (TraceEventID) 2831;
        public const TraceEventID TileUI_RetryRealization_ActivatedEventID = (TraceEventID) 2832;
        public const TraceEventID TileUI_RetryRealization_CanceledEventID = (TraceEventID) 2833;
        public const TraceEventID TileUI_AutoPeek_Animation_StartEventID = (TraceEventID) 2834;
        public const TraceEventID TileUI_AutoPeek_Animation_StopEventID = (TraceEventID) 2835;
        public const TraceEventID TileUI_CrossSlide_InitialTileMoveEventID = (TraceEventID) 2836;
        public const TraceEventID Tile_OnAppSpaceLoadSuccessEventID = (TraceEventID) 2837;
        public const TraceEventID Tile_OnAppSpaceLoadFailureEventID = (TraceEventID) 2838;
        public const TraceEventID Tile_MarkNotificationIDAsKnownBadEventID = (TraceEventID) 2839;
        public const TraceEventID TDBN_CreateView_StartEventID = (TraceEventID) 2901;
        public const TraceEventID TDBN_CreateView_StopEventID = (TraceEventID) 2902;
        public const TraceEventID TDBN_NotifyItem_AddModify_StartEventID = (TraceEventID) 2904;
        public const TraceEventID TDBN_NotifyItem_AddModify_StopEventID = (TraceEventID) 2905;
        public const TraceEventID TDBN_Reposition_StartEventID = (TraceEventID) 2907;
        public const TraceEventID TDBN_Reposition_StopEventID = (TraceEventID) 2908;
        public const TraceEventID TDBN_NotifyItem_Delete_StartEventID = (TraceEventID) 2910;
        public const TraceEventID TDBN_NotifyItem_Delete_StopEventID = (TraceEventID) 2911;
        public const TraceEventID TDBN_NotifyHandle_StartEventID = (TraceEventID) 2913;
        public const TraceEventID TDBN_NotifyHandle_StopEventID = (TraceEventID) 2914;
        public const TraceEventID TDBN_TimeDate_Update_StartEventID = (TraceEventID) 2916;
        public const TraceEventID TDBN_TimeDate_Update_StopEventID = (TraceEventID) 2917;
        public const TraceEventID TDBN_Shutdown_StartEventID = (TraceEventID) 2919;
        public const TraceEventID TDBN_Shutdown_StopEventID = (TraceEventID) 2920;
        public const TraceEventID TDBN_AudioFlyout_Shutdown_StartEventID = (TraceEventID) 2922;
        public const TraceEventID TDBN_AudioFlyout_Shutdown_StopEventID = (TraceEventID) 2923;
        public const TraceEventID TDBN_AudioFlyout_Display_StartEventID = (TraceEventID) 2924;
        public const TraceEventID TDBN_Show_StartEventID = (TraceEventID) 2925;
        public const TraceEventID TDBN_Show_StopEventID = (TraceEventID) 2926;
        public const TraceEventID TDBN_Hide_StartEventID = (TraceEventID) 2928;
        public const TraceEventID TDBN_Hide_StopEventID = (TraceEventID) 2929;
        public const TraceEventID TDBN_AudioFlyout_Display_StopEventID = (TraceEventID) 2930;
        public const TraceEventID Watermark_Register_Licensing_Event_ErrorEventID = (TraceEventID) 3000;
        public const TraceEventID Watermark_Window_Creation_ErrorEventID = (TraceEventID) 3001;
        public const TraceEventID Watermark_GenuineImage_Load_ErrorEventID = (TraceEventID) 3002;
        public const TraceEventID Watermark_GenuineImage_Blend_ErrorEventID = (TraceEventID) 3003;
        public const TraceEventID Watermark_Render_ErrorEventID = (TraceEventID) 3004;
        public const TraceEventID Watermark_Failed_To_Get_Genuine_StatusEventID = (TraceEventID) 3005;
        public const TraceEventID ImmersiveAutoPlay_DeviceAutoPlay_StartEventID = (TraceEventID) 3101;
        public const TraceEventID ImmersiveAutoPlay_DeviceAutoPlay_StopEventID = (TraceEventID) 3102;
        public const TraceEventID AutoPlay_Prompt_Show_StartEventID = (TraceEventID) 3103;
        public const TraceEventID AutoPlay_Prompt_Show_StopEventID = (TraceEventID) 3104;
        public const TraceEventID AutoPlay_DialogThread_StartEventID = (TraceEventID) 3105;
        public const TraceEventID AutoPlay_DialogThread_StopEventID = (TraceEventID) 3106;
        public const TraceEventID AutoPlay_DialogNoContentThread_StartEventID = (TraceEventID) 3107;
        public const TraceEventID AutoPlay_DialogNoContentThread_StopEventID = (TraceEventID) 3108;
        public const TraceEventID AutoPlay_Prompt_Visible_StartEventID = (TraceEventID) 3109;
        public const TraceEventID AutoPlay_Prompt_Visible_StopEventID = (TraceEventID) 3110;
        public const TraceEventID AutoPlay_Broker_Device_StartEventID = (TraceEventID) 3111;
        public const TraceEventID AutoPlay_Broker_Device_StopEventID = (TraceEventID) 3112;
        public const TraceEventID AutoPlay_Calculate_Response_Time_StartEventID = (TraceEventID) 3113;
        public const TraceEventID AutoPlay_Calculate_Response_Time_StopEventID = (TraceEventID) 3114;
        public const TraceEventID AutoPlay_Volume_FirstConnect_ToUIEventID = (TraceEventID) 3150;
        public const TraceEventID AutoPlay_Volume_FirstConnect_ToDefaultLaunchEventID = (TraceEventID) 3151;
        public const TraceEventID AutoPlay_Volume_NthConnect_ToUIEventID = (TraceEventID) 3152;
        public const TraceEventID AutoPlay_Volume_NthConnect_ToDefaultLaunchEventID = (TraceEventID) 3153;
        public const TraceEventID AutoPlay_Device_FirstConnect_ToUIEventID = (TraceEventID) 3154;
        public const TraceEventID AutoPlay_Device_FirstConnect_ToDefaultLaunchEventID = (TraceEventID) 3155;
        public const TraceEventID AutoPlay_Device_NthConnect_ToUIEventID = (TraceEventID) 3156;
        public const TraceEventID AutoPlay_Device_NthConnect_ToDefaultLaunchEventID = (TraceEventID) 3157;
        public const TraceEventID EdgeUi_Invoke_Continuous_StartEventID = (TraceEventID) 3200;
        public const TraceEventID EdgeUi_Invoke_Continuous_CommitEventID = (TraceEventID) 3201;
        public const TraceEventID EdgeUi_Invoke_Continuous_CancelEventID = (TraceEventID) 3202;
        public const TraceEventID EdgeUi_Invoke_DiscreteEventID = (TraceEventID) 3203;
        public const TraceEventID EdgeUi_Invoke_Continuous_ExtendedStartEventID = (TraceEventID) 3204;
        public const TraceEventID EdgeUi_Invoke_Mouse_HitSingleEdgeEventID = (TraceEventID) 3205;
        public const TraceEventID DockedDesktop_Create_StartEventID = (TraceEventID) 3300;
        public const TraceEventID DockedDesktop_Create_StopEventID = (TraceEventID) 3301;
        public const TraceEventID DockedDesktop_FullCreate_StartEventID = (TraceEventID) 3302;
        public const TraceEventID DockedDesktop_FullCreate_StopEventID = (TraceEventID) 3303;
        public const TraceEventID DockedDesktop_Dock_StartEventID = (TraceEventID) 3304;
        public const TraceEventID DockedDesktop_Dock_StopEventID = (TraceEventID) 3305;
        public const TraceEventID DockedDesktop_Undock_StartEventID = (TraceEventID) 3306;
        public const TraceEventID DockedDesktop_Undock_StopEventID = (TraceEventID) 3307;
        public const TraceEventID DockedDesktop_CreateButton_StartEventID = (TraceEventID) 3308;
        public const TraceEventID DockedDesktop_CreateButton_StopEventID = (TraceEventID) 3309;
        public const TraceEventID DockedDesktop_DestroyButton_StartEventID = (TraceEventID) 3310;
        public const TraceEventID DockedDesktop_DestroyButton_StopEventID = (TraceEventID) 3311;
        public const TraceEventID DockedDesktop_Refresh_StartEventID = (TraceEventID) 3312;
        public const TraceEventID DockedDesktop_Refresh_StopEventID = (TraceEventID) 3313;
        public const TraceEventID DockedDesktop_HighlightNeedyEventID = (TraceEventID) 3314;
        public const TraceEventID DockedDesktop_SnapNoCreateEventID = (TraceEventID) 3315;
        public const TraceEventID AssociationLaunch_FileLaunch_StartEventID = (TraceEventID) 4001;
        public const TraceEventID AssociationLaunch_FileLaunch_StopEventID = (TraceEventID) 4002;
        public const TraceEventID AssociationLaunch_ProtocolLaunch_StartEventID = (TraceEventID) 4004;
        public const TraceEventID AssociationLaunch_ProtocolLaunch_StopEventID = (TraceEventID) 4005;
        public const TraceEventID AssociationLaunch_ServerInitialization_StartEventID = (TraceEventID) 4007;
        public const TraceEventID AssociationLaunch_ServerInitialization_StopEventID = (TraceEventID) 4008;
        public const TraceEventID AssociationLaunch_FileLaunch_OpenWith_StartEventID = (TraceEventID) 4011;
        public const TraceEventID AssociationLaunch_FileLaunch_OpenWith_StopEventID = (TraceEventID) 4012;
        public const TraceEventID AssociationLaunch_ProtocolLaunch_OpenWith_StartEventID = (TraceEventID) 4013;
        public const TraceEventID AssociationLaunch_ProtocolLaunch_OpenWith_StopEventID = (TraceEventID) 4014;
        public const TraceEventID Tickle_Cache_EntryAdded_StartEventID = (TraceEventID) 4200;
        public const TraceEventID Tickle_Cache_EntryAdded_StopEventID = (TraceEventID) 4201;
        public const TraceEventID Tickle_Cache_IndexExpiredEventID = (TraceEventID) 4206;
        public const TraceEventID Tickle_Cache_PaintFromCache_StartEventID = (TraceEventID) 4208;
        public const TraceEventID Tickle_Cache_PaintFromCache_StopEventID = (TraceEventID) 4209;
        public const TraceEventID Tickle_Cache_SetFreezeAutoTickle_StartEventID = (TraceEventID) 4210;
        public const TraceEventID Tickle_Cache_SetFreezeAutoTickle_StopEventID = (TraceEventID) 4211;
        public const TraceEventID TileDataProvider_UpdateTickleTileEventID = (TraceEventID) 4212;
        public const TraceEventID Tickle_Cache_CopyToCache_StartEventID = (TraceEventID) 4214;
        public const TraceEventID Tickle_Cache_CopyToCache_StopEventID = (TraceEventID) 4215;
        public const TraceEventID Immersive_Monitor_Added_StartEventID = (TraceEventID) 4300;
        public const TraceEventID Immersive_Monitor_Added_StopEventID = (TraceEventID) 4301;
        public const TraceEventID Immersive_Monitor_Added_External_StartEventID = (TraceEventID) 4302;
        public const TraceEventID Immersive_Monitor_Added_External_StopEventID = (TraceEventID) 4303;
        public const TraceEventID Immersive_Monitor_HandleDisplayChange_StartEventID = (TraceEventID) 4312;
        public const TraceEventID Immersive_Monitor_HandleDisplayChange_StopEventID = (TraceEventID) 4313;
        public const TraceEventID Immersive_Monitor_HandleDisplayChange_External_StartEventID = (TraceEventID) 4314;
        public const TraceEventID Immersive_Monitor_HandleDisplayChange_External_StopEventID = (TraceEventID) 4315;
        public const TraceEventID Immersive_Monitor_ConnectObject_StartEventID = (TraceEventID) 4316;
        public const TraceEventID Immersive_Monitor_ConnectObject_StopEventID = (TraceEventID) 4317;
        public const TraceEventID Immersive_Monitor_ReconcileMonitors_StartEventID = (TraceEventID) 4318;
        public const TraceEventID Immersive_Monitor_ReconcileMonitors_StopEventID = (TraceEventID) 4319;
        public const TraceEventID Immersive_Monitor_ReconcileMonitors_NoIdentityEventID = (TraceEventID) 4320;
        public const TraceEventID Immersive_Monitor_SetImmersiveMonitor_StartEventID = (TraceEventID) 4321;
        public const TraceEventID Immersive_Monitor_SetImmersiveMonitor_StopEventID = (TraceEventID) 4322;
        public const TraceEventID Immersive_Monitor_MoveImmersiveMonitor_StartEventID = (TraceEventID) 4323;
        public const TraceEventID Immersive_Monitor_MoveImmersiveMonitor_StopEventID = (TraceEventID) 4324;
        public const TraceEventID Semantic_Zoom_Change_StartEventID = (TraceEventID) 4500;
        public const TraceEventID Semantic_Zoom_Change_StopEventID = (TraceEventID) 4501;
        public const TraceEventID Zoom_Factor_SetEventID = (TraceEventID) 4502;
        public const TraceEventID PerfTrack_Semantic_Swap_StartEventID = (TraceEventID) 4503;
        public const TraceEventID PerfTrack_Semantic_Swap_StopEventID = (TraceEventID) 4504;
        public const TraceEventID StartView_Cache_GetLogoBitmap_StartEventID = (TraceEventID) 4612;
        public const TraceEventID StartView_Cache_GetLogoBitmap_StopEventID = (TraceEventID) 4613;
        public const TraceEventID StartView_Cache_CopyToCache_StartEventID = (TraceEventID) 4614;
        public const TraceEventID StartView_Cache_CopyToCache_StopEventID = (TraceEventID) 4615;
        public const TraceEventID StartView_Cache_CopyBetweenCaches_StartEventID = (TraceEventID) 4616;
        public const TraceEventID StartView_Cache_CopyBetweenCaches_StopEventID = (TraceEventID) 4617;
        public const TraceEventID StartView_Cache_CopyToCaches_StartEventID = (TraceEventID) 4618;
        public const TraceEventID StartView_Cache_CopyToCaches_StopEventID = (TraceEventID) 4619;
        public const TraceEventID StartView_Cache_AddEntry_StartEventID = (TraceEventID) 4620;
        public const TraceEventID StartView_Cache_AddEntry_StopEventID = (TraceEventID) 4621;
        public const TraceEventID StartView_Cache_GetEntryID_StartEventID = (TraceEventID) 4622;
        public const TraceEventID StartView_Cache_GetEntryID_StopEventID = (TraceEventID) 4623;
        public const TraceEventID StartView_Cache_UpdateDataCRC_StartEventID = (TraceEventID) 4624;
        public const TraceEventID StartView_Cache_UpdateDataCRC_StopEventID = (TraceEventID) 4625;
        public const TraceEventID StartView_Cache_ResetData_StartEventID = (TraceEventID) 4626;
        public const TraceEventID StartView_Cache_ResetData_StopEventID = (TraceEventID) 4627;
        public const TraceEventID StartView_Cache_GetBitmap_StartEventID = (TraceEventID) 4628;
        public const TraceEventID StartView_Cache_GetBitmap_StopEventID = (TraceEventID) 4629;
        public const TraceEventID Tiles_Cache_CreateDataFile_StartEventID = (TraceEventID) 4630;
        public const TraceEventID Tiles_Cache_CreateDataFile_StopEventID = (TraceEventID) 4631;
        public const TraceEventID Tiles_Cache_OpenDataFile_StartEventID = (TraceEventID) 4632;
        public const TraceEventID Tiles_Cache_OpenDataFile_StopEventID = (TraceEventID) 4633;
        public const TraceEventID Tiles_Cache_TestDataCRC_StartEventID = (TraceEventID) 4634;
        public const TraceEventID Tiles_Cache_TestDataCRC_StopEventID = (TraceEventID) 4635;
        public const TraceEventID Tiles_Cache_HeaderFull_InfoEventID = (TraceEventID) 4636;
        public const TraceEventID Tiles_Cache_DiskFull_InfoEventID = (TraceEventID) 4637;
        public const TraceEventID Tiles_Cache_ReorderTaskFired_StartEventID = (TraceEventID) 4638;
        public const TraceEventID Tiles_Cache_ReorderTaskFired_StopEventID = (TraceEventID) 4639;
        public const TraceEventID Tiles_Cache_IdleTaskCreate_StartEventID = (TraceEventID) 4640;
        public const TraceEventID Tiles_Cache_IdleTaskCreate_StopEventID = (TraceEventID) 4641;
        public const TraceEventID Tiles_Cache_IdleTaskUpdate_StartEventID = (TraceEventID) 4642;
        public const TraceEventID Tiles_Cache_IdleTaskUpdate_StopEventID = (TraceEventID) 4643;
        public const TraceEventID StartView_Cache_PreLoad_StartEventID = (TraceEventID) 4644;
        public const TraceEventID StartView_Cache_PreLoad_StopEventID = (TraceEventID) 4645;
        public const TraceEventID Tickle_Cache_PreLoad_StartEventID = (TraceEventID) 4646;
        public const TraceEventID Tickle_Cache_PreLoad_StopEventID = (TraceEventID) 4647;
        public const TraceEventID Logo_Cache_GetLogoBitmap_StartEventID = (TraceEventID) 4650;
        public const TraceEventID Logo_Cache_GetLogoBitmap_StopEventID = (TraceEventID) 4651;
        public const TraceEventID Logo_Cache_AddEntry_StartEventID = (TraceEventID) 4652;
        public const TraceEventID Logo_Cache_AddEntry_StopEventID = (TraceEventID) 4653;
        public const TraceEventID Logo_Cache_GetEntryID_StartEventID = (TraceEventID) 4654;
        public const TraceEventID Logo_Cache_GetEntryID_StopEventID = (TraceEventID) 4655;
        public const TraceEventID Logo_Cache_UpdateDataCRC_StartEventID = (TraceEventID) 4656;
        public const TraceEventID Logo_Cache_UpdateDataCRC_StopEventID = (TraceEventID) 4657;
        public const TraceEventID Logo_Cache_PreLoad_StartEventID = (TraceEventID) 4658;
        public const TraceEventID Logo_Cache_PreLoad_StopEventID = (TraceEventID) 4659;
        public const TraceEventID Tiles_Cache_UpdateEntryCRC_StartEventID = (TraceEventID) 4660;
        public const TraceEventID Tiles_Cache_UpdateEntryCRC_StopEventID = (TraceEventID) 4661;
        public const TraceEventID Tiles_Cache_TestEntryCRC_StartEventID = (TraceEventID) 4662;
        public const TraceEventID Tiles_Cache_TestEntryCRC_StopEventID = (TraceEventID) 4663;
        public const TraceEventID StartView_Cache_PaintToBitmap_StartEventID = (TraceEventID) 4664;
        public const TraceEventID StartView_Cache_PaintToBitmap_StopEventID = (TraceEventID) 4665;
        public const TraceEventID Tiles_Cache_Manager_CreateInstance_StartEventID = (TraceEventID) 4666;
        public const TraceEventID Tiles_Cache_Manager_CreateInstance_StopEventID = (TraceEventID) 4667;
        public const TraceEventID Tiles_Cache_Data_CRC_FailureEventID = (TraceEventID) 4668;
        public const TraceEventID Tiles_Cache_Entry_CRC_FailureEventID = (TraceEventID) 4669;
        public const TraceEventID StartView_Cache_UsePreviousCloudScaleFactor_InfoEventID = (TraceEventID) 4670;
        public const TraceEventID Tickle_Cache_UsePreviousCloudScaleFactor_InfoEventID = (TraceEventID) 4671;
        public const TraceEventID PerfTrack_AppActivation_Activate_StartEventID = (TraceEventID) 5901;
        public const TraceEventID PerfTrack_AppActivation_Activate_StopEventID = (TraceEventID) 5902;
        public const TraceEventID AppActivation_ActivateApplicationForContract_StartEventID = (TraceEventID) 5903;
        public const TraceEventID AppActivation_ActivateApplicationForContract_StopEventID = (TraceEventID) 5904;
        public const TraceEventID AppActivation_ActivateApplicationForContractByAppID_StartEventID = (TraceEventID) 5905;
        public const TraceEventID AppActivation_ActivateApplicationForContractByAppID_StopEventID = (TraceEventID) 5906;
        public const TraceEventID AppActivation_ActivateExtensionForContract_StartEventID = (TraceEventID) 5907;
        public const TraceEventID AppActivation_ActivateExtensionForContract_StopEventID = (TraceEventID) 5908;
        public const TraceEventID AppActivation_UnresponsiveApplicationCheck_InfoEventID = (TraceEventID) 5909;
        public const TraceEventID AppActivation_MinimumResolutionCheck_InfoEventID = (TraceEventID) 5911;
        public const TraceEventID AppActivation_CompositionEnabledCheck_InfoEventID = (TraceEventID) 5913;
        public const TraceEventID AppActivation_RPCTimeoutSet_InfoEventID = (TraceEventID) 5915;
        public const TraceEventID AppActivation_SplashScreenFactoried_InfoEventID = (TraceEventID) 5917;
        public const TraceEventID AppActivation_PackageActivationSettings_InfoEventID = (TraceEventID) 5919;
        public const TraceEventID AppActivation_ErrorDialogDisplayed_InfoEventID = (TraceEventID) 5921;
        public const TraceEventID AppActivationLogSuccessEventID = (TraceEventID) 5950;
        public const TraceEventID AppActivationLogNotRegisteredEventID = (TraceEventID) 5951;
        public const TraceEventID AppActivationLogMultipleExtensionsEventID = (TraceEventID) 5952;
        public const TraceEventID AppActivationLogMultiplePackagesEventID = (TraceEventID) 5953;
        public const TraceEventID AppActivationLogUACDisabledEventID = (TraceEventID) 5954;
        public const TraceEventID AppActivationLogFullAdminEventID = (TraceEventID) 5955;
        public const TraceEventID AppActivationLogElevatedEventID = (TraceEventID) 5956;
        public const TraceEventID AppActivationLogMonitorResolutionEventID = (TraceEventID) 5957;
        public const TraceEventID AppActivationLogDWMDisabledEventID = (TraceEventID) 5958;
        public const TraceEventID AppActivationLogTimedOutEventID = (TraceEventID) 5959;
        public const TraceEventID AppActivationLogRemediationEventID = (TraceEventID) 5960;
        public const TraceEventID AppActivationLogGenericFailureEventID = (TraceEventID) 5961;
        public const TraceEventID AppActivationLogGenericFailureNoDetailsEventID = (TraceEventID) 5962;
        public const TraceEventID AppActivationLogDisabledByPolicyEventID = (TraceEventID) 5963;
        public const TraceEventID AppActivationLogAppManagerNotRunningEventID = (TraceEventID) 5964;
        public const TraceEventID SearchPane_WindowCreation_StartEventID = (TraceEventID) 6010;
        public const TraceEventID SearchPane_WindowCreation_StopEventID = (TraceEventID) 6011;
        public const TraceEventID SearchPane_Show_StartEventID = (TraceEventID) 6012;
        public const TraceEventID SearchPane_Show_StopEventID = (TraceEventID) 6013;
        public const TraceEventID SearchPane_Hide_StartEventID = (TraceEventID) 6014;
        public const TraceEventID SearchPane_Hide_StopEventID = (TraceEventID) 6015;
        public const TraceEventID SearchPane_QueryChangedEventID = (TraceEventID) 6020;
        public const TraceEventID SearchPane_SubmitSearchEventID = (TraceEventID) 6021;
        public const TraceEventID SearchPane_SearchButton_PressedEventID = (TraceEventID) 6022;
        public const TraceEventID SearchPane_ClearButton_PressedEventID = (TraceEventID) 6023;
        public const TraceEventID SearchPane_SearchBoxFocusedEventID = (TraceEventID) 6024;
        public const TraceEventID SearchPane_ResultSuggestionInvokedEventID = (TraceEventID) 6025;
        public const TraceEventID SearchPane_SystemScopeClickedEventID = (TraceEventID) 6026;
        public const TraceEventID SearchPane_TypeAhead_SetSuggestions_StartEventID = (TraceEventID) 6050;
        public const TraceEventID SearchPane_TypeAhead_SetSuggestions_StopEventID = (TraceEventID) 6051;
        public const TraceEventID SearchPane_TypeAhead_AppendSuggestions_StartEventID = (TraceEventID) 6052;
        public const TraceEventID SearchPane_TypeAhead_AppendSuggestions_StopEventID = (TraceEventID) 6053;
        public const TraceEventID SearchPane_TypeAhead_AsyncImageDownload_StartEventID = (TraceEventID) 6054;
        public const TraceEventID SearchPane_TypeAhead_AsyncImageDownload_StopEventID = (TraceEventID) 6055;
        public const TraceEventID SearchPane_AppList_Populate_StartEventID = (TraceEventID) 6060;
        public const TraceEventID SearchPane_AppList_Populate_StopEventID = (TraceEventID) 6061;
        public const TraceEventID SearchPane_Counts_CurrentView_ProvidedEventID = (TraceEventID) 6070;
        public const TraceEventID SearchPane_Counts_TasksCancelledEventID = (TraceEventID) 6071;
        public const TraceEventID SearchPane_Counts_DisplayedEventID = (TraceEventID) 6072;
        public const TraceEventID SearchPane_Counts_ClearedEventID = (TraceEventID) 6073;
        public const TraceEventID SearchPane_Counts_Apps_Task_StartEventID = (TraceEventID) 6080;
        public const TraceEventID SearchPane_Counts_Apps_Task_StopEventID = (TraceEventID) 6081;
        public const TraceEventID SearchPane_Counts_Settings_Task_StartEventID = (TraceEventID) 6082;
        public const TraceEventID SearchPane_Counts_Settings_Task_StopEventID = (TraceEventID) 6083;
        public const TraceEventID SearchPane_Counts_Files_Task_StartEventID = (TraceEventID) 6084;
        public const TraceEventID SearchPane_Counts_Files_Task_StopEventID = (TraceEventID) 6085;
        public const TraceEventID AccessibilityDocking_GetAvailableSize_StartEventID = (TraceEventID) 6200;
        public const TraceEventID AccessibilityDocking_GetAvailableSize_StopEventID = (TraceEventID) 6201;
        public const TraceEventID AccessibilityDocking_ReserveDockingSpace_StartEventID = (TraceEventID) 6202;
        public const TraceEventID AccessibilityDocking_ReserveDockingSpace_StopEventID = (TraceEventID) 6203;
        public const TraceEventID AccessibilityDocking_DockWindow_StartEventID = (TraceEventID) 6204;
        public const TraceEventID AccessibilityDocking_DockWindow_StopEventID = (TraceEventID) 6205;
        public const TraceEventID AccessibilityDocking_UndockWindow_StartEventID = (TraceEventID) 6206;
        public const TraceEventID AccessibilityDocking_UndockWindow_StopEventID = (TraceEventID) 6207;
        public const TraceEventID AccessibilityDocking_QueryWorkArea_StartEventID = (TraceEventID) 6208;
        public const TraceEventID AccessibilityDocking_QueryWorkArea_StopEventID = (TraceEventID) 6209;
        public const TraceEventID SplashScreen_Shown_StartEventID = (TraceEventID) 6250;
        public const TraceEventID SplashScreen_Shown_StopEventID = (TraceEventID) 6251;
        public const TraceEventID SplashScreen_ImageLoad_StartEventID = (TraceEventID) 6252;
        public const TraceEventID SplashScreen_ImageLoad_StopEventID = (TraceEventID) 6253;
        public const TraceEventID SplashScreen_Activation_StartEventID = (TraceEventID) 6256;
        public const TraceEventID SplashScreen_Activation_StopEventID = (TraceEventID) 6257;
        public const TraceEventID PerfTrack_SplashScreen_FirstResponse_StartEventID = (TraceEventID) 6258;
        public const TraceEventID PerfTrack_SplashScreen_FirstResponse_StopEventID = (TraceEventID) 6259;
        public const TraceEventID PerfTrack_SplashScreen_AppShown_StartEventID = (TraceEventID) 6260;
        public const TraceEventID PerfTrack_SplashScreen_AppShown_StopEventID = (TraceEventID) 6261;
        public const TraceEventID SplashScreen_LoadContent_InfoEventID = (TraceEventID) 6262;
        public const TraceEventID DockedAppManager_Layout_CompleteEventID = (TraceEventID) 6301;
        public const TraceEventID DockedAppBar_VisibilityChange_ShownEventID = (TraceEventID) 6351;
        public const TraceEventID DockedAppBar_VisibilityChange_HiddenEventID = (TraceEventID) 6352;
        public const TraceEventID AppList_PopulateElementWithExtensionTiles_StartEventID = (TraceEventID) 6400;
        public const TraceEventID AppList_PopulateElementWithExtensionTiles_StopEventID = (TraceEventID) 6401;
        public const TraceEventID AppList_CreateExtensionList_StartEventID = (TraceEventID) 6402;
        public const TraceEventID AppList_CreateExtensionList_StopEventID = (TraceEventID) 6403;
        public const TraceEventID AppList_GetFilteredAndSortedExtensionList_StartEventID = (TraceEventID) 6404;
        public const TraceEventID AppList_GetFilteredAndSortedExtensionList_StopEventID = (TraceEventID) 6405;
        public const TraceEventID AppList_PinItem_StartEventID = (TraceEventID) 6406;
        public const TraceEventID AppList_PinItem_StopEventID = (TraceEventID) 6407;
        public const TraceEventID AppList_UnpinItem_StartEventID = (TraceEventID) 6408;
        public const TraceEventID AppList_UnpinItem_StopEventID = (TraceEventID) 6409;
        public const TraceEventID AppList_HideItem_StartEventID = (TraceEventID) 6410;
        public const TraceEventID AppList_HideItem_StopEventID = (TraceEventID) 6411;
        public const TraceEventID AppList_UnhideItem_StartEventID = (TraceEventID) 6412;
        public const TraceEventID AppList_UnhideItem_StopEventID = (TraceEventID) 6413;
        public const TraceEventID Permissions_SettingChangedEventID = (TraceEventID) 6501;
        public const TraceEventID Permissions_SettingEnabledEventID = (TraceEventID) 6502;
        public const TraceEventID Permissions_SettingSupportedEventID = (TraceEventID) 6503;
        public const TraceEventID Charm_SettingChangedEventID = (TraceEventID) 6505;
        public const TraceEventID Permissions_SettingSyncEventID = (TraceEventID) 6506;
        public const TraceEventID Charm_InputReceivedEventID = (TraceEventID) 6507;
        public const TraceEventID ToastUserSession_LockScreenAttachEventID = (TraceEventID) 6509;
        public const TraceEventID ToastUserSession_LockScreenDisplayEventID = (TraceEventID) 6510;
        public const TraceEventID ToastUserSession_LockScreenCancelEventID = (TraceEventID) 6511;
        public const TraceEventID ToastUserSession_LockScreenActivateEventID = (TraceEventID) 6512;
        public const TraceEventID ToastUserSession_LockScreenDismissEventID = (TraceEventID) 6513;
        public const TraceEventID ToastUserSession_LockScreenFocusEventID = (TraceEventID) 6514;
        public const TraceEventID ToastUserSession_LockScreenSelectionEventID = (TraceEventID) 6515;
        public const TraceEventID ToastUserSession_LockScreenFrozenEventID = (TraceEventID) 6516;
        public const TraceEventID ToastUserSession_LockScreenDetachEventID = (TraceEventID) 6517;
        public const TraceEventID ToastLockScreenSession_ToastManagerCreatedEventID = (TraceEventID) 6519;
        public const TraceEventID ToastLockScreenSession_ToastManagerDestroyedEventID = (TraceEventID) 6520;
        public const TraceEventID ToastLockScreenSession_DisplayToastEventID = (TraceEventID) 6521;
        public const TraceEventID ToastLockScreenSession_CancelToastEventID = (TraceEventID) 6522;
        public const TraceEventID ToastLockScreenSession_FrozenEventID = (TraceEventID) 6523;
        public const TraceEventID ToastLockScreenSession_OrientationChangeEventID = (TraceEventID) 6524;
        public const TraceEventID ToastLockScreenSession_OnSelectionEventID = (TraceEventID) 6525;
        public const TraceEventID ToastLockScreenSession_OnDismissedEventID = (TraceEventID) 6526;
        public const TraceEventID ToastLockScreenSession_OnFocusEventID = (TraceEventID) 6527;
        public const TraceEventID ConnectCharm_Print_StartEventID = (TraceEventID) 6601;
        public const TraceEventID ConnectCharm_Print_StopEventID = (TraceEventID) 6602;
        public const TraceEventID ConnectCharm_PrintTargetsEnum_StartEventID = (TraceEventID) 6606;
        public const TraceEventID ConnectCharm_PrintTargetsEnum_StopEventID = (TraceEventID) 6607;
        public const TraceEventID ConnectCharm_Play_StartEventID = (TraceEventID) 6611;
        public const TraceEventID ConnectCharm_Play_StopEventID = (TraceEventID) 6612;
        public const TraceEventID ConnectCharm_PlayTargetsEnum_StartEventID = (TraceEventID) 6616;
        public const TraceEventID ConnectCharm_PlayTargetsEnum_StopEventID = (TraceEventID) 6617;
        public const TraceEventID ConnectCharm_Project_StartEventID = (TraceEventID) 6621;
        public const TraceEventID ConnectCharm_Project_StopEventID = (TraceEventID) 6622;
        public const TraceEventID ConnectCharm_ProximitySendDisplayUi_StartEventID = (TraceEventID) 6631;
        public const TraceEventID ConnectCharm_ProximitySendDisplayUi_StopEventID = (TraceEventID) 6632;
        public const TraceEventID ConnectCharm_ProximitySendSupportCheck_StartEventID = (TraceEventID) 6636;
        public const TraceEventID ConnectCharm_ProximitySendSupportCheck_StopEventID = (TraceEventID) 6637;
        public const TraceEventID ConnectCharm_DisplayUI_StartEventID = (TraceEventID) 6641;
        public const TraceEventID ConnectCharm_DisplayUI_StopEventID = (TraceEventID) 6642;
        public const TraceEventID ImmersiveLauncherSettingsFlyout_Show_StartEventID = (TraceEventID) 6700;
        public const TraceEventID ImmersiveLauncherSettingsFlyout_Show_StopEventID = (TraceEventID) 6701;
        public const TraceEventID ImmersiveLauncherSettingsFlyout_ClearTiles_InvokedEventID = (TraceEventID) 6706;
        public const TraceEventID ImmersiveLauncherUninstallFlyout_Uninstall_InvokedEventID = (TraceEventID) 6708;
        public const TraceEventID SecondaryTile_APIInvoked_StartEventID = (TraceEventID) 6710;
        public const TraceEventID SecondaryTile_APIInvoked_StopEventID = (TraceEventID) 6711;
        public const TraceEventID SecondaryTile_APIOperation_StartEventID = (TraceEventID) 6712;
        public const TraceEventID SecondaryTile_APIOperation_StopEventID = (TraceEventID) 6713;
        public const TraceEventID SecondaryTile_FlyoutDisplayed_StartEventID = (TraceEventID) 6714;
        public const TraceEventID SecondaryTile_FlyoutDisplayed_StopEventID = (TraceEventID) 6715;
        public const TraceEventID SecondaryTile_FlyoutReadyToDisplayEventID = (TraceEventID) 6716;
        public const TraceEventID SecondaryTile_FlyoutPreviewResultEventID = (TraceEventID) 6718;
        public const TraceEventID ImmersiveOpenWithUI_CreateAndShow_StartEventID = (TraceEventID) 6720;
        public const TraceEventID ImmersiveOpenWithUI_CreateAndShow_StopEventID = (TraceEventID) 6721;
        public const TraceEventID ImmersiveOpenWithUI_ModeEventID = (TraceEventID) 6722;
        public const TraceEventID ImmersiveOpenWithUI_InvokeAppEventID = (TraceEventID) 6723;
        public const TraceEventID ImmersiveOpenWithUI_InvokeWMISEventID = (TraceEventID) 6724;
        public const TraceEventID ImmersiveOpenWithUI_InvokeAppStoreEventID = (TraceEventID) 6725;
        public const TraceEventID ImmersiveLauncherGroupNameFlyout_FlyoutVisibleEventID = (TraceEventID) 6751;
        public const TraceEventID ImmersiveLauncherGroupNameFlyout_GroupName_SaveOperationInvokedEventID = (TraceEventID) 6752;
        public const TraceEventID AppBar_Select_Tile_StartEventID = (TraceEventID) 6760;
        public const TraceEventID AppBar_Select_Tile_StopEventID = (TraceEventID) 6761;
        public const TraceEventID AppBar_Select_Group_StartEventID = (TraceEventID) 6762;
        public const TraceEventID AppBar_Select_Group_StopEventID = (TraceEventID) 6763;
        public const TraceEventID AppBar_Execute_Command_StartEventID = (TraceEventID) 6764;
        public const TraceEventID AppBar_Execute_Command_StopEventID = (TraceEventID) 6765;
        public const TraceEventID AppBar_Update_ButtonsEventID = (TraceEventID) 6766;
        public const TraceEventID AppBar_Show_StartEventID = (TraceEventID) 6767;
        public const TraceEventID AppBar_Show_StopEventID = (TraceEventID) 6768;
        public const TraceEventID TileManagement_PackageInfo_LoadFromManifest_StartEventID = (TraceEventID) 6780;
        public const TraceEventID TileManagement_PackageInfo_LoadFromManifest_StopEventID = (TraceEventID) 6781;
        public const TraceEventID TileManagement_PackageInfo_LoadFromDisk_StartEventID = (TraceEventID) 6782;
        public const TraceEventID TileManagement_PackageInfo_LoadFromDisk_StopEventID = (TraceEventID) 6783;
        public const TraceEventID TileManagement_PackageInfo_VerifyInformation_StartEventID = (TraceEventID) 6784;
        public const TraceEventID TileManagement_PackageInfo_VerifyInformation_StopEventID = (TraceEventID) 6785;
        public const TraceEventID TileManagement_PackageInfo_Revert_StartEventID = (TraceEventID) 6786;
        public const TraceEventID TileManagement_PackageInfo_Revert_StopEventID = (TraceEventID) 6787;
        public const TraceEventID TileManagement_PackageInfo_Commit_StartEventID = (TraceEventID) 6788;
        public const TraceEventID TileManagement_PackageInfo_Commit_StopEventID = (TraceEventID) 6789;
        public const TraceEventID TileManagement_AppTileInfo_InitContentTileRoaming_StartEventID = (TraceEventID) 6790;
        public const TraceEventID TileManagement_AppTileInfo_InitContentTileRoaming_StopEventID = (TraceEventID) 6791;
        public const TraceEventID TileManagement_AppTileInfo_VerifyInformation_StartEventID = (TraceEventID) 6792;
        public const TraceEventID TileManagement_AppTileInfo_VerifyInformation_StopEventID = (TraceEventID) 6793;
        public const TraceEventID TileManagement_AppTileInfo_Revert_StartEventID = (TraceEventID) 6794;
        public const TraceEventID TileManagement_AppTileInfo_Revert_StopEventID = (TraceEventID) 6795;
        public const TraceEventID TileManagement_AppTileInfo_Commit_StartEventID = (TraceEventID) 6796;
        public const TraceEventID TileManagement_AppTileInfo_Commit_StopEventID = (TraceEventID) 6797;
        public const TraceEventID TileManagement_AppTileInfo_PopulateShortcut_StartEventID = (TraceEventID) 6798;
        public const TraceEventID TileManagement_AppTileInfo_PopulateShortcut_StopEventID = (TraceEventID) 6799;
        public const TraceEventID TileManagement_AppTileInfo_CommitShortcut_StartEventID = (TraceEventID) 6800;
        public const TraceEventID TileManagement_AppTileInfo_CommitShortcut_StopEventID = (TraceEventID) 6801;
        public const TraceEventID TileManagement_PackageInfo_InstallStateChangeEventID = (TraceEventID) 6802;
        public const TraceEventID TileManagement_AppTileInfo_Commit_CreateEventID = (TraceEventID) 6803;
        public const TraceEventID TileManagement_AppTileInfo_Commit_UpdateEventID = (TraceEventID) 6804;
        public const TraceEventID TileManagement_AppTileInfo_Commit_DeleteEventID = (TraceEventID) 6805;
        public const TraceEventID TileManagement_AppTileInfo_Commit_TemporaryEventID = (TraceEventID) 6806;
        public const TraceEventID TileManagement_AppTileInfo_Commit_ChangePropValueEventID = (TraceEventID) 6807;
        public const TraceEventID TileManagement_AppTileInfo_Revert_CreateEventID = (TraceEventID) 6808;
        public const TraceEventID TileManagement_AppTileInfo_Revert_UpdateEventID = (TraceEventID) 6809;
        public const TraceEventID TileManagement_AppTileInfo_Revert_DeleteEventID = (TraceEventID) 6810;
        public const TraceEventID LockScreen_AddInvoked_StartEventID = (TraceEventID) 6820;
        public const TraceEventID LockScreen_AddInvoked_StopEventID = (TraceEventID) 6821;
        public const TraceEventID LockScreen_AddOperation_StartEventID = (TraceEventID) 6822;
        public const TraceEventID LockScreen_AddOperation_StopEventID = (TraceEventID) 6823;
        public const TraceEventID LockScreen_AddDialogDisplayed_StartEventID = (TraceEventID) 6824;
        public const TraceEventID LockScreen_AddDialogDisplayed_StopEventID = (TraceEventID) 6825;
        public const TraceEventID LockScreen_AddContentionFlyoutDisplayed_StartEventID = (TraceEventID) 6826;
        public const TraceEventID LockScreen_AddContentionFlyoutDisplayed_StopEventID = (TraceEventID) 6827;
        public const TraceEventID LockScreenAddReturnedCachedValueEventID = (TraceEventID) 6828;
        public const TraceEventID SecondaryTile_FlyoutShowing_StartEventID = (TraceEventID) 6840;
        public const TraceEventID SecondaryTile_FlyoutShowing_StopEventID = (TraceEventID) 6841;
        public const TraceEventID SecondaryTile_DiskOperation_StartEventID = (TraceEventID) 6842;
        public const TraceEventID SecondaryTile_DiskOperation_StopEventID = (TraceEventID) 6843;
        public const TraceEventID Grid_Controller_RealizeOnlyVisible_StartEventID = (TraceEventID) 7000;
        public const TraceEventID Grid_Controller_RealizeOnlyVisible_StopEventID = (TraceEventID) 7001;
        public const TraceEventID Grid_Host_ReloadStateForThemeOrDPITransition_StartEventID = (TraceEventID) 7002;
        public const TraceEventID Grid_Host_ReloadStateForThemeOrDPITransition_StopEventID = (TraceEventID) 7003;
        public const TraceEventID Grid_Selected_Item_Count_Changed_StartEventID = (TraceEventID) 7004;
        public const TraceEventID Grid_Selected_Item_Count_Changed_StopEventID = (TraceEventID) 7005;
        public const TraceEventID Grid_Host_ViewTransition_UpdateTypeEventID = (TraceEventID) 7006;
        public const TraceEventID Grid_Controller_PostPaint_StartEventID = (TraceEventID) 7008;
        public const TraceEventID Grid_Controller_PostPaint_StopEventID = (TraceEventID) 7009;
        public const TraceEventID Grid_Controller_ScheduleFullRealization_StartEventID = (TraceEventID) 7010;
        public const TraceEventID Grid_Controller_ScheduleFullRealization_StopEventID = (TraceEventID) 7011;
        public const TraceEventID Grid_Controller_BeginContentTransition_StartEventID = (TraceEventID) 7012;
        public const TraceEventID Grid_Controller_BeginContentTransition_StopEventID = (TraceEventID) 7013;
        public const TraceEventID Grid_Controller_EndContentTransition_StartEventID = (TraceEventID) 7014;
        public const TraceEventID Grid_Controller_EndContentTransition_StopEventID = (TraceEventID) 7015;
        public const TraceEventID ImmersiveLauncherHelpFlyout_Show_StartEventID = (TraceEventID) 7100;
        public const TraceEventID ImmersiveLauncherHelpFlyout_Show_StopEventID = (TraceEventID) 7101;
        public const TraceEventID ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI_StartEventID = (TraceEventID) 7120;
        public const TraceEventID ImmersiveLauncherUninstallFlyout_RemoveTilesFromUI_StopEventID = (TraceEventID) 7121;
       #endregion

    #region private
    #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.ImmersiveShell
{
    public sealed class ShellStartupTemplateTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal ShellStartupTemplateTraceData(Action<ShellStartupTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ShellStartupTemplateTraceData> Action;
        #endregion
    }
    public sealed class ShellComponentTemplateTraceData : TraceEvent
    {
        public int TableEntryIndex { get { return GetInt32At(0); } }
        public ShellComponentInitializationStep InitalizationStep { get { return (ShellComponentInitializationStep)GetInt32At(4); } }
        public int Result { get { return GetInt32At(8); } }

        #region Private
        internal ShellComponentTemplateTraceData(Action<ShellComponentTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TableEntryIndex", TableEntryIndex);
             XmlAttrib(sb, "InitalizationStep", InitalizationStep);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TableEntryIndex", "InitalizationStep", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TableEntryIndex;
                case 1:
                    return InitalizationStep;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ShellComponentTemplateTraceData> Action;
        #endregion
    }
    public sealed class AppManagerSystemModeChangeTraceData : TraceEvent
    {
        public int SystemModeFrom { get { return GetInt32At(0); } }
        public int SystemSubModeFrom { get { return GetInt32At(4); } }
        public int SystemModeTo { get { return GetInt32At(8); } }
        public int SystemSubModeTo { get { return GetInt32At(12); } }

        #region Private
        internal AppManagerSystemModeChangeTraceData(Action<AppManagerSystemModeChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SystemModeFrom", SystemModeFrom);
             XmlAttrib(sb, "SystemSubModeFrom", SystemSubModeFrom);
             XmlAttrib(sb, "SystemModeTo", SystemModeTo);
             XmlAttrib(sb, "SystemSubModeTo", SystemSubModeTo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SystemModeFrom", "SystemSubModeFrom", "SystemModeTo", "SystemSubModeTo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SystemModeFrom;
                case 1:
                    return SystemSubModeFrom;
                case 2:
                    return SystemModeTo;
                case 3:
                    return SystemSubModeTo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppManagerSystemModeChangeTraceData> Action;
        #endregion
    }
    public sealed class AppManagerZbandChangeTraceData : TraceEvent
    {
        public int ZbandFrom { get { return GetInt32At(0); } }
        public int ZbandTo { get { return GetInt32At(4); } }

        #region Private
        internal AppManagerZbandChangeTraceData(Action<AppManagerZbandChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ZbandFrom", ZbandFrom);
             XmlAttrib(sb, "ZbandTo", ZbandTo);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ZbandFrom", "ZbandTo"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ZbandFrom;
                case 1:
                    return ZbandTo;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppManagerZbandChangeTraceData> Action;
        #endregion
    }
    public sealed class AppManagerListenerIndexTraceData : TraceEvent
    {
        public int ListenerIndex { get { return GetInt32At(0); } }

        #region Private
        internal AppManagerListenerIndexTraceData(Action<AppManagerListenerIndexTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ListenerIndex", ListenerIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ListenerIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ListenerIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppManagerListenerIndexTraceData> Action;
        #endregion
    }
    public sealed class AppManagerListenerIndexStopTraceData : TraceEvent
    {
        public int ListenerIndex { get { return GetInt32At(0); } }
        public int Result { get { return GetInt32At(4); } }

        #region Private
        internal AppManagerListenerIndexStopTraceData(Action<AppManagerListenerIndexStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ListenerIndex", ListenerIndex);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ListenerIndex", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ListenerIndex;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppManagerListenerIndexStopTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellBandLayoutInfoTraceData : TraceEvent
    {
        public int BandID { get { return GetInt32At(0); } }
        public int OuterWorkArea_left { get { return GetInt32At(4); } }
        public int OuterWorkArea_top { get { return GetInt32At(8); } }
        public int OuterWorkArea_right { get { return GetInt32At(12); } }
        public int OuterWorkArea_bottom { get { return GetInt32At(16); } }
        public int InnerWorkArea_left { get { return GetInt32At(20); } }
        public int InnerWorkArea_top { get { return GetInt32At(24); } }
        public int InnerWorkArea_right { get { return GetInt32At(28); } }
        public int InnerWorkArea_bottom { get { return GetInt32At(32); } }

        #region Private
        internal ImmersiveShellBandLayoutInfoTraceData(Action<ImmersiveShellBandLayoutInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 36));
            Debug.Assert(!(Version > 0 && EventDataLength < 36));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BandID", BandID);
             XmlAttrib(sb, "OuterWorkArea_left", OuterWorkArea_left);
             XmlAttrib(sb, "OuterWorkArea_top", OuterWorkArea_top);
             XmlAttrib(sb, "OuterWorkArea_right", OuterWorkArea_right);
             XmlAttrib(sb, "OuterWorkArea_bottom", OuterWorkArea_bottom);
             XmlAttrib(sb, "InnerWorkArea_left", InnerWorkArea_left);
             XmlAttrib(sb, "InnerWorkArea_top", InnerWorkArea_top);
             XmlAttrib(sb, "InnerWorkArea_right", InnerWorkArea_right);
             XmlAttrib(sb, "InnerWorkArea_bottom", InnerWorkArea_bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BandID", "OuterWorkArea_left", "OuterWorkArea_top", "OuterWorkArea_right", "OuterWorkArea_bottom", "InnerWorkArea_left", "InnerWorkArea_top", "InnerWorkArea_right", "InnerWorkArea_bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BandID;
                case 1:
                    return OuterWorkArea_left;
                case 2:
                    return OuterWorkArea_top;
                case 3:
                    return OuterWorkArea_right;
                case 4:
                    return OuterWorkArea_bottom;
                case 5:
                    return InnerWorkArea_left;
                case 6:
                    return InnerWorkArea_top;
                case 7:
                    return InnerWorkArea_right;
                case 8:
                    return InnerWorkArea_bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellBandLayoutInfoTraceData> Action;
        #endregion
    }
    public sealed class LayoutManagerInvalidateTemplateTraceData : TraceEvent
    {
        public ImmersiveShellLayoutInvalidation InvalidationReason { get { return (ImmersiveShellLayoutInvalidation)GetInt32At(0); } }

        #region Private
        internal LayoutManagerInvalidateTemplateTraceData(Action<LayoutManagerInvalidateTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InvalidationReason", InvalidationReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InvalidationReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InvalidationReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LayoutManagerInvalidateTemplateTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellIHMInfoTraceData : TraceEvent
    {
        public Address FocusedHWND { get { return GetHostPointer(0); } }
        public int IHMPosition_left { get { return GetInt32At(HostOffset(4, 1)); } }
        public int IHMPosition_top { get { return GetInt32At(HostOffset(8, 1)); } }
        public int IHMPosition_right { get { return GetInt32At(HostOffset(12, 1)); } }
        public int IHMPosition_bottom { get { return GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal ImmersiveShellIHMInfoTraceData(Action<ImmersiveShellIHMInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "FocusedHWND", FocusedHWND);
             XmlAttrib(sb, "IHMPosition_left", IHMPosition_left);
             XmlAttrib(sb, "IHMPosition_top", IHMPosition_top);
             XmlAttrib(sb, "IHMPosition_right", IHMPosition_right);
             XmlAttrib(sb, "IHMPosition_bottom", IHMPosition_bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FocusedHWND", "IHMPosition_left", "IHMPosition_top", "IHMPosition_right", "IHMPosition_bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FocusedHWND;
                case 1:
                    return IHMPosition_left;
                case 2:
                    return IHMPosition_top;
                case 3:
                    return IHMPosition_right;
                case 4:
                    return IHMPosition_bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellIHMInfoTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellAppIHMNotificationInfoTraceData : TraceEvent
    {
        public int NotificationType { get { return GetInt32At(0); } }
        public Address FocusedHWND { get { return GetHostPointer(4); } }
        public int IHMPosition_left { get { return GetInt32At(HostOffset(8, 1)); } }
        public int IHMPosition_top { get { return GetInt32At(HostOffset(12, 1)); } }
        public int IHMPosition_right { get { return GetInt32At(HostOffset(16, 1)); } }
        public int IHMPosition_bottom { get { return GetInt32At(HostOffset(20, 1)); } }

        #region Private
        internal ImmersiveShellAppIHMNotificationInfoTraceData(Action<ImmersiveShellAppIHMNotificationInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(24, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(24, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationType", NotificationType);
             XmlAttribHex(sb, "FocusedHWND", FocusedHWND);
             XmlAttrib(sb, "IHMPosition_left", IHMPosition_left);
             XmlAttrib(sb, "IHMPosition_top", IHMPosition_top);
             XmlAttrib(sb, "IHMPosition_right", IHMPosition_right);
             XmlAttrib(sb, "IHMPosition_bottom", IHMPosition_bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationType", "FocusedHWND", "IHMPosition_left", "IHMPosition_top", "IHMPosition_right", "IHMPosition_bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationType;
                case 1:
                    return FocusedHWND;
                case 2:
                    return IHMPosition_left;
                case 3:
                    return IHMPosition_top;
                case 4:
                    return IHMPosition_right;
                case 5:
                    return IHMPosition_bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellAppIHMNotificationInfoTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellAppManagerStateChangeTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public ImmersiveShellAppManagerApplicationStateChange_ ApplicationState { get { return (ImmersiveShellAppManagerApplicationStateChange_)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal ImmersiveShellAppManagerStateChangeTraceData(Action<ImmersiveShellAppManagerStateChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "ApplicationState", ApplicationState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "ApplicationState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return ApplicationState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellAppManagerStateChangeTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellUIDragTemplateTraceData : TraceEvent
    {
        public int Left { get { return GetInt32At(0); } }
        public int Top { get { return GetInt32At(4); } }
        public string UIName { get { return GetUnicodeStringAt(8); } }

        #region Private
        internal ImmersiveShellUIDragTemplateTraceData(Action<ImmersiveShellUIDragTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "UIName", UIName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Left", "Top", "UIName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Left;
                case 1:
                    return Top;
                case 2:
                    return UIName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellUIDragTemplateTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationE2ETemplateTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileNotificationE2ETemplateTraceData(Action<TileNotificationE2ETemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationE2ETemplateTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveShellAppSpaceParseXMLErrorTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int NotificationID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int HRESULT { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public string Node { get { return GetUnicodeStringAt(SkipUnicodeString(0)+8); } }
        public int Line { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+8)); } }
        public int Position { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)+8)+4); } }

        #region Private
        internal ImmersiveShellAppSpaceParseXMLErrorTraceData(Action<ImmersiveShellAppSpaceParseXMLErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+8)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+8)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             XmlAttrib(sb, "HRESULT", HRESULT);
             XmlAttrib(sb, "Node", Node);
             XmlAttrib(sb, "Line", Line);
             XmlAttrib(sb, "Position", Position);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "NotificationID", "HRESULT", "Node", "Line", "Position"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return NotificationID;
                case 2:
                    return HRESULT;
                case 3:
                    return Node;
                case 4:
                    return Line;
                case 5:
                    return Position;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveShellAppSpaceParseXMLErrorTraceData> Action;
        #endregion
    }
    public sealed class TileXMLProcessMRTResourceTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int HRESULT { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public string Unprocessed_Resource_String { get { return GetUnicodeStringAt(SkipUnicodeString(0)+8); } }
        public string Processed_Resource_String { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+8)); } }

        #region Private
        internal TileXMLProcessMRTResourceTraceData(Action<TileXMLProcessMRTResourceTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+8))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "HRESULT", HRESULT);
             XmlAttrib(sb, "Unprocessed Resource String", Unprocessed_Resource_String);
             XmlAttrib(sb, "Processed Resource String", Processed_Resource_String);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "HRESULT", "Unprocessed Resource String", "Processed Resource String"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return HRESULT;
                case 3:
                    return Unprocessed_Resource_String;
                case 4:
                    return Processed_Resource_String;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileXMLProcessMRTResourceTraceData> Action;
        #endregion
    }
    public sealed class TileXMLBadNodeTemplateTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string BadNode { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal TileXMLBadNodeTemplateTraceData(Action<TileXMLBadNodeTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "BadNode", BadNode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "BadNode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return BadNode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileXMLBadNodeTemplateTraceData> Action;
        #endregion
    }
    public sealed class AppPositionerImmersiveAppInfoTraceData : TraceEvent
    {
        public int Duration { get { return GetInt32At(0); } }
        public int Flags { get { return GetInt32At(4); } }
        public string PackageFullName { get { return GetUnicodeStringAt(8); } }
        public string AppUserModelId { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal AppPositionerImmersiveAppInfoTraceData(Action<AppPositionerImmersiveAppInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Duration", Duration);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "AppUserModelId", AppUserModelId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Duration", "Flags", "PackageFullName", "AppUserModelId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Duration;
                case 1:
                    return Flags;
                case 2:
                    return PackageFullName;
                case 3:
                    return AppUserModelId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppPositionerImmersiveAppInfoTraceData> Action;
        #endregion
    }
    public sealed class BackstackAppInfoTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal BackstackAppInfoTraceData(Action<BackstackAppInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BackstackAppInfoTraceData> Action;
        #endregion
    }
    public sealed class SwitchModeInfoTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public int Location { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal SwitchModeInfoTraceData(Action<SwitchModeInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "Location", Location);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "Location"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return Location;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SwitchModeInfoTraceData> Action;
        #endregion
    }
    public sealed class DropFeedbackInfoTraceData : TraceEvent
    {
        new public int ID { get { return GetInt32At(0); } }
        public int Left { get { return GetInt32At(4); } }
        public int Top { get { return GetInt32At(8); } }
        public int Right { get { return GetInt32At(12); } }
        public int Bottom { get { return GetInt32At(16); } }

        #region Private
        internal DropFeedbackInfoTraceData(Action<DropFeedbackInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ID", ID);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "Right", Right);
             XmlAttrib(sb, "Bottom", Bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ID", "Left", "Top", "Right", "Bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ID;
                case 1:
                    return Left;
                case 2:
                    return Top;
                case 3:
                    return Right;
                case 4:
                    return Bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DropFeedbackInfoTraceData> Action;
        #endregion
    }
    public sealed class DragVisualInfoTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public int Mode { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Left { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int Top { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        public int Right { get { return GetInt32At(SkipUnicodeString(0)+12); } }
        public int Bottom { get { return GetInt32At(SkipUnicodeString(0)+16); } }

        #region Private
        internal DragVisualInfoTraceData(Action<DragVisualInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+20));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "Mode", Mode);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "Right", Right);
             XmlAttrib(sb, "Bottom", Bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "Mode", "Left", "Top", "Right", "Bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return Mode;
                case 2:
                    return Left;
                case 3:
                    return Top;
                case 4:
                    return Right;
                case 5:
                    return Bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DragVisualInfoTraceData> Action;
        #endregion
    }
    public sealed class PlaybackManagerSessionIdTraceData : TraceEvent
    {
        public int SessionId { get { return GetInt32At(0); } }

        #region Private
        internal PlaybackManagerSessionIdTraceData(Action<PlaybackManagerSessionIdTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlaybackManagerSessionIdTraceData> Action;
        #endregion
    }
    public sealed class PlaybackManagerResultSessionIdAndQueueSizeTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }
        public int SessionId { get { return GetInt32At(4); } }
        public int QueueSize { get { return GetInt32At(8); } }

        #region Private
        internal PlaybackManagerResultSessionIdAndQueueSizeTraceData(Action<PlaybackManagerResultSessionIdAndQueueSizeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             XmlAttrib(sb, "SessionId", SessionId);
             XmlAttrib(sb, "QueueSize", QueueSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result", "SessionId", "QueueSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                case 1:
                    return SessionId;
                case 2:
                    return QueueSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlaybackManagerResultSessionIdAndQueueSizeTraceData> Action;
        #endregion
    }
    public sealed class PlaybackManagerResultSessionIdAndStateTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }
        public int SessionId { get { return GetInt32At(4); } }
        public int Previous_PlayState { get { return GetInt32At(8); } }
        public int Current_PlayState { get { return GetInt32At(12); } }
        public int Previous_MuteState { get { return GetInt32At(16); } }
        public int Current_MuteState { get { return GetInt32At(20); } }

        #region Private
        internal PlaybackManagerResultSessionIdAndStateTraceData(Action<PlaybackManagerResultSessionIdAndStateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             XmlAttrib(sb, "SessionId", SessionId);
             XmlAttrib(sb, "Previous PlayState", Previous_PlayState);
             XmlAttrib(sb, "Current PlayState", Current_PlayState);
             XmlAttrib(sb, "Previous MuteState", Previous_MuteState);
             XmlAttrib(sb, "Current MuteState", Current_MuteState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result", "SessionId", "Previous PlayState", "Current PlayState", "Previous MuteState", "Current MuteState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                case 1:
                    return SessionId;
                case 2:
                    return Previous_PlayState;
                case 3:
                    return Current_PlayState;
                case 4:
                    return Previous_MuteState;
                case 5:
                    return Current_MuteState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlaybackManagerResultSessionIdAndStateTraceData> Action;
        #endregion
    }
    public sealed class PlaybackManagerResultAndSessionIdTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }
        public int SessionId { get { return GetInt32At(4); } }

        #region Private
        internal PlaybackManagerResultAndSessionIdTraceData(Action<PlaybackManagerResultAndSessionIdTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             XmlAttrib(sb, "SessionId", SessionId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result", "SessionId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                case 1:
                    return SessionId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlaybackManagerResultAndSessionIdTraceData> Action;
        #endregion
    }
    public sealed class PlaybackManagerResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal PlaybackManagerResultTraceData(Action<PlaybackManagerResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PlaybackManagerResultTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderAppIDTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal AppsFolderAppIDTraceData(Action<AppsFolderAppIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderAppIDTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderMoveItemTraceData : TraceEvent
    {
        public string ToMoveAppID { get { return GetUnicodeStringAt(0); } }
        public string ReferenceAppID { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal AppsFolderMoveItemTraceData(Action<AppsFolderMoveItemTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ToMoveAppID", ToMoveAppID);
             XmlAttrib(sb, "ReferenceAppID", ReferenceAppID);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ToMoveAppID", "ReferenceAppID", "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ToMoveAppID;
                case 1:
                    return ReferenceAppID;
                case 2:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderMoveItemTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderPropertyStoreTypeTraceData : TraceEvent
    {
        public int StoreType { get { return GetInt32At(0); } }

        #region Private
        internal AppsFolderPropertyStoreTypeTraceData(Action<AppsFolderPropertyStoreTypeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "StoreType", StoreType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "StoreType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return StoreType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderPropertyStoreTypeTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderImmersiveAppOpenVerbTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public string Arguments { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal AppsFolderImmersiveAppOpenVerbTraceData(Action<AppsFolderImmersiveAppOpenVerbTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "Arguments", Arguments);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "Arguments"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return Arguments;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderImmersiveAppOpenVerbTraceData> Action;
        #endregion
    }
    public sealed class AppIDAndEventTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int Event { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal AppIDAndEventTraceData(Action<AppIDAndEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "Event", Event);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "Event"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return Event;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppIDAndEventTraceData> Action;
        #endregion
    }
    public sealed class DualModeVerbBeforeExecuteTraceData : TraceEvent
    {
        public int AHE_TYPE { get { return GetInt32At(0); } }
        public int HRESULT { get { return GetInt32At(4); } }

        #region Private
        internal DualModeVerbBeforeExecuteTraceData(Action<DualModeVerbBeforeExecuteTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AHE_TYPE", AHE_TYPE);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AHE_TYPE", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AHE_TYPE;
                case 1:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DualModeVerbBeforeExecuteTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public M_ImmersiveAppLaunchExecutionStates ExecutionState { get { return (M_ImmersiveAppLaunchExecutionStates)GetInt32At(SkipUnicodeString(0)); } }
        public M_LauncherAppStates LauncherAppState { get { return (M_LauncherAppStates)GetInt32At(SkipUnicodeString(0)+4); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)+8); } }

        #region Private
        internal AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData(Action<AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "ExecutionState", ExecutionState);
             XmlAttrib(sb, "LauncherAppState", LauncherAppState);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "ExecutionState", "LauncherAppState", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return ExecutionState;
                case 2:
                    return LauncherAppState;
                case 3:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderImmersiveAppOpenVerbExecutionAttemptResultTraceData> Action;
        #endregion
    }
    public sealed class AppsFolderImmersiveAppOpenVerbResultTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public M_ImmersiveAppLaunchExecutionStates ExecutionState { get { return (M_ImmersiveAppLaunchExecutionStates)GetInt32At(SkipUnicodeString(0)); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal AppsFolderImmersiveAppOpenVerbResultTraceData(Action<AppsFolderImmersiveAppOpenVerbResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "ExecutionState", ExecutionState);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "ExecutionState", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return ExecutionState;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppsFolderImmersiveAppOpenVerbResultTraceData> Action;
        #endregion
    }
    public sealed class ToastOperationStatusTraceData : TraceEvent
    {
        public int OperationStatus { get { return GetInt32At(0); } }

        #region Private
        internal ToastOperationStatusTraceData(Action<ToastOperationStatusTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "OperationStatus", OperationStatus);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OperationStatus"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OperationStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastOperationStatusTraceData> Action;
        #endregion
    }
    public sealed class ToastStartPositionInfoTraceData : TraceEvent
    {
        public int X_Position { get { return GetInt32At(0); } }
        public int Y_Position { get { return GetInt32At(4); } }

        #region Private
        internal ToastStartPositionInfoTraceData(Action<ToastStartPositionInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "X-Position", X_Position);
             XmlAttrib(sb, "Y-Position", Y_Position);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "X-Position", "Y-Position"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return X_Position;
                case 1:
                    return Y_Position;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastStartPositionInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastDisplayLimitInfoTraceData : TraceEvent
    {
        public int DisplayLimit { get { return GetInt32At(0); } }

        #region Private
        internal ToastDisplayLimitInfoTraceData(Action<ToastDisplayLimitInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DisplayLimit", DisplayLimit);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DisplayLimit"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DisplayLimit;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastDisplayLimitInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastOpaqueStateDurationInfoTraceData : TraceEvent
    {
        public int OpaqueStateDuration { get { return GetInt32At(0); } }

        #region Private
        internal ToastOpaqueStateDurationInfoTraceData(Action<ToastOpaqueStateDurationInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "OpaqueStateDuration", OpaqueStateDuration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "OpaqueStateDuration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return OpaqueStateDuration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastOpaqueStateDurationInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastSizeInfoTraceData : TraceEvent
    {
        public int ToastHeight { get { return GetInt32At(0); } }
        public int ToastWidth { get { return GetInt32At(4); } }

        #region Private
        internal ToastSizeInfoTraceData(Action<ToastSizeInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ToastHeight", ToastHeight);
             XmlAttrib(sb, "ToastWidth", ToastWidth);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ToastHeight", "ToastWidth"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ToastHeight;
                case 1:
                    return ToastWidth;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastSizeInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastNotificationInfoTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public bool IsSpecialToast { get { return GetInt32At(4) != 0; } }

        #region Private
        internal ToastNotificationInfoTraceData(Action<ToastNotificationInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "IsSpecialToast", IsSpecialToast);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "IsSpecialToast"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return IsSpecialToast;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastNotificationInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastNotificationProcessingStatusTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public int OperationStatus { get { return GetInt32At(4); } }
        public bool IsSpecialToast { get { return GetInt32At(8) != 0; } }
        public ImmersiveShellToastAppType AppType { get { return (ImmersiveShellToastAppType)GetInt32At(12); } }

        #region Private
        internal ToastNotificationProcessingStatusTraceData(Action<ToastNotificationProcessingStatusTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttribHex(sb, "OperationStatus", OperationStatus);
             XmlAttrib(sb, "IsSpecialToast", IsSpecialToast);
             XmlAttrib(sb, "AppType", AppType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "OperationStatus", "IsSpecialToast", "AppType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return OperationStatus;
                case 2:
                    return IsSpecialToast;
                case 3:
                    return AppType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastNotificationProcessingStatusTraceData> Action;
        #endregion
    }
    public sealed class ToastPositionInfoTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public int X_Position { get { return GetInt32At(4); } }
        public int Y_Position { get { return GetInt32At(8); } }

        #region Private
        internal ToastPositionInfoTraceData(Action<ToastPositionInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "X-Position", X_Position);
             XmlAttrib(sb, "Y-Position", Y_Position);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "X-Position", "Y-Position"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return X_Position;
                case 2:
                    return Y_Position;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastPositionInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastDisplayIndexInfoTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public int DisplayIndex { get { return GetInt32At(4); } }

        #region Private
        internal ToastDisplayIndexInfoTraceData(Action<ToastDisplayIndexInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "DisplayIndex", DisplayIndex);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "DisplayIndex"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return DisplayIndex;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastDisplayIndexInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastNotificationActivationInfoTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public bool IsSpecialToast { get { return GetInt32At(4) != 0; } }
        public ImmersiveShellToastAppType AppType { get { return (ImmersiveShellToastAppType)GetInt32At(8); } }

        #region Private
        internal ToastNotificationActivationInfoTraceData(Action<ToastNotificationActivationInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "IsSpecialToast", IsSpecialToast);
             XmlAttrib(sb, "AppType", AppType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "IsSpecialToast", "AppType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return IsSpecialToast;
                case 2:
                    return AppType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastNotificationActivationInfoTraceData> Action;
        #endregion
    }
    public sealed class ToastAudioPlayStartTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public string FilePath { get { return GetUnicodeStringAt(4); } }
        public bool IsSpecialToast { get { return GetInt32At(SkipUnicodeString(4)) != 0; } }

        #region Private
        internal ToastAudioPlayStartTraceData(Action<ToastAudioPlayStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "IsSpecialToast", IsSpecialToast);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "FilePath", "IsSpecialToast"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return FilePath;
                case 2:
                    return IsSpecialToast;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastAudioPlayStartTraceData> Action;
        #endregion
    }
    public sealed class ToastAudioPlayBusyTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public string FilePath { get { return GetUnicodeStringAt(4); } }
        public int PlayingNotificationId { get { return GetInt32At(SkipUnicodeString(4)); } }

        #region Private
        internal ToastAudioPlayBusyTraceData(Action<ToastAudioPlayBusyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "FilePath", FilePath);
             XmlAttrib(sb, "PlayingNotificationId", PlayingNotificationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "FilePath", "PlayingNotificationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return FilePath;
                case 2:
                    return PlayingNotificationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastAudioPlayBusyTraceData> Action;
        #endregion
    }
    public sealed class ToastXMLParsingErrorTraceData : TraceEvent
    {
        public int NotificationId { get { return GetInt32At(0); } }
        public int OperationStatus { get { return GetInt32At(4); } }
        public bool IsSpecialToast { get { return GetInt32At(8) != 0; } }
        public ImmersiveShellToastAppType AppType { get { return (ImmersiveShellToastAppType)GetInt32At(12); } }
        public string Payload { get { return GetUnicodeStringAt(16); } }

        #region Private
        internal ToastXMLParsingErrorTraceData(Action<ToastXMLParsingErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(16)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(16)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttribHex(sb, "OperationStatus", OperationStatus);
             XmlAttrib(sb, "IsSpecialToast", IsSpecialToast);
             XmlAttrib(sb, "AppType", AppType);
             XmlAttrib(sb, "Payload", Payload);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NotificationId", "OperationStatus", "IsSpecialToast", "AppType", "Payload"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NotificationId;
                case 1:
                    return OperationStatus;
                case 2:
                    return IsSpecialToast;
                case 3:
                    return AppType;
                case 4:
                    return Payload;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ToastXMLParsingErrorTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal TileNotificationsResultTraceData(Action<TileNotificationsResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsResultTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsResultAndIDListTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }
        public string IDList { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal TileNotificationsResultAndIDListTraceData(Action<TileNotificationsResultAndIDListTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             XmlAttrib(sb, "IDList", IDList);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result", "IDList"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                case 1:
                    return IDList;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsResultAndIDListTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsResultArrivedTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal TileNotificationsResultArrivedTraceData(Action<TileNotificationsResultArrivedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsResultArrivedTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsPayloadTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int NotificationID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string Payload { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal TileNotificationsPayloadTraceData(Action<TileNotificationsPayloadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             XmlAttrib(sb, "Payload", Payload);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "NotificationID", "Payload"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return NotificationID;
                case 2:
                    return Payload;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsPayloadTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsResourceRequestTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int NotificationID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string ResourceIDList { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }
        public string URLList { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+4)); } }

        #region Private
        internal TileNotificationsResourceRequestTraceData(Action<TileNotificationsResourceRequestTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+4))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             XmlAttrib(sb, "ResourceIDList", ResourceIDList);
             XmlAttrib(sb, "URLList", URLList);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "NotificationID", "ResourceIDList", "URLList"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return NotificationID;
                case 2:
                    return ResourceIDList;
                case 3:
                    return URLList;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsResourceRequestTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsResultAndAppIdTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }
        public string AppID { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal TileNotificationsResultAndAppIdTraceData(Action<TileNotificationsResultAndAppIdTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result", "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                case 1:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsResultAndAppIdTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsFailedInstallTraceData : TraceEvent
    {
        public string TileID { get { return GetUnicodeStringAt(0); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileNotificationsFailedInstallTraceData(Action<TileNotificationsFailedInstallTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TileID", TileID);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TileID", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TileID;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsFailedInstallTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsBadgeTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int Value { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileNotificationsBadgeTraceData(Action<TileNotificationsBadgeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "Value", Value);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "Value"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return Value;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsBadgeTraceData> Action;
        #endregion
    }
    public sealed class TileClearTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int NotificationType { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileClearTraceData(Action<TileClearTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "NotificationType", NotificationType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "NotificationType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return NotificationType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileClearTraceData> Action;
        #endregion
    }
    public sealed class CreateMRTResourceContextStartTraceData : TraceEvent
    {
        public string Language { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal CreateMRTResourceContextStartTraceData(Action<CreateMRTResourceContextStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Language", Language);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Language"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Language;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateMRTResourceContextStartTraceData> Action;
        #endregion
    }
    public sealed class CreateMRTResourceContextStopTraceData : TraceEvent
    {
        public string Language { get { return GetUnicodeStringAt(0); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal CreateMRTResourceContextStopTraceData(Action<CreateMRTResourceContextStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Language", Language);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Language", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Language;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateMRTResourceContextStopTraceData> Action;
        #endregion
    }
    public sealed class CreateDecoratedFileWithDpisStartTraceData : TraceEvent
    {
        public int DPI_Context { get { return GetInt32At(0); } }
        public int Theme { get { return GetInt32At(4); } }
        public string Path { get { return GetUnicodeStringAt(8); } }
        public string DPIs { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal CreateDecoratedFileWithDpisStartTraceData(Action<CreateDecoratedFileWithDpisStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DPI Context", DPI_Context);
             XmlAttrib(sb, "Theme", Theme);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "DPIs", DPIs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DPI Context", "Theme", "Path", "DPIs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DPI_Context;
                case 1:
                    return Theme;
                case 2:
                    return Path;
                case 3:
                    return DPIs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateDecoratedFileWithDpisStartTraceData> Action;
        #endregion
    }
    public sealed class CreateDecoratedFileWithDpisStopTraceData : TraceEvent
    {
        public int DPI_Context { get { return GetInt32At(0); } }
        public int Theme { get { return GetInt32At(4); } }
        public string Path { get { return GetUnicodeStringAt(8); } }
        public string DPIs { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(8))); } }

        #region Private
        internal CreateDecoratedFileWithDpisStopTraceData(Action<CreateDecoratedFileWithDpisStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DPI Context", DPI_Context);
             XmlAttrib(sb, "Theme", Theme);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "DPIs", DPIs);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DPI Context", "Theme", "Path", "DPIs", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DPI_Context;
                case 1:
                    return Theme;
                case 2:
                    return Path;
                case 3:
                    return DPIs;
                case 4:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateDecoratedFileWithDpisStopTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationsAppIdTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TileNotificationsAppIdTraceData(Action<TileNotificationsAppIdTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationsAppIdTraceData> Action;
        #endregion
    }
    public sealed class ActionSpacePaneCharmBarTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int CountEnabled { get { return GetInt32At(4); } }

        #region Private
        internal ActionSpacePaneCharmBarTraceData(Action<ActionSpacePaneCharmBarTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "CountEnabled", CountEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "CountEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return CountEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActionSpacePaneCharmBarTraceData> Action;
        #endregion
    }
    public sealed class ActionSpacePaneCharmTraceData : TraceEvent
    {
        public int CharmID { get { return GetInt32At(0); } }

        #region Private
        internal ActionSpacePaneCharmTraceData(Action<ActionSpacePaneCharmTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CharmID", CharmID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CharmID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CharmID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActionSpacePaneCharmTraceData> Action;
        #endregion
    }
    public sealed class ActionSpacePaneResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal ActionSpacePaneResultTraceData(Action<ActionSpacePaneResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActionSpacePaneResultTraceData> Action;
        #endregion
    }
    public sealed class ActionSpacePaneFlowTraceData : TraceEvent
    {
        public int FlowID { get { return GetInt32At(0); } }

        #region Private
        internal ActionSpacePaneFlowTraceData(Action<ActionSpacePaneFlowTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FlowID", FlowID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FlowID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FlowID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActionSpacePaneFlowTraceData> Action;
        #endregion
    }
    public sealed class GridRealizationInfoTraceData : TraceEvent
    {
        public int Region1Begin { get { return GetInt32At(0); } }
        public int Region1End { get { return GetInt32At(4); } }
        public int Region2Begin { get { return GetInt32At(8); } }
        public int Region2End { get { return GetInt32At(12); } }
        public int RealizedCount { get { return GetInt32At(16); } }
        public int VisibleCount { get { return GetInt32At(20); } }

        #region Private
        internal GridRealizationInfoTraceData(Action<GridRealizationInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Region1Begin", Region1Begin);
             XmlAttrib(sb, "Region1End", Region1End);
             XmlAttrib(sb, "Region2Begin", Region2Begin);
             XmlAttrib(sb, "Region2End", Region2End);
             XmlAttrib(sb, "RealizedCount", RealizedCount);
             XmlAttrib(sb, "VisibleCount", VisibleCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Region1Begin", "Region1End", "Region2Begin", "Region2End", "RealizedCount", "VisibleCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Region1Begin;
                case 1:
                    return Region1End;
                case 2:
                    return Region2Begin;
                case 3:
                    return Region2End;
                case 4:
                    return RealizedCount;
                case 5:
                    return VisibleCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridRealizationInfoTraceData> Action;
        #endregion
    }
    public sealed class GridAppIDTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GridAppIDTraceData(Action<GridAppIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridAppIDTraceData> Action;
        #endregion
    }
    public sealed class GridGroupIDTraceData : TraceEvent
    {
        public long GroupID { get { return GetInt64At(0); } }

        #region Private
        internal GridGroupIDTraceData(Action<GridGroupIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GroupID", GroupID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GroupID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GroupID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridGroupIDTraceData> Action;
        #endregion
    }
    public sealed class GridTileNavigationTraceData : TraceEvent
    {
        public int Direction { get { return GetInt32At(0); } }
        public string OldAppID { get { return GetUnicodeStringAt(4); } }
        public string NewAppID { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal GridTileNavigationTraceData(Action<GridTileNavigationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Direction", Direction);
             XmlAttrib(sb, "OldAppID", OldAppID);
             XmlAttrib(sb, "NewAppID", NewAppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Direction", "OldAppID", "NewAppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Direction;
                case 1:
                    return OldAppID;
                case 2:
                    return NewAppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileNavigationTraceData> Action;
        #endregion
    }
    public sealed class GridScrollPositionTraceData : TraceEvent
    {
        public int XOffset { get { return GetInt32At(0); } }

        #region Private
        internal GridScrollPositionTraceData(Action<GridScrollPositionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "XOffset", XOffset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "XOffset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return XOffset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridScrollPositionTraceData> Action;
        #endregion
    }
    public sealed class GridTileActivationTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public string ActivationParameters { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal GridTileActivationTraceData(Action<GridTileActivationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "ActivationParameters", ActivationParameters);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "ActivationParameters"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return ActivationParameters;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileActivationTraceData> Action;
        #endregion
    }
    public sealed class GridTilePropertyFailureTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public Guid PropertyKeyFmtid { get { return GetGuidAt(SkipUnicodeString(0)); } }
        public int PropertyKeyPid { get { return GetInt32At(SkipUnicodeString(0)+16); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)+20); } }

        #region Private
        internal GridTilePropertyFailureTraceData(Action<GridTilePropertyFailureTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "PropertyKeyFmtid", PropertyKeyFmtid);
             XmlAttrib(sb, "PropertyKeyPid", PropertyKeyPid);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "PropertyKeyFmtid", "PropertyKeyPid", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return PropertyKeyFmtid;
                case 2:
                    return PropertyKeyPid;
                case 3:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTilePropertyFailureTraceData> Action;
        #endregion
    }
    public sealed class GridTileFailureTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal GridTileFailureTraceData(Action<GridTileFailureTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileFailureTraceData> Action;
        #endregion
    }
    public sealed class GridItemCollectionEnumerationTraceData : TraceEvent
    {
        public int ItemCount { get { return GetInt32At(0); } }

        #region Private
        internal GridItemCollectionEnumerationTraceData(Action<GridItemCollectionEnumerationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ItemCount", ItemCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ItemCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ItemCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridItemCollectionEnumerationTraceData> Action;
        #endregion
    }
    public sealed class GridTileExecuteTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public string Verb { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal GridTileExecuteTraceData(Action<GridTileExecuteTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "Verb", Verb);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "Verb"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return Verb;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileExecuteTraceData> Action;
        #endregion
    }
    public sealed class GridModelSetRealizedTilesTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal GridModelSetRealizedTilesTraceData(Action<GridModelSetRealizedTilesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridModelSetRealizedTilesTraceData> Action;
        #endregion
    }
    public sealed class GridMoveItemTraceData : TraceEvent
    {
        public string RearrangingAppID { get { return GetUnicodeStringAt(0); } }
        public string UnderAppID { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int MoveLocation { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal GridMoveItemTraceData(Action<GridMoveItemTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RearrangingAppID", RearrangingAppID);
             XmlAttrib(sb, "UnderAppID", UnderAppID);
             XmlAttrib(sb, "MoveLocation", MoveLocation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RearrangingAppID", "UnderAppID", "MoveLocation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RearrangingAppID;
                case 1:
                    return UnderAppID;
                case 2:
                    return MoveLocation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridMoveItemTraceData> Action;
        #endregion
    }
    public sealed class GridOnTileTickledTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GridOnTileTickledTraceData(Action<GridOnTileTickledTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridOnTileTickledTraceData> Action;
        #endregion
    }
    public sealed class GridViewOnAutoTickleResultTraceData : TraceEvent
    {
        public int PeekCount { get { return GetInt32At(0); } }
        public int TickleCount { get { return GetInt32At(4); } }

        #region Private
        internal GridViewOnAutoTickleResultTraceData(Action<GridViewOnAutoTickleResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PeekCount", PeekCount);
             XmlAttrib(sb, "TickleCount", TickleCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PeekCount", "TickleCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PeekCount;
                case 1:
                    return TickleCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridViewOnAutoTickleResultTraceData> Action;
        #endregion
    }
    public sealed class GridAreTicklesPresentResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal GridAreTicklesPresentResultTraceData(Action<GridAreTicklesPresentResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridAreTicklesPresentResultTraceData> Action;
        #endregion
    }
    public sealed class GridTileShellItemCreationFailureTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GridTileShellItemCreationFailureTraceData(Action<GridTileShellItemCreationFailureTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileShellItemCreationFailureTraceData> Action;
        #endregion
    }
    public sealed class GridTileVerbUninstallTraceData : TraceEvent
    {
        public string PackageMoniker { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GridTileVerbUninstallTraceData(Action<GridTileVerbUninstallTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageMoniker", PackageMoniker);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageMoniker"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageMoniker;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileVerbUninstallTraceData> Action;
        #endregion
    }
    public sealed class GridOnCollectionChangedTraceData : TraceEvent
    {
        new public int Version { get { return GetInt32At(0); } }
        public int State { get { return GetInt32At(4); } }

        #region Private
        internal GridOnCollectionChangedTraceData(Action<GridOnCollectionChangedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "State", State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridOnCollectionChangedTraceData> Action;
        #endregion
    }
    public sealed class GridOnGetCountDoneTraceData : TraceEvent
    {
        new public int Version { get { return GetInt32At(0); } }
        public int CountType { get { return GetInt32At(4); } }
        public int HRESULT { get { return GetInt32At(8); } }

        #region Private
        internal GridOnGetCountDoneTraceData(Action<GridOnGetCountDoneTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "CountType", CountType);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "CountType", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return CountType;
                case 2:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridOnGetCountDoneTraceData> Action;
        #endregion
    }
    public sealed class GridOnCollectionItemsAddedOrDeletedTraceData : TraceEvent
    {
        new public int Version { get { return GetInt32At(0); } }
        public int Index { get { return GetInt32At(4); } }
        public int Count { get { return GetInt32At(8); } }
        public int ChangeIndexType { get { return GetInt32At(12); } }

        #region Private
        internal GridOnCollectionItemsAddedOrDeletedTraceData(Action<GridOnCollectionItemsAddedOrDeletedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Version", Version);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "Count", Count);
             XmlAttrib(sb, "ChangeIndexType", ChangeIndexType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Version", "Index", "Count", "ChangeIndexType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Version;
                case 1:
                    return Index;
                case 2:
                    return Count;
                case 3:
                    return ChangeIndexType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridOnCollectionItemsAddedOrDeletedTraceData> Action;
        #endregion
    }
    public sealed class GridOnItemChangedTraceData : TraceEvent
    {
        public int ItemChangedType { get { return GetInt32At(0); } }

        #region Private
        internal GridOnItemChangedTraceData(Action<GridOnItemChangedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ItemChangedType", ItemChangedType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ItemChangedType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ItemChangedType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridOnItemChangedTraceData> Action;
        #endregion
    }
    public sealed class GridViewShowCountTraceData : TraceEvent
    {
        public int ItemCount { get { return GetInt32At(0); } }

        #region Private
        internal GridViewShowCountTraceData(Action<GridViewShowCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ItemCount", ItemCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ItemCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ItemCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridViewShowCountTraceData> Action;
        #endregion
    }
    public sealed class GridTileVerbRemoveContentTileTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GridTileVerbRemoveContentTileTraceData(Action<GridTileVerbRemoveContentTileTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridTileVerbRemoveContentTileTraceData> Action;
        #endregion
    }
    public sealed class PickerPickerLaunchedTraceData : TraceEvent
    {
        public int PickerType { get { return GetInt32At(0); } }
        public int Mode { get { return GetInt32At(4); } }

        #region Private
        internal PickerPickerLaunchedTraceData(Action<PickerPickerLaunchedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PickerType", PickerType);
             XmlAttrib(sb, "Mode", Mode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PickerType", "Mode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PickerType;
                case 1:
                    return Mode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PickerPickerLaunchedTraceData> Action;
        #endregion
    }
    public sealed class PickerPickerActionButtonEnabledTraceData : TraceEvent
    {
        public bool IsEnabled { get { return GetInt32At(0) != 0; } }

        #region Private
        internal PickerPickerActionButtonEnabledTraceData(Action<PickerPickerActionButtonEnabledTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsEnabled", IsEnabled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsEnabled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsEnabled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PickerPickerActionButtonEnabledTraceData> Action;
        #endregion
    }
    public sealed class PickerHomeGroupAvailableTemplateTraceData : TraceEvent
    {
        public bool Available { get { return GetInt32At(0) != 0; } }

        #region Private
        internal PickerHomeGroupAvailableTemplateTraceData(Action<PickerHomeGroupAvailableTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Available", Available);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Available"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Available;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PickerHomeGroupAvailableTemplateTraceData> Action;
        #endregion
    }
    public sealed class PickerViewCompleteTraceData : TraceEvent
    {
        public int TotalCount { get { return GetInt32At(0); } }

        #region Private
        internal PickerViewCompleteTraceData(Action<PickerViewCompleteTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TotalCount", TotalCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TotalCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TotalCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PickerViewCompleteTraceData> Action;
        #endregion
    }
    public sealed class PickerLaunchDurationTraceData : TraceEvent
    {
        public int Duration { get { return GetInt32At(0); } }

        #region Private
        internal PickerLaunchDurationTraceData(Action<PickerLaunchDurationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Duration", Duration);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Duration"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Duration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PickerLaunchDurationTraceData> Action;
        #endregion
    }
    public sealed class SharingFlowReturnResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal SharingFlowReturnResultTraceData(Action<SharingFlowReturnResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharingFlowReturnResultTraceData> Action;
        #endregion
    }
    public sealed class SharingManagerGetSharableItemCountStopTraceData : TraceEvent
    {
        public int AppItemCount { get { return GetInt32At(0); } }
        public int TotalItemCount { get { return GetInt32At(4); } }
        public int Result { get { return GetInt32At(8); } }

        #region Private
        internal SharingManagerGetSharableItemCountStopTraceData(Action<SharingManagerGetSharableItemCountStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppItemCount", AppItemCount);
             XmlAttrib(sb, "TotalItemCount", TotalItemCount);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppItemCount", "TotalItemCount", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppItemCount;
                case 1:
                    return TotalItemCount;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharingManagerGetSharableItemCountStopTraceData> Action;
        #endregion
    }
    public sealed class SharingManagerGetSharableItemInfoStartTraceData : TraceEvent
    {
        public int Index { get { return GetInt32At(0); } }
        public int AppItemCount { get { return GetInt32At(4); } }

        #region Private
        internal SharingManagerGetSharableItemInfoStartTraceData(Action<SharingManagerGetSharableItemInfoStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "AppItemCount", AppItemCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Index", "AppItemCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Index;
                case 1:
                    return AppItemCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharingManagerGetSharableItemInfoStartTraceData> Action;
        #endregion
    }
    public sealed class SharingManagerTargetCountStopTraceData : TraceEvent
    {
        public int TargetCount { get { return GetInt32At(0); } }

        #region Private
        internal SharingManagerTargetCountStopTraceData(Action<SharingManagerTargetCountStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TargetCount", TargetCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TargetCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TargetCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharingManagerTargetCountStopTraceData> Action;
        #endregion
    }
    public sealed class SharingManagerGetTargetStartTraceData : TraceEvent
    {
        public int Index { get { return GetInt32At(0); } }

        #region Private
        internal SharingManagerGetTargetStartTraceData(Action<SharingManagerGetTargetStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Index", Index);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Index"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Index;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SharingManagerGetTargetStartTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackShareShowFlowTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal PerfTrackShareShowFlowTraceData(Action<PerfTrackShareShowFlowTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackShareShowFlowTraceData> Action;
        #endregion
    }
    public sealed class LauncherInitializeScaleDataTraceData : TraceEvent
    {
        public int Scale { get { return GetInt32At(0); } }
        public bool IsLowDPI { get { return GetInt32At(4) != 0; } }

        #region Private
        internal LauncherInitializeScaleDataTraceData(Action<LauncherInitializeScaleDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Scale", Scale);
             XmlAttrib(sb, "IsLowDPI", IsLowDPI);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Scale", "IsLowDPI"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Scale;
                case 1:
                    return IsLowDPI;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherInitializeScaleDataTraceData> Action;
        #endregion
    }
    public sealed class LauncherViewIdentifiersTraceData : TraceEvent
    {
        public string ViewFromGuid { get { return GetUnicodeStringAt(0); } }
        public string ViewToGuid { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal LauncherViewIdentifiersTraceData(Action<LauncherViewIdentifiersTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ViewFromGuid", ViewFromGuid);
             XmlAttrib(sb, "ViewToGuid", ViewToGuid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ViewFromGuid", "ViewToGuid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ViewFromGuid;
                case 1:
                    return ViewToGuid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherViewIdentifiersTraceData> Action;
        #endregion
    }
    public sealed class LauncherViewActivatedTraceData : TraceEvent
    {
        public string ViewGuid { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal LauncherViewActivatedTraceData(Action<LauncherViewActivatedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ViewGuid", ViewGuid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ViewGuid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ViewGuid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherViewActivatedTraceData> Action;
        #endregion
    }
    public sealed class LauncherViewPickerVisiblityChangedTraceData : TraceEvent
    {
        public bool IsVisible { get { return GetInt32At(0) != 0; } }

        #region Private
        internal LauncherViewPickerVisiblityChangedTraceData(Action<LauncherViewPickerVisiblityChangedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsVisible", IsVisible);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsVisible"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsVisible;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherViewPickerVisiblityChangedTraceData> Action;
        #endregion
    }
    public sealed class GridViewReadyInfoTraceData : TraceEvent
    {
        public int RenderedTileCount { get { return GetInt32At(0); } }
        public int RealizedTileCount { get { return GetInt32At(4); } }

        #region Private
        internal GridViewReadyInfoTraceData(Action<GridViewReadyInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RenderedTileCount", RenderedTileCount);
             XmlAttrib(sb, "RealizedTileCount", RealizedTileCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RenderedTileCount", "RealizedTileCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RenderedTileCount;
                case 1:
                    return RealizedTileCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridViewReadyInfoTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackDesktopToLauncherTransitionTraceData : TraceEvent
    {
        public int NumOfVisibleTiles { get { return GetInt32At(0); } }

        #region Private
        internal PerfTrackDesktopToLauncherTransitionTraceData(Action<PerfTrackDesktopToLauncherTransitionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumOfVisibleTiles", NumOfVisibleTiles);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NumOfVisibleTiles"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NumOfVisibleTiles;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackDesktopToLauncherTransitionTraceData> Action;
        #endregion
    }
    public sealed class LauncherRefreshContentsTraceData : TraceEvent
    {
        public bool IsDPIChange { get { return GetInt32At(0) != 0; } }

        #region Private
        internal LauncherRefreshContentsTraceData(Action<LauncherRefreshContentsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsDPIChange", IsDPIChange);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsDPIChange"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsDPIChange;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherRefreshContentsTraceData> Action;
        #endregion
    }
    public sealed class BackgroundColorChangeInfoTraceData : TraceEvent
    {
        public int Mode { get { return GetInt32At(0); } }

        #region Private
        internal BackgroundColorChangeInfoTraceData(Action<BackgroundColorChangeInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Mode", Mode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Mode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Mode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BackgroundColorChangeInfoTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackLauncherDismissExplicitToDesktopStopTraceData : TraceEvent
    {
        public int HowDismiss { get { return GetInt32At(0); } }

        #region Private
        internal PerfTrackLauncherDismissExplicitToDesktopStopTraceData(Action<PerfTrackLauncherDismissExplicitToDesktopStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HowDismiss", HowDismiss);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HowDismiss"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HowDismiss;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackLauncherDismissExplicitToDesktopStopTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData : TraceEvent
    {
        public int HowDismissed { get { return GetInt32At(0); } }
        public string AppName { get { return GetUnicodeStringAt(4); } }
        public string PackageName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }

        #region Private
        internal PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData(Action<PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(4))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(4))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HowDismissed", HowDismissed);
             XmlAttrib(sb, "AppName", AppName);
             XmlAttrib(sb, "PackageName", PackageName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HowDismissed", "AppName", "PackageName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HowDismissed;
                case 1:
                    return AppName;
                case 2:
                    return PackageName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackLauncherDismissExplicitToImmersiveModeStopTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackAppSearchViewCompleteTemplateTraceData : TraceEvent
    {
        public int ItemsInView { get { return GetInt32At(0); } }
        public int TotalCount { get { return GetInt32At(4); } }

        #region Private
        internal PerfTrackAppSearchViewCompleteTemplateTraceData(Action<PerfTrackAppSearchViewCompleteTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ItemsInView", ItemsInView);
             XmlAttrib(sb, "TotalCount", TotalCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ItemsInView", "TotalCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ItemsInView;
                case 1:
                    return TotalCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackAppSearchViewCompleteTemplateTraceData> Action;
        #endregion
    }
    public sealed class LauncherRequestTileBitmapDataTraceData : TraceEvent
    {
        public bool Succeeded { get { return GetInt32At(0) != 0; } }

        #region Private
        internal LauncherRequestTileBitmapDataTraceData(Action<LauncherRequestTileBitmapDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Succeeded", Succeeded);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Succeeded"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Succeeded;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherRequestTileBitmapDataTraceData> Action;
        #endregion
    }
    public sealed class TPLMPackageOperationTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TPLMPackageOperationTraceData(Action<TPLMPackageOperationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMPackageOperationTraceData> Action;
        #endregion
    }
    public sealed class TPLMPackageOperationStopTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public bool Timeout { get { return GetInt32At(SkipUnicodeString(0)) != 0; } }

        #region Private
        internal TPLMPackageOperationStopTraceData(Action<TPLMPackageOperationStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "Timeout", Timeout);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "Timeout"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return Timeout;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMPackageOperationStopTraceData> Action;
        #endregion
    }
    public sealed class TPLMApplicationHangTraceData : TraceEvent
    {
        public string ApplicationUserModelId { get { return GetUnicodeStringAt(0); } }
        public int HungProcessId { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMApplicationHangTraceData(Action<TPLMApplicationHangTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationUserModelId", ApplicationUserModelId);
             XmlAttrib(sb, "HungProcessId", HungProcessId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationUserModelId", "HungProcessId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationUserModelId;
                case 1:
                    return HungProcessId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMApplicationHangTraceData> Action;
        #endregion
    }
    public sealed class TPLMApplicationHangActivationTraceData : TraceEvent
    {
        public string ApplicationUserModelId { get { return GetUnicodeStringAt(0); } }
        public string PackageFullName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMApplicationHangActivationTraceData(Action<TPLMApplicationHangActivationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationUserModelId", ApplicationUserModelId);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationUserModelId", "PackageFullName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationUserModelId;
                case 1:
                    return PackageFullName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMApplicationHangActivationTraceData> Action;
        #endregion
    }
    public sealed class TPLMSuspendDeniedTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public M_PLM_ExemptionType ExemptionType { get { return (M_PLM_ExemptionType)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMSuspendDeniedTraceData(Action<TPLMSuspendDeniedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "ExemptionType", ExemptionType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "ExemptionType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return ExemptionType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMSuspendDeniedTraceData> Action;
        #endregion
    }
    public sealed class TPLMResumePackageTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public M_PLM_ResumeReason ResumeReason { get { return (M_PLM_ResumeReason)GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMResumePackageTraceData(Action<TPLMResumePackageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "ResumeReason", ResumeReason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "ResumeReason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return ResumeReason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMResumePackageTraceData> Action;
        #endregion
    }
    public sealed class TPLMPackageStateChangeTraceData : TraceEvent
    {
        public string PackagePsmKey { get { return GetUnicodeStringAt(0); } }
        public M_PLM_PackageState OldPackageState { get { return (M_PLM_PackageState)GetInt32At(SkipUnicodeString(0)); } }
        public M_PLM_PackageState NewPackageState { get { return (M_PLM_PackageState)GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TPLMPackageStateChangeTraceData(Action<TPLMPackageStateChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackagePsmKey", PackagePsmKey);
             XmlAttrib(sb, "OldPackageState", OldPackageState);
             XmlAttrib(sb, "NewPackageState", NewPackageState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackagePsmKey", "OldPackageState", "NewPackageState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackagePsmKey;
                case 1:
                    return OldPackageState;
                case 2:
                    return NewPackageState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMPackageStateChangeTraceData> Action;
        #endregion
    }
    public sealed class TPLMPSMWakeCounterChangeTraceData : TraceEvent
    {
        public string PackagePsmKey { get { return GetUnicodeStringAt(0); } }
        public int UserRequest { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int DeviceRequest { get { return GetInt32At(SkipUnicodeString(0)+4); } }
        public int KernelRequest { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        // public int PowerRequest { get { return GetInt32At(SkipUnicodeString(0)+12); } }

        #region Private
        internal TPLMPSMWakeCounterChangeTraceData(Action<TPLMPSMWakeCounterChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            // TODO this was patched, to make it work.   It seems they got rid of a field.  
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0) + 12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0) + 12));

            // Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+16));
            // Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackagePsmKey", PackagePsmKey);
             XmlAttrib(sb, "UserRequest", UserRequest);
             XmlAttrib(sb, "DeviceRequest", DeviceRequest);
             XmlAttrib(sb, "KernelRequest", KernelRequest);
             // XmlAttrib(sb, "PowerRequest", PowerRequest);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackagePsmKey", "UserRequest", "DeviceRequest", "KernelRequest", "PowerRequest"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackagePsmKey;
                case 1:
                    return UserRequest;
                case 2:
                    return DeviceRequest;
                case 3:
                    return KernelRequest;
                case 4:
                    return 0;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMPSMWakeCounterChangeTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyEvaluatingMemoryTraceData : TraceEvent
    {
        public long InUseMiB { get { return GetInt64At(0); } }
        public long CommitChargeMiB { get { return GetInt64At(8); } }
        public int AppsInSessionCount { get { return GetInt32At(16); } }
        public long TerminationPolicyInUseThresholdMiB { get { return GetInt64At(20); } }
        public long TerminationPolicyCommitChargeHardThresholdMiB { get { return GetInt64At(28); } }
        public long TerminationPolicyCommitChargeSoftThresholdMiB { get { return GetInt64At(36); } }
        public int TerminationPolicyCommitChargeSoftThresholdAppCount { get { return GetInt32At(44); } }
        public long EmptyPolicyInUseThresholdMiB { get { return GetInt64At(48); } }
        public bool IsInDisconnectedSession { get { return GetInt32At(56) != 0; } }
        public int SessionID { get { return GetInt32At(60); } }

        #region Private
        internal TPLMMemoryPolicyEvaluatingMemoryTraceData(Action<TPLMMemoryPolicyEvaluatingMemoryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 64));
            Debug.Assert(!(Version > 0 && EventDataLength < 64));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InUseMiB", InUseMiB);
             XmlAttrib(sb, "CommitChargeMiB", CommitChargeMiB);
             XmlAttrib(sb, "AppsInSessionCount", AppsInSessionCount);
             XmlAttrib(sb, "TerminationPolicyInUseThresholdMiB", TerminationPolicyInUseThresholdMiB);
             XmlAttrib(sb, "TerminationPolicyCommitChargeHardThresholdMiB", TerminationPolicyCommitChargeHardThresholdMiB);
             XmlAttrib(sb, "TerminationPolicyCommitChargeSoftThresholdMiB", TerminationPolicyCommitChargeSoftThresholdMiB);
             XmlAttrib(sb, "TerminationPolicyCommitChargeSoftThresholdAppCount", TerminationPolicyCommitChargeSoftThresholdAppCount);
             XmlAttrib(sb, "EmptyPolicyInUseThresholdMiB", EmptyPolicyInUseThresholdMiB);
             XmlAttrib(sb, "IsInDisconnectedSession", IsInDisconnectedSession);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InUseMiB", "CommitChargeMiB", "AppsInSessionCount", "TerminationPolicyInUseThresholdMiB", "TerminationPolicyCommitChargeHardThresholdMiB", "TerminationPolicyCommitChargeSoftThresholdMiB", "TerminationPolicyCommitChargeSoftThresholdAppCount", "EmptyPolicyInUseThresholdMiB", "IsInDisconnectedSession", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InUseMiB;
                case 1:
                    return CommitChargeMiB;
                case 2:
                    return AppsInSessionCount;
                case 3:
                    return TerminationPolicyInUseThresholdMiB;
                case 4:
                    return TerminationPolicyCommitChargeHardThresholdMiB;
                case 5:
                    return TerminationPolicyCommitChargeSoftThresholdMiB;
                case 6:
                    return TerminationPolicyCommitChargeSoftThresholdAppCount;
                case 7:
                    return EmptyPolicyInUseThresholdMiB;
                case 8:
                    return IsInDisconnectedSession;
                case 9:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyEvaluatingMemoryTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyEmptyCandidateTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public long PrivateWorkingSetSizeMiB { get { return GetInt64At(SkipUnicodeString(0)); } }
        public bool Emptied { get { return GetInt32At(SkipUnicodeString(0)+8) != 0; } }
        public bool SwapDisabled { get { return GetInt32At(SkipUnicodeString(0)+12) != 0; } }
        public bool IsInBackStack { get { return GetInt32At(SkipUnicodeString(0)+16) != 0; } }
        public int SessionID { get { return GetInt32At(SkipUnicodeString(0)+20); } }

        #region Private
        internal TPLMMemoryPolicyEmptyCandidateTraceData(Action<TPLMMemoryPolicyEmptyCandidateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "PrivateWorkingSetSizeMiB", PrivateWorkingSetSizeMiB);
             XmlAttrib(sb, "Emptied", Emptied);
             XmlAttrib(sb, "SwapDisabled", SwapDisabled);
             XmlAttrib(sb, "IsInBackStack", IsInBackStack);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "PrivateWorkingSetSizeMiB", "Emptied", "SwapDisabled", "IsInBackStack", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return PrivateWorkingSetSizeMiB;
                case 2:
                    return Emptied;
                case 3:
                    return SwapDisabled;
                case 4:
                    return IsInBackStack;
                case 5:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyEmptyCandidateTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyTerminationExemptionTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public M_PLM_MemoryPolicy_TerminationExemption TerminationExemption { get { return (M_PLM_MemoryPolicy_TerminationExemption)GetInt32At(SkipUnicodeString(0)); } }
        public int SessionID { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TPLMMemoryPolicyTerminationExemptionTraceData(Action<TPLMMemoryPolicyTerminationExemptionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "TerminationExemption", TerminationExemption);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "TerminationExemption", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return TerminationExemption;
                case 2:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyTerminationExemptionTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyTerminationCandidateTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public long MemorySizeMiB { get { return GetInt64At(SkipUnicodeString(0)); } }
        public bool IsInBackStack { get { return GetInt32At(SkipUnicodeString(0)+8) != 0; } }
        public long Score { get { return GetInt64At(SkipUnicodeString(0)+12); } }
        public long HiddenTimeSeconds { get { return GetInt64At(SkipUnicodeString(0)+20); } }
        public bool IsClipboardOwner { get { return GetInt32At(SkipUnicodeString(0)+28) != 0; } }
        public int SessionID { get { return GetInt32At(SkipUnicodeString(0)+32); } }

        #region Private
        internal TPLMMemoryPolicyTerminationCandidateTraceData(Action<TPLMMemoryPolicyTerminationCandidateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+36));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+36));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "MemorySizeMiB", MemorySizeMiB);
             XmlAttrib(sb, "IsInBackStack", IsInBackStack);
             XmlAttrib(sb, "Score", Score);
             XmlAttrib(sb, "HiddenTimeSeconds", HiddenTimeSeconds);
             XmlAttrib(sb, "IsClipboardOwner", IsClipboardOwner);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "MemorySizeMiB", "IsInBackStack", "Score", "HiddenTimeSeconds", "IsClipboardOwner", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return MemorySizeMiB;
                case 2:
                    return IsInBackStack;
                case 3:
                    return Score;
                case 4:
                    return HiddenTimeSeconds;
                case 5:
                    return IsClipboardOwner;
                case 6:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyTerminationCandidateTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyTerminationTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public long MemorySizeMiB { get { return GetInt64At(SkipUnicodeString(0)); } }
        public int ScoreHighPart { get { return GetInt32At(SkipUnicodeString(0)+8); } }
        public long ScoreLowPart { get { return GetInt64At(SkipUnicodeString(0)+12); } }
        public int SessionID { get { return GetInt32At(SkipUnicodeString(0)+20); } }

        #region Private
        internal TPLMMemoryPolicyTerminationTraceData(Action<TPLMMemoryPolicyTerminationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+24));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "MemorySizeMiB", MemorySizeMiB);
             XmlAttrib(sb, "ScoreHighPart", ScoreHighPart);
             XmlAttrib(sb, "ScoreLowPart", ScoreLowPart);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "MemorySizeMiB", "ScoreHighPart", "ScoreLowPart", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return MemorySizeMiB;
                case 2:
                    return ScoreHighPart;
                case 3:
                    return ScoreLowPart;
                case 4:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyTerminationTraceData> Action;
        #endregion
    }
    public sealed class TPLMTerminateAppAPIStartTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int Flags { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMTerminateAppAPIStartTraceData(Action<TPLMTerminateAppAPIStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "Flags", Flags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "Flags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return Flags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMTerminateAppAPIStartTraceData> Action;
        #endregion
    }
    public sealed class TPLMTerminateAppAPIStopTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int PendingTaskCompletions { get { return GetInt32At(SkipUnicodeString(0)); } }
        public bool DeferredTerminate { get { return GetInt32At(SkipUnicodeString(0)+4) != 0; } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)+8); } }

        #region Private
        internal TPLMTerminateAppAPIStopTraceData(Action<TPLMTerminateAppAPIStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "PendingTaskCompletions", PendingTaskCompletions);
             XmlAttrib(sb, "DeferredTerminate", DeferredTerminate);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "PendingTaskCompletions", "DeferredTerminate", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return PendingTaskCompletions;
                case 2:
                    return DeferredTerminate;
                case 3:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMTerminateAppAPIStopTraceData> Action;
        #endregion
    }
    public sealed class TPLMTerminateAppStartTraceData : TraceEvent
    {
        public string PackagePsmKey { get { return GetUnicodeStringAt(0); } }
        public string ApplicationId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal TPLMTerminateAppStartTraceData(Action<TPLMTerminateAppStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackagePsmKey", PackagePsmKey);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackagePsmKey", "ApplicationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackagePsmKey;
                case 1:
                    return ApplicationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMTerminateAppStartTraceData> Action;
        #endregion
    }
    public sealed class TPLMTerminateAppStopTraceData : TraceEvent
    {
        public string PackagePsmKey { get { return GetUnicodeStringAt(0); } }
        public string ApplicationId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public bool SingleAppPackage { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))) != 0; } }

        #region Private
        internal TPLMTerminateAppStopTraceData(Action<TPLMTerminateAppStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackagePsmKey", PackagePsmKey);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "SingleAppPackage", SingleAppPackage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackagePsmKey", "ApplicationId", "SingleAppPackage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackagePsmKey;
                case 1:
                    return ApplicationId;
                case 2:
                    return SingleAppPackage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMTerminateAppStopTraceData> Action;
        #endregion
    }
    public sealed class TPLMApplicationOperationTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TPLMApplicationOperationTraceData(Action<TPLMApplicationOperationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMApplicationOperationTraceData> Action;
        #endregion
    }
    public sealed class TPLMSessionIDTraceData : TraceEvent
    {
        public int SessionID { get { return GetInt32At(0); } }

        #region Private
        internal TPLMSessionIDTraceData(Action<TPLMSessionIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMSessionIDTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyRundownTraceData : TraceEvent
    {
        public string PackageFullName { get { return GetUnicodeStringAt(0); } }
        public int PackageState { get { return GetInt32At(SkipUnicodeString(0)); } }
        public long PrivateWorkingSetMiB { get { return GetInt64At(SkipUnicodeString(0)+4); } }
        public long TotalWorkingSetMiB { get { return GetInt64At(SkipUnicodeString(0)+12); } }
        public long CommitMiB { get { return GetInt64At(SkipUnicodeString(0)+20); } }
        public long SwapUsageMiB { get { return GetInt64At(SkipUnicodeString(0)+28); } }
        public int BackStackIndex { get { return GetInt32At(SkipUnicodeString(0)+36); } }
        public int TimeSinceHiddenSeconds { get { return GetInt32At(SkipUnicodeString(0)+40); } }
        public bool Emptied { get { return GetInt32At(SkipUnicodeString(0)+44) != 0; } }
        public bool SwapDisabled { get { return GetInt32At(SkipUnicodeString(0)+48) != 0; } }
        public int SessionID { get { return GetInt32At(SkipUnicodeString(0)+52); } }

        #region Private
        internal TPLMMemoryPolicyRundownTraceData(Action<TPLMMemoryPolicyRundownTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+56));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+56));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             XmlAttrib(sb, "PackageState", PackageState);
             XmlAttrib(sb, "PrivateWorkingSetMiB", PrivateWorkingSetMiB);
             XmlAttrib(sb, "TotalWorkingSetMiB", TotalWorkingSetMiB);
             XmlAttrib(sb, "CommitMiB", CommitMiB);
             XmlAttrib(sb, "SwapUsageMiB", SwapUsageMiB);
             XmlAttrib(sb, "BackStackIndex", BackStackIndex);
             XmlAttrib(sb, "TimeSinceHiddenSeconds", TimeSinceHiddenSeconds);
             XmlAttrib(sb, "Emptied", Emptied);
             XmlAttrib(sb, "SwapDisabled", SwapDisabled);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFullName", "PackageState", "PrivateWorkingSetMiB", "TotalWorkingSetMiB", "CommitMiB", "SwapUsageMiB", "BackStackIndex", "TimeSinceHiddenSeconds", "Emptied", "SwapDisabled", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFullName;
                case 1:
                    return PackageState;
                case 2:
                    return PrivateWorkingSetMiB;
                case 3:
                    return TotalWorkingSetMiB;
                case 4:
                    return CommitMiB;
                case 5:
                    return SwapUsageMiB;
                case 6:
                    return BackStackIndex;
                case 7:
                    return TimeSinceHiddenSeconds;
                case 8:
                    return Emptied;
                case 9:
                    return SwapDisabled;
                case 10:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyRundownTraceData> Action;
        #endregion
    }
    public sealed class TPLMMemoryPolicyExecutionReasonTraceData : TraceEvent
    {
        public int Reason { get { return GetInt32At(0); } }
        public int SessionID { get { return GetInt32At(4); } }

        #region Private
        internal TPLMMemoryPolicyExecutionReasonTraceData(Action<TPLMMemoryPolicyExecutionReasonTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             XmlAttrib(sb, "SessionID", SessionID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason", "SessionID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                case 1:
                    return SessionID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TPLMMemoryPolicyExecutionReasonTraceData> Action;
        #endregion
    }
    public sealed class SettingsFlowReturnResultTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal SettingsFlowReturnResultTraceData(Action<SettingsFlowReturnResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SettingsFlowReturnResultTraceData> Action;
        #endregion
    }
    public sealed class SettingsFlowCommandIdTraceData : TraceEvent
    {
        public string CommandId { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal SettingsFlowCommandIdTraceData(Action<SettingsFlowCommandIdTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CommandId", CommandId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CommandId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CommandId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SettingsFlowCommandIdTraceData> Action;
        #endregion
    }
    public sealed class FlyoutAnimationStartTraceData : TraceEvent
    {
        public int AnimationFlags { get { return GetInt32At(0); } }

        #region Private
        internal FlyoutAnimationStartTraceData(Action<FlyoutAnimationStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AnimationFlags", AnimationFlags);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AnimationFlags"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AnimationFlags;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutAnimationStartTraceData> Action;
        #endregion
    }
    public sealed class FlyoutStartupIsImmersiveTraceData : TraceEvent
    {
        public bool IsImmersive { get { return GetInt32At(0) != 0; } }

        #region Private
        internal FlyoutStartupIsImmersiveTraceData(Action<FlyoutStartupIsImmersiveTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "IsImmersive", IsImmersive);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "IsImmersive"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return IsImmersive;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutStartupIsImmersiveTraceData> Action;
        #endregion
    }
    public sealed class FlyoutWindowInfoTraceData : TraceEvent
    {
        public Address HWND { get { return GetHostPointer(0); } }

        #region Private
        internal FlyoutWindowInfoTraceData(Action<FlyoutWindowInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HWND", HWND);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HWND"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HWND;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutWindowInfoTraceData> Action;
        #endregion
    }
    public sealed class FlyoutWindowSideTraceData : TraceEvent
    {
        public int FinalSide { get { return GetInt32At(0); } }

        #region Private
        internal FlyoutWindowSideTraceData(Action<FlyoutWindowSideTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FinalSide", FinalSide);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FinalSide"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FinalSide;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutWindowSideTraceData> Action;
        #endregion
    }
    public sealed class FlyoutWindowRectTraceData : TraceEvent
    {
        public int Left { get { return GetInt32At(0); } }
        public int Top { get { return GetInt32At(4); } }
        public int Right { get { return GetInt32At(8); } }
        public int Bottom { get { return GetInt32At(12); } }

        #region Private
        internal FlyoutWindowRectTraceData(Action<FlyoutWindowRectTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "Right", Right);
             XmlAttrib(sb, "Bottom", Bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Left", "Top", "Right", "Bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Left;
                case 1:
                    return Top;
                case 2:
                    return Right;
                case 3:
                    return Bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutWindowRectTraceData> Action;
        #endregion
    }
    public sealed class FlyoutHRESULTTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal FlyoutHRESULTTraceData(Action<FlyoutHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FlyoutHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TileUITemplateMarkupErrorTraceData : TraceEvent
    {
        public string TemplateName { get { return GetUnicodeStringAt(0); } }
        public string Error { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string Token { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int Line { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }

        #region Private
        internal TileUITemplateMarkupErrorTraceData(Action<TileUITemplateMarkupErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TemplateName", TemplateName);
             XmlAttrib(sb, "Error", Error);
             XmlAttrib(sb, "Token", Token);
             XmlAttrib(sb, "Line", Line);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TemplateName", "Error", "Token", "Line"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TemplateName;
                case 1:
                    return Error;
                case 2:
                    return Token;
                case 3:
                    return Line;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUITemplateMarkupErrorTraceData> Action;
        #endregion
    }
    public sealed class TileUIUnknownTemplateErrorTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string TemplateName { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }

        #region Private
        internal TileUIUnknownTemplateErrorTraceData(Action<TileUIUnknownTemplateErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)+4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "TemplateName", TemplateName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "TemplateName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return TemplateName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIUnknownTemplateErrorTraceData> Action;
        #endregion
    }
    public sealed class TileUIContentBindErrorTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public string TemplateName { get { return GetUnicodeStringAt(SkipUnicodeString(0)+4); } }
        public string ContentType { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0)+4)); } }
        public int ContentId { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+4))); } }

        #region Private
        internal TileUIContentBindErrorTraceData(Action<TileUIContentBindErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+4))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)+4))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "TemplateName", TemplateName);
             XmlAttrib(sb, "ContentType", ContentType);
             XmlAttrib(sb, "ContentId", ContentId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "TemplateName", "ContentType", "ContentId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return TemplateName;
                case 3:
                    return ContentType;
                case 4:
                    return ContentId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIContentBindErrorTraceData> Action;
        #endregion
    }
    public sealed class TileUITileActivatedEventTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public string ActivationParameters { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal TileUITileActivatedEventTraceData(Action<TileUITileActivatedEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "ActivationParameters", ActivationParameters);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "ActivationParameters"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return ActivationParameters;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUITileActivatedEventTraceData> Action;
        #endregion
    }
    public sealed class TileUITileRearrangeEventTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }        
        //public int Action { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileUITileRearrangeEventTraceData(Action<TileUITileRearrangeEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "Action", Action);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "Action"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return Action;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUITileRearrangeEventTraceData> Action;
        #endregion
    }
    public sealed class TileUIAutoTickleTimerTraceData : TraceEvent
    {
        public int Interval { get { return GetInt32At(0); } }
        public int TolerableDelay { get { return GetInt32At(4); } }
        public int Mode { get { return GetInt32At(8); } }
        public bool MonitorOn { get { return GetInt32At(12) != 0; } }

        #region Private
        internal TileUIAutoTickleTimerTraceData(Action<TileUIAutoTickleTimerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Interval", Interval);
             XmlAttrib(sb, "TolerableDelay", TolerableDelay);
             XmlAttrib(sb, "Mode", Mode);
             XmlAttrib(sb, "MonitorOn", MonitorOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Interval", "TolerableDelay", "Mode", "MonitorOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Interval;
                case 1:
                    return TolerableDelay;
                case 2:
                    return Mode;
                case 3:
                    return MonitorOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIAutoTickleTimerTraceData> Action;
        #endregion
    }
    public sealed class TileUIExpiryTimerTraceData : TraceEvent
    {
        public int FILETIMEHigh { get { return GetInt32At(0); } }
        public int FILETIMELow { get { return GetInt32At(4); } }
        public int TolerableDelay { get { return GetInt32At(8); } }
        public int Mode { get { return GetInt32At(12); } }
        public bool MonitorOn { get { return GetInt32At(16) != 0; } }

        #region Private
        internal TileUIExpiryTimerTraceData(Action<TileUIExpiryTimerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FILETIMEHigh", FILETIMEHigh);
             XmlAttrib(sb, "FILETIMELow", FILETIMELow);
             XmlAttrib(sb, "TolerableDelay", TolerableDelay);
             XmlAttrib(sb, "Mode", Mode);
             XmlAttrib(sb, "MonitorOn", MonitorOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FILETIMEHigh", "FILETIMELow", "TolerableDelay", "Mode", "MonitorOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FILETIMEHigh;
                case 1:
                    return FILETIMELow;
                case 2:
                    return TolerableDelay;
                case 3:
                    return Mode;
                case 4:
                    return MonitorOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIExpiryTimerTraceData> Action;
        #endregion
    }
    public sealed class TileUIChangeNotificationAnimationTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileUIChangeNotificationAnimationTraceData(Action<TileUIChangeNotificationAnimationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIChangeNotificationAnimationTraceData> Action;
        #endregion
    }
    public sealed class RegisterTileTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal RegisterTileTraceData(Action<RegisterTileTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RegisterTileTraceData> Action;
        #endregion
    }
    public sealed class TileNotifiedTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileNotifiedTraceData(Action<TileNotifiedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotifiedTraceData> Action;
        #endregion
    }
    public sealed class TileUIRetryRealizationTimerTraceData : TraceEvent
    {
        public int FILETIMEHigh { get { return GetInt32At(0); } }
        public int FILETIMELow { get { return GetInt32At(4); } }
        public int TolerableDelay { get { return GetInt32At(8); } }
        public int Mode { get { return GetInt32At(12); } }
        public bool MonitorOn { get { return GetInt32At(16) != 0; } }

        #region Private
        internal TileUIRetryRealizationTimerTraceData(Action<TileUIRetryRealizationTimerTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FILETIMEHigh", FILETIMEHigh);
             XmlAttrib(sb, "FILETIMELow", FILETIMELow);
             XmlAttrib(sb, "TolerableDelay", TolerableDelay);
             XmlAttrib(sb, "Mode", Mode);
             XmlAttrib(sb, "MonitorOn", MonitorOn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FILETIMEHigh", "FILETIMELow", "TolerableDelay", "Mode", "MonitorOn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FILETIMEHigh;
                case 1:
                    return FILETIMELow;
                case 2:
                    return TolerableDelay;
                case 3:
                    return Mode;
                case 4:
                    return MonitorOn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIRetryRealizationTimerTraceData> Action;
        #endregion
    }
    public sealed class TileUIAutoPeekAnimationTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int PeekPosition { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TileUIAutoPeekAnimationTraceData(Action<TileUIAutoPeekAnimationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "PeekPosition", PeekPosition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "PeekPosition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return PeekPosition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileUIAutoPeekAnimationTraceData> Action;
        #endregion
    }
    public sealed class TileNotificationE2EFailureTemplateTraceData : TraceEvent
    {
        public string ApplicationId { get { return GetUnicodeStringAt(0); } }
        public int NotificationId { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int HRESULT { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TileNotificationE2EFailureTemplateTraceData(Action<TileNotificationE2EFailureTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApplicationId", ApplicationId);
             XmlAttrib(sb, "NotificationId", NotificationId);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApplicationId", "NotificationId", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApplicationId;
                case 1:
                    return NotificationId;
                case 2:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileNotificationE2EFailureTemplateTraceData> Action;
        #endregion
    }
    public sealed class WatermarkErrorTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal WatermarkErrorTraceData(Action<WatermarkErrorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WatermarkErrorTraceData> Action;
        #endregion
    }
    public sealed class DeviceIdentifiersTemplateTraceData : TraceEvent
    {
        public string ContainerIdentifier { get { return GetUnicodeStringAt(0); } }
        public string DeviceIdentifier { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal DeviceIdentifiersTemplateTraceData(Action<DeviceIdentifiersTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContainerIdentifier", ContainerIdentifier);
             XmlAttrib(sb, "DeviceIdentifier", DeviceIdentifier);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContainerIdentifier", "DeviceIdentifier"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContainerIdentifier;
                case 1:
                    return DeviceIdentifier;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DeviceIdentifiersTemplateTraceData> Action;
        #endregion
    }
    public sealed class AutoPlayLaunchInfoTraceData : TraceEvent
    {
        public int Duration { get { return GetInt32At(0); } }
        public string DeviceHardwareID { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal AutoPlayLaunchInfoTraceData(Action<AutoPlayLaunchInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Duration", Duration);
             XmlAttrib(sb, "DeviceHardwareID", DeviceHardwareID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Duration", "DeviceHardwareID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Duration;
                case 1:
                    return DeviceHardwareID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AutoPlayLaunchInfoTraceData> Action;
        #endregion
    }
    public sealed class EdgeUiInputTraceData : TraceEvent
    {
        public int EdgeUiComponent { get { return GetInt32At(0); } }

        #region Private
        internal EdgeUiInputTraceData(Action<EdgeUiInputTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EdgeUiComponent", EdgeUiComponent);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EdgeUiComponent"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EdgeUiComponent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EdgeUiInputTraceData> Action;
        #endregion
    }
    public sealed class WindowHandleTraceData : TraceEvent
    {
        public Address HWND { get { return GetHostPointer(0); } }

        #region Private
        internal WindowHandleTraceData(Action<WindowHandleTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HWND", HWND);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HWND"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HWND;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WindowHandleTraceData> Action;
        #endregion
    }
    public sealed class DockedDesktopNeedyWindowTraceData : TraceEvent
    {
        public Address HWND { get { return GetHostPointer(0); } }
        public bool Scrolled { get { return GetInt32At(HostOffset(4, 1)) != 0; } }

        #region Private
        internal DockedDesktopNeedyWindowTraceData(Action<DockedDesktopNeedyWindowTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "HWND", HWND);
             XmlAttrib(sb, "Scrolled", Scrolled);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HWND", "Scrolled"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HWND;
                case 1:
                    return Scrolled;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DockedDesktopNeedyWindowTraceData> Action;
        #endregion
    }
    public sealed class OperationResultTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal OperationResultTraceData(Action<OperationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<OperationResultTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryTraceData : TraceEvent
    {
        public string EntryIDString { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TickleEntryTraceData(Action<TickleEntryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryIDString", EntryIDString);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryIDString"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryIDString;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryWithResultTraceData : TraceEvent
    {
        public string EntryIDString { get { return GetUnicodeStringAt(0); } }
        public int EntryID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Result { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TickleEntryWithResultTraceData(Action<TickleEntryWithResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryIDString", EntryIDString);
             XmlAttrib(sb, "EntryID", EntryID);
             XmlAttribHex(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryIDString", "EntryID", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryIDString;
                case 1:
                    return EntryID;
                case 2:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryWithResultTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryAndIndexTraceData : TraceEvent
    {
        public int EntryID { get { return GetInt32At(0); } }
        public int Index { get { return GetInt32At(4); } }

        #region Private
        internal TickleEntryAndIndexTraceData(Action<TickleEntryAndIndexTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryID", EntryID);
             XmlAttrib(sb, "Index", Index);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryID", "Index"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryID;
                case 1:
                    return Index;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryAndIndexTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryIDTraceData : TraceEvent
    {
        public int EntryID { get { return GetInt32At(0); } }

        #region Private
        internal TickleEntryIDTraceData(Action<TickleEntryIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryID", EntryID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryIDTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryIDWithResultTraceData : TraceEvent
    {
        public int EntryID { get { return GetInt32At(0); } }
        public int Result { get { return GetInt32At(4); } }

        #region Private
        internal TickleEntryIDWithResultTraceData(Action<TickleEntryIDWithResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryID", EntryID);
             XmlAttribHex(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryID", "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryID;
                case 1:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryIDWithResultTraceData> Action;
        #endregion
    }
    public sealed class TileDataProviderUpdateTickleTileTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int NotificationID { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileDataProviderUpdateTickleTileTraceData(Action<TileDataProviderUpdateTickleTileTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "NotificationID", NotificationID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "NotificationID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return NotificationID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileDataProviderUpdateTickleTileTraceData> Action;
        #endregion
    }
    public sealed class TickleEntryAndIDAndIndexTraceData : TraceEvent
    {
        public string EntryIDString { get { return GetUnicodeStringAt(0); } }
        public int EntryID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int Index { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TickleEntryAndIDAndIndexTraceData(Action<TickleEntryAndIDAndIndexTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryIDString", EntryIDString);
             XmlAttrib(sb, "EntryID", EntryID);
             XmlAttrib(sb, "Index", Index);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryIDString", "EntryID", "Index"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryIDString;
                case 1:
                    return EntryID;
                case 2:
                    return Index;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TickleEntryAndIDAndIndexTraceData> Action;
        #endregion
    }
    public sealed class MonitorIdentityTraceData : TraceEvent
    {
        public int MonitorIdentity { get { return GetInt32At(0); } }

        #region Private
        internal MonitorIdentityTraceData(Action<MonitorIdentityTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "MonitorIdentity", MonitorIdentity);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MonitorIdentity"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MonitorIdentity;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MonitorIdentityTraceData> Action;
        #endregion
    }
    public sealed class NoMonitorIdentityTraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal NoMonitorIdentityTraceData(Action<NoMonitorIdentityTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NoMonitorIdentityTraceData> Action;
        #endregion
    }
    public sealed class SemanticZoomChangeTemplateTraceData : TraceEvent
    {
        public float PreviousSemanticFactor { get { return GetSingleAt(0); } }
        public float NewSemanticFactor { get { return GetSingleAt(4); } }

        #region Private
        internal SemanticZoomChangeTemplateTraceData(Action<SemanticZoomChangeTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PreviousSemanticFactor", PreviousSemanticFactor);
             XmlAttrib(sb, "NewSemanticFactor", NewSemanticFactor);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PreviousSemanticFactor", "NewSemanticFactor"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PreviousSemanticFactor;
                case 1:
                    return NewSemanticFactor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SemanticZoomChangeTemplateTraceData> Action;
        #endregion
    }
    public sealed class ZoomFactorChangeTemplateTraceData : TraceEvent
    {
        public float PreviousZoomFactor { get { return GetSingleAt(0); } }
        public float NewZoomFactor { get { return GetSingleAt(4); } }
        public float panX { get { return GetSingleAt(8); } }
        public float panY { get { return GetSingleAt(12); } }
        public float centerX { get { return GetSingleAt(16); } }
        public float centerY { get { return GetSingleAt(20); } }
        public bool isInertia { get { return GetInt32At(24) != 0; } }

        #region Private
        internal ZoomFactorChangeTemplateTraceData(Action<ZoomFactorChangeTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version > 0 && EventDataLength < 28));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PreviousZoomFactor", PreviousZoomFactor);
             XmlAttrib(sb, "NewZoomFactor", NewZoomFactor);
             XmlAttrib(sb, "panX", panX);
             XmlAttrib(sb, "panY", panY);
             XmlAttrib(sb, "centerX", centerX);
             XmlAttrib(sb, "centerY", centerY);
             XmlAttrib(sb, "isInertia", isInertia);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PreviousZoomFactor", "NewZoomFactor", "panX", "panY", "centerX", "centerY", "isInertia"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PreviousZoomFactor;
                case 1:
                    return NewZoomFactor;
                case 2:
                    return panX;
                case 3:
                    return panY;
                case 4:
                    return centerX;
                case 5:
                    return centerY;
                case 6:
                    return isInertia;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ZoomFactorChangeTemplateTraceData> Action;
        #endregion
    }
    public sealed class SemanticSwapTemplateTraceData : TraceEvent
    {
        public int RealizedTiles { get { return GetInt32At(0); } }
        public int VisibleTiles { get { return GetInt32At(4); } }
        public int IsZoomIn { get { return GetInt32At(8); } }

        #region Private
        internal SemanticSwapTemplateTraceData(Action<SemanticSwapTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RealizedTiles", RealizedTiles);
             XmlAttrib(sb, "VisibleTiles", VisibleTiles);
             XmlAttrib(sb, "IsZoomIn", IsZoomIn);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RealizedTiles", "VisibleTiles", "IsZoomIn"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RealizedTiles;
                case 1:
                    return VisibleTiles;
                case 2:
                    return IsZoomIn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SemanticSwapTemplateTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }

        #region Private
        internal TilesCacheCacheIDTraceData(Action<TilesCacheCacheIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDValidHRESULTTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public bool Valid { get { return GetInt32At(4) != 0; } }
        public int HRESULT { get { return GetInt32At(8); } }

        #region Private
        internal TilesCacheCacheIDValidHRESULTTraceData(Action<TilesCacheCacheIDValidHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "Valid", Valid);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "Valid", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return Valid;
                case 2:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDValidHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheAppIDTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TilesCacheAppIDTraceData(Action<TilesCacheAppIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            // TODO FIXED by hand.   Changed to < from !=    
            Debug.Assert(!(Version == 0 && EventDataLength < SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheAppIDTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheAppIDCacheIDHRESULTTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int CacheID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int HRESULT { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TilesCacheAppIDCacheIDHRESULTTraceData(Action<TilesCacheAppIDCacheIDHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "CacheID", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return CacheID;
                case 2:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheAppIDCacheIDHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheAppIDSrcIDDestIDTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int SrcID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int DestID { get { return GetInt32At(SkipUnicodeString(0)+4); } }

        #region Private
        internal TilesCacheAppIDSrcIDDestIDTraceData(Action<TilesCacheAppIDSrcIDDestIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            // TODO Modfied by hand to +12 (from +8) on a 32 bit machine.  There is another field or int is a long ... 
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "SrcID", SrcID);
             XmlAttrib(sb, "DestID", DestID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "SrcID", "DestID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return SrcID;
                case 2:
                    return DestID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheAppIDSrcIDDestIDTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheAppIDHRESULTTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public int HRESULT { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TilesCacheAppIDHRESULTTraceData(Action<TilesCacheAppIDHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheAppIDHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public int HRESULT { get { return GetInt32At(4); } }
        public long CRCBefore { get { return GetInt64At(8); } }
        public long CRCAfter { get { return GetInt64At(16); } }

        #region Private
        internal TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData(Action<TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "HRESULT", HRESULT);
             XmlAttrib(sb, "CRCBefore", CRCBefore);
             XmlAttrib(sb, "CRCAfter", CRCAfter);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "HRESULT", "CRCBefore", "CRCAfter"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return HRESULT;
                case 2:
                    return CRCBefore;
                case 3:
                    return CRCAfter;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDHRESULTCRCBeforeCRCAfterTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDHRESULTTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public int HRESULT { get { return GetInt32At(4); } }

        #region Private
        internal TilesCacheCacheIDHRESULTTraceData(Action<TilesCacheCacheIDHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheFilenameTraceData : TraceEvent
    {
        public string Filename { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TilesCacheFilenameTraceData(Action<TilesCacheFilenameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Filename", Filename);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Filename"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Filename;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheFilenameTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheHRESULTTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal TilesCacheHRESULTTraceData(Action<TilesCacheHRESULTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheHRESULTTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheMaxHeaderCountTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal TilesCacheMaxHeaderCountTraceData(Action<TilesCacheMaxHeaderCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheMaxHeaderCountTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheDiskFullTraceData : TraceEvent
    {
        public int AttemptedFileSize { get { return GetInt32At(0); } }
        public int HRESULT { get { return GetInt32At(4); } }

        #region Private
        internal TilesCacheDiskFullTraceData(Action<TilesCacheDiskFullTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AttemptedFileSize", AttemptedFileSize);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AttemptedFileSize", "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AttemptedFileSize;
                case 1:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheDiskFullTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheEnableTraceData : TraceEvent
    {
        public bool Valid { get { return GetInt32At(0) != 0; } }

        #region Private
        internal TilesCacheEnableTraceData(Action<TilesCacheEnableTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Valid", Valid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Valid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Valid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheEnableTraceData> Action;
        #endregion
    }
    public sealed class TilesCachePreLoadCountTraceData : TraceEvent
    {
        public int CountIDs { get { return GetInt32At(0); } }

        #region Private
        internal TilesCachePreLoadCountTraceData(Action<TilesCachePreLoadCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CountIDs", CountIDs);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CountIDs"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CountIDs;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCachePreLoadCountTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDValidWidthHeightTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public bool Valid { get { return GetInt32At(4) != 0; } }
        public int Width { get { return GetInt32At(8); } }
        public int Height { get { return GetInt32At(12); } }

        #region Private
        internal TilesCacheCacheIDValidWidthHeightTraceData(Action<TilesCacheCacheIDValidWidthHeightTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "Valid", Valid);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "Valid", "Width", "Height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return Valid;
                case 2:
                    return Width;
                case 3:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDValidWidthHeightTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheScaleAndTestModeTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public bool Valid { get { return GetInt32At(4) != 0; } }

        #region Private
        internal TilesCacheScaleAndTestModeTraceData(Action<TilesCacheScaleAndTestModeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "Valid", Valid);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "Valid"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return Valid;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheScaleAndTestModeTraceData> Action;
        #endregion
    }
    public sealed class TileCacheCRCFailureTraceData : TraceEvent
    {
        public int EntryID { get { return GetInt32At(0); } }

        #region Private
        internal TileCacheCRCFailureTraceData(Action<TileCacheCRCFailureTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "EntryID", EntryID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "EntryID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return EntryID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileCacheCRCFailureTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDScaleFactorTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public int ScaleFactor { get { return GetInt32At(4); } }

        #region Private
        internal TilesCacheCacheIDScaleFactorTraceData(Action<TilesCacheCacheIDScaleFactorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "ScaleFactor", ScaleFactor);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "ScaleFactor"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return ScaleFactor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDScaleFactorTraceData> Action;
        #endregion
    }
    public sealed class TilesCacheCacheIDIndexScaleFactorTraceData : TraceEvent
    {
        public int CacheID { get { return GetInt32At(0); } }
        public int Index { get { return GetInt32At(4); } }
        public int ScaleFactor { get { return GetInt32At(8); } }

        #region Private
        internal TilesCacheCacheIDIndexScaleFactorTraceData(Action<TilesCacheCacheIDIndexScaleFactorTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CacheID", CacheID);
             XmlAttrib(sb, "Index", Index);
             XmlAttrib(sb, "ScaleFactor", ScaleFactor);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheID", "Index", "ScaleFactor"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheID;
                case 1:
                    return Index;
                case 2:
                    return ScaleFactor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TilesCacheCacheIDIndexScaleFactorTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackAppActivationTraceData : TraceEvent
    {
        public string AppID { get { return GetUnicodeStringAt(0); } }
        public string PackageMoniker { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string ContractID { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }
        public string ExeName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))); } }

        #region Private
        internal PerfTrackAppActivationTraceData(Action<PerfTrackAppActivationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0))))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppID", AppID);
             XmlAttrib(sb, "PackageMoniker", PackageMoniker);
             XmlAttrib(sb, "ContractID", ContractID);
             XmlAttrib(sb, "ExeName", ExeName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppID", "PackageMoniker", "ContractID", "ExeName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppID;
                case 1:
                    return PackageMoniker;
                case 2:
                    return ContractID;
                case 3:
                    return ExeName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackAppActivationTraceData> Action;
        #endregion
    }
    public sealed class ActivationOptionsTemplateTraceData : TraceEvent
    {
        public int ActivationOptions { get { return GetInt32At(0); } }

        #region Private
        internal ActivationOptionsTemplateTraceData(Action<ActivationOptionsTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ActivationOptions", ActivationOptions);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ActivationOptions"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ActivationOptions;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationOptionsTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationStepResultTemplateTraceData : TraceEvent
    {
        public int HRESULT { get { return GetInt32At(0); } }

        #region Private
        internal ActivationStepResultTemplateTraceData(Action<ActivationStepResultTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "HRESULT", HRESULT);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HRESULT"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HRESULT;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationStepResultTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationUnresponsiveAppTemplateTraceData : TraceEvent
    {
        public bool AppClosed { get { return GetInt32At(0) != 0; } }

        #region Private
        internal ActivationUnresponsiveAppTemplateTraceData(Action<ActivationUnresponsiveAppTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppClosed", AppClosed);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppClosed"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppClosed;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationUnresponsiveAppTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationPackageSettingsTemplateTraceData : TraceEvent
    {
        public int PackageActivationSettings { get { return GetInt32At(0); } }

        #region Private
        internal ActivationPackageSettingsTemplateTraceData(Action<ActivationPackageSettingsTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageActivationSettings", PackageActivationSettings);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageActivationSettings"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageActivationSettings;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationPackageSettingsTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationErrorDialogDisplayedTemplateTraceData : TraceEvent
    {
        public string AppId { get { return GetUnicodeStringAt(0); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal ActivationErrorDialogDisplayedTemplateTraceData(Action<ActivationErrorDialogDisplayedTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppId;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationErrorDialogDisplayedTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationLogAppContractTemplateTraceData : TraceEvent
    {
        public string AppId { get { return GetUnicodeStringAt(0); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal ActivationLogAppContractTemplateTraceData(Action<ActivationLogAppContractTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "ContractId", ContractId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppId", "ContractId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppId;
                case 1:
                    return ContractId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationLogAppContractTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationLogAppFamilyContractTemplateTraceData : TraceEvent
    {
        public string AppId { get { return GetUnicodeStringAt(0); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public string PackageFamilyName { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal ActivationLogAppFamilyContractTemplateTraceData(Action<ActivationLogAppFamilyContractTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(0)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "ContractId", ContractId);
             XmlAttrib(sb, "PackageFamilyName", PackageFamilyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppId", "ContractId", "PackageFamilyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppId;
                case 1:
                    return ContractId;
                case 2:
                    return PackageFamilyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationLogAppFamilyContractTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationLogRemediationTemplateTraceData : TraceEvent
    {
        public string AppId { get { return GetUnicodeStringAt(0); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public PackageRemediationStates PackageState { get { return (PackageRemediationStates)GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4); } }

        #region Private
        internal ActivationLogRemediationTemplateTraceData(Action<ActivationLogRemediationTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "ContractId", ContractId);
             XmlAttribHex(sb, "ErrorCode", ErrorCode);
             XmlAttrib(sb, "PackageState", PackageState);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppId", "ContractId", "ErrorCode", "PackageState"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppId;
                case 1:
                    return ContractId;
                case 2:
                    return ErrorCode;
                case 3:
                    return PackageState;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationLogRemediationTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationLogGenericFailureTemplateTraceData : TraceEvent
    {
        public string AppId { get { return GetUnicodeStringAt(0); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal ActivationLogGenericFailureTemplateTraceData(Action<ActivationLogGenericFailureTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "ContractId", ContractId);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppId", "ContractId", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppId;
                case 1:
                    return ContractId;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationLogGenericFailureTemplateTraceData> Action;
        #endregion
    }
    public sealed class ActivationLogGenericFailureNoDetailsTemplateTraceData : TraceEvent
    {
        public int ErrorCode { get { return GetInt32At(0); } }

        #region Private
        internal ActivationLogGenericFailureNoDetailsTemplateTraceData(Action<ActivationLogGenericFailureNoDetailsTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ActivationLogGenericFailureNoDetailsTemplateTraceData> Action;
        #endregion
    }
    public sealed class SplashScreenImageLoadTraceData : TraceEvent
    {
        public string FilePath { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal SplashScreenImageLoadTraceData(Action<SplashScreenImageLoadTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FilePath", FilePath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FilePath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SplashScreenImageLoadTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackSplashScreenStartTraceData : TraceEvent
    {
        public int Key { get { return GetInt32At(0); } }
        public string AppId { get { return GetUnicodeStringAt(4); } }
        public string PackageName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(4))); } }

        #region Private
        internal PerfTrackSplashScreenStartTraceData(Action<PerfTrackSplashScreenStartTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(4)))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(4)))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Key", Key);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "PackageName", PackageName);
             XmlAttrib(sb, "ContractId", ContractId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Key", "AppId", "PackageName", "ContractId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Key;
                case 1:
                    return AppId;
                case 2:
                    return PackageName;
                case 3:
                    return ContractId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackSplashScreenStartTraceData> Action;
        #endregion
    }
    public sealed class PerfTrackSplashScreenStopTraceData : TraceEvent
    {
        public int Key { get { return GetInt32At(0); } }
        public string AppId { get { return GetUnicodeStringAt(4); } }
        public string PackageName { get { return GetUnicodeStringAt(SkipUnicodeString(4)); } }
        public string ContractId { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(4))); } }
        public bool SplashScreenShown { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(4)))) != 0; } }

        #region Private
        internal PerfTrackSplashScreenStopTraceData(Action<PerfTrackSplashScreenStopTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(4)))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(4)))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Key", Key);
             XmlAttrib(sb, "AppId", AppId);
             XmlAttrib(sb, "PackageName", PackageName);
             XmlAttrib(sb, "ContractId", ContractId);
             XmlAttrib(sb, "SplashScreenShown", SplashScreenShown);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Key", "AppId", "PackageName", "ContractId", "SplashScreenShown"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Key;
                case 1:
                    return AppId;
                case 2:
                    return PackageName;
                case 3:
                    return ContractId;
                case 4:
                    return SplashScreenShown;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfTrackSplashScreenStopTraceData> Action;
        #endregion
    }
    public sealed class SplashScreenContentTraceData : TraceEvent
    {
        public string ImagePath { get { return GetUnicodeStringAt(0); } }
        public string AppName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Color { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool ReadError { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4) != 0; } }

        #region Private
        internal SplashScreenContentTraceData(Action<SplashScreenContentTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ImagePath", ImagePath);
             XmlAttrib(sb, "AppName", AppName);
             XmlAttribHex(sb, "Color", Color);
             XmlAttrib(sb, "ReadError", ReadError);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ImagePath", "AppName", "Color", "ReadError"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ImagePath;
                case 1:
                    return AppName;
                case 2:
                    return Color;
                case 3:
                    return ReadError;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SplashScreenContentTraceData> Action;
        #endregion
    }
    public sealed class NotificationsPermissionsSettingValueTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public bool SettingValue { get { return GetInt32At(SkipUnicodeString(0)) != 0; } }

        #region Private
        internal NotificationsPermissionsSettingValueTraceData(Action<NotificationsPermissionsSettingValueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "SettingValue", SettingValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "SettingValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return SettingValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotificationsPermissionsSettingValueTraceData> Action;
        #endregion
    }
    public sealed class NotificationsCharmSettingValueTraceData : TraceEvent
    {
        public bool SettingValue { get { return GetInt32At(0) != 0; } }

        #region Private
        internal NotificationsCharmSettingValueTraceData(Action<NotificationsCharmSettingValueTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SettingValue", SettingValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SettingValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SettingValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotificationsCharmSettingValueTraceData> Action;
        #endregion
    }
    public sealed class NotificationsPermissionsSettingSyncTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public string PackageFamilyName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal NotificationsPermissionsSettingSyncTraceData(Action<NotificationsPermissionsSettingSyncTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "PackageFamilyName", PackageFamilyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "PackageFamilyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return PackageFamilyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NotificationsPermissionsSettingSyncTraceData> Action;
        #endregion
    }
    public sealed class SessionAndDeviceIdentifiersTraceData : TraceEvent
    {
        public int SessionID { get { return GetInt32At(0); } }
        public string DeviceInstanceID { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal SessionAndDeviceIdentifiersTraceData(Action<SessionAndDeviceIdentifiersTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SessionID", SessionID);
             XmlAttrib(sb, "DeviceInstanceID", DeviceInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SessionID", "DeviceInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SessionID;
                case 1:
                    return DeviceInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SessionAndDeviceIdentifiersTraceData> Action;
        #endregion
    }
    public sealed class DeviceCountTraceData : TraceEvent
    {
        public int DeviceCount { get { return GetInt32At(0); } }

        #region Private
        internal DeviceCountTraceData(Action<DeviceCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DeviceCount", DeviceCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DeviceCountTraceData> Action;
        #endregion
    }
    public sealed class DeviceIdentifierTraceData : TraceEvent
    {
        public string DeviceInstanceID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal DeviceIdentifierTraceData(Action<DeviceIdentifierTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "DeviceInstanceID", DeviceInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DeviceIdentifierTraceData> Action;
        #endregion
    }
    public sealed class SourceAppContractCountTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal SourceAppContractCountTraceData(Action<SourceAppContractCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SourceAppContractCountTraceData> Action;
        #endregion
    }
    public sealed class SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData : TraceEvent
    {
        public SecondaryTile_ApiType_ ApiType { get { return (SecondaryTile_ApiType_)GetInt32At(0); } }
        public int X { get { return GetInt32At(4); } }
        public int Y { get { return GetInt32At(8); } }
        public int Width { get { return GetInt32At(12); } }
        public int Height { get { return GetInt32At(16); } }
        public int Placement { get { return GetInt32At(20); } }

        #region Private
        internal SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData(Action<SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApiType", ApiType);
             XmlAttrib(sb, "X", X);
             XmlAttrib(sb, "Y", Y);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             XmlAttrib(sb, "Placement", Placement);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApiType", "X", "Y", "Width", "Height", "Placement"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApiType;
                case 1:
                    return X;
                case 2:
                    return Y;
                case 3:
                    return Width;
                case 4:
                    return Height;
                case 5:
                    return Placement;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SecondaryTileApiTypeTemplateWithRectAndPlacementTraceData> Action;
        #endregion
    }
    public sealed class SecondaryTileApiTypeTemplateTraceData : TraceEvent
    {
        public SecondaryTile_ApiType_ ApiType { get { return (SecondaryTile_ApiType_)GetInt32At(0); } }

        #region Private
        internal SecondaryTileApiTypeTemplateTraceData(Action<SecondaryTileApiTypeTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ApiType", ApiType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ApiType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ApiType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<SecondaryTileApiTypeTemplateTraceData> Action;
        #endregion
    }
    public sealed class ImmersiveOpenWithUIModeTemplateTraceData : TraceEvent
    {
        public int NumApp { get { return GetInt32At(0); } }
        public bool SetDefault { get { return GetInt32At(4) != 0; } }

        #region Private
        internal ImmersiveOpenWithUIModeTemplateTraceData(Action<ImmersiveOpenWithUIModeTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NumApp", NumApp);
             XmlAttrib(sb, "SetDefault", SetDefault);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NumApp", "SetDefault"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NumApp;
                case 1:
                    return SetDefault;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ImmersiveOpenWithUIModeTemplateTraceData> Action;
        #endregion
    }
    public sealed class AppBarUpdateButtonsTraceData : TraceEvent
    {
        public int CurrentVerbCount { get { return GetInt32At(0); } }
        public int PreviousVerbCount { get { return GetInt32At(4); } }

        #region Private
        internal AppBarUpdateButtonsTraceData(Action<AppBarUpdateButtonsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CurrentVerbCount", CurrentVerbCount);
             XmlAttrib(sb, "PreviousVerbCount", PreviousVerbCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CurrentVerbCount", "PreviousVerbCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CurrentVerbCount;
                case 1:
                    return PreviousVerbCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AppBarUpdateButtonsTraceData> Action;
        #endregion
    }
    public sealed class TileManagementPackageInfoTemplateTraceData : TraceEvent
    {
        public string PackageFamilyName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TileManagementPackageInfoTemplateTraceData(Action<TileManagementPackageInfoTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFamilyName", PackageFamilyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFamilyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFamilyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileManagementPackageInfoTemplateTraceData> Action;
        #endregion
    }
    public sealed class TileManagementAppTileRoamingTemplateTraceData : TraceEvent
    {
        public string ParentShortcutPath { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TileManagementAppTileRoamingTemplateTraceData(Action<TileManagementAppTileRoamingTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ParentShortcutPath", ParentShortcutPath);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ParentShortcutPath"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ParentShortcutPath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileManagementAppTileRoamingTemplateTraceData> Action;
        #endregion
    }
    public sealed class TileManagementAppTileInfoTemplateTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TileManagementAppTileInfoTemplateTraceData(Action<TileManagementAppTileInfoTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileManagementAppTileInfoTemplateTraceData> Action;
        #endregion
    }
    public sealed class TileManagementPackageInfoTemplateInstallStateChangeTraceData : TraceEvent
    {
        public string PackageFamilyName { get { return GetUnicodeStringAt(0); } }
        public string InstallState { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal TileManagementPackageInfoTemplateInstallStateChangeTraceData(Action<TileManagementPackageInfoTemplateInstallStateChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PackageFamilyName", PackageFamilyName);
             XmlAttrib(sb, "InstallState", InstallState);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PackageFamilyName", "InstallState", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PackageFamilyName;
                case 1:
                    return InstallState;
                case 2:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileManagementPackageInfoTemplateInstallStateChangeTraceData> Action;
        #endregion
    }
    public sealed class TileManagementAppTileInfoTemplateShortcutChangeTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public int ErrorCode { get { return GetInt32At(SkipUnicodeString(0)); } }

        #region Private
        internal TileManagementAppTileInfoTemplateShortcutChangeTraceData(Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "ErrorCode", ErrorCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "ErrorCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return ErrorCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TileManagementAppTileInfoTemplateShortcutChangeTraceData> Action;
        #endregion
    }
    public sealed class GridSelectedTileCountDataTraceData : TraceEvent
    {
        public int SelectedTileCount { get { return GetInt32At(0); } }

        #region Private
        internal GridSelectedTileCountDataTraceData(Action<GridSelectedTileCountDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SelectedTileCount", SelectedTileCount);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SelectedTileCount"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SelectedTileCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridSelectedTileCountDataTraceData> Action;
        #endregion
    }
    public sealed class LauncherViewTransitionUpdateTypeTraceData : TraceEvent
    {
        public int Type { get { return GetInt32At(0); } }

        #region Private
        internal LauncherViewTransitionUpdateTypeTraceData(Action<LauncherViewTransitionUpdateTypeTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LauncherViewTransitionUpdateTypeTraceData> Action;
        #endregion
    }
    public sealed class GridControllerModelRealizationPhaseTraceData : TraceEvent
    {
        public int ModelRealizationPhase { get { return GetInt32At(0); } }

        #region Private
        internal GridControllerModelRealizationPhaseTraceData(Action<GridControllerModelRealizationPhaseTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ModelRealizationPhase", ModelRealizationPhase);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ModelRealizationPhase"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ModelRealizationPhase;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GridControllerModelRealizationPhaseTraceData> Action;
        #endregion
    }
    public sealed class UninstallFlyoutRemoveTilesTraceData : TraceEvent
    {
        public string AppUserModelID { get { return GetUnicodeStringAt(0); } }
        public string PackageFullName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal UninstallFlyoutRemoveTilesTraceData(Action<UninstallFlyoutRemoveTilesTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal  protected override void Dispatch()
        {
            Action(this);
        }
        internal  protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AppUserModelID", AppUserModelID);
             XmlAttrib(sb, "PackageFullName", PackageFullName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppUserModelID", "PackageFullName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppUserModelID;
                case 1:
                    return PackageFullName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<UninstallFlyoutRemoveTilesTraceData> Action;
        #endregion
    }
        public enum ShellComponentInitializationStep
        {
            being_created_and_publishing_its_services = 1,
            subscribing_to_services = 2,
            preforming_delayed_initialization = 3,
            unsubscribing_from_services = 4,
            shutting_down_services = 5,
        }
        public enum ImmersiveShellLayoutInvalidation
        {
            Layout_Manager_Invalidation_Resolution_Change = 1,
            Layout_Manager_Invalidation_Accessibility_Keyboard_Docking = 4,
            Layout_Manager_Invalidation_Accessibility_Keyboard_Undocking = 5,
            Layout_Manager_Invalidation_Layout_Client_Added = 6,
            Layout_Manager_Invalidation_Layout_Client_Removed = 7,
        }
        public enum ImmersiveShellIHMNotificationType
        {
            IHM_Notification_Type_Showing = 1,
            IHM_Notification_Type_Hiding = 2,
        }
        public enum SecondaryTile_ApiType_
        {
            requestCreateAsync = 1,
            requestDeleteAsync = 2,
        }
        public enum ImmersiveShellToastAppType
        {
            Immersive_App = 0x10000000,
            Desktop_App = 0x20000000,
            System_Component = 0x30000000,
        }
        public enum ImmersiveShellAppManagerApplicationStateChange_
        {
            Application_State_is_unknown = 0,
Application_Started_up = 1,
Application_moved_to_the_foreground_application_is_visible = 2,
Application_moved_to_the_background_app_may_already_be_hidden = 3,
Application_Shown = 4,
Application_Hidden = 5,
Application_Closed = 6,
HSHELL_FLASH_arrived_AND_application_is_in_LockedPresentation_state = 7,
Window_that_application_presents_to_the_end_user_changed = 8,
Application_entered_mobody_band = 9,
Application_exited_mobody_band = 10,
        }
        public enum M_PLM_MemoryPolicy_TerminationExemption
        {
            Package_is_running = 0,
Package_is_being_suspended = 1,
Package_is_being_debugged = 2,
Package_has_an_OS_task_completion_exemption = 3,
Package_contains_a_realtime_communication_app = 4,
        }
        public enum M_PLM_ExemptionType
        {
            Package_is_visible = 0,
Package_is_running_an_OS_task_completion = 1,
Package_is_exempted_by_PackageMgr = 2,
Package_is_running_an_RPC = 3,
        }
        public enum M_PLM_ResumeReason
        {
            User_moved_the_app_to_the_foreground = 0,
IAM_is_showing_the_app = 1,
Remote_procedure_call = 2,
OS_task_completion = 3,
PackageMgr = 4,
User_switch_in = 5,
Connected_standby_exit = 6,
Full_evaluation_of_PLM_policy = 7,
Debug_API = 8,
        }
        public enum M_PLM_PackageState
        {
            PsmApplicationActive = 0,
            PsmApplicationQuiescing = 1,
            PsmApplicationHalted = 2,
            PsmApplicationTerminated = 3,
            Unknown = Int32.MinValue  // David: originally 0xFFFFFFFF,
        }
        public enum PackageRemediationStates
        {
            Normal = 0,
            License_Issue = 1,
            Modified = 2,
            Tampered = 3,
            Updating = 16,
        }
        public enum M_ImmersiveAppLaunchExecutionStates
        {
            Default_execution_didnt_go_through_a_known_execution_codepath = 0,
            Attempted_activation_of_the_application = 1,
            Attempted_launch_of_the_App_Store = 2,
            No_op_due_to_push_button_reset = 3,
        }
        public enum M_LauncherAppStates
        {
            Normal = 0,
            Installing = 1,
            Queued = 2,
            Paused = 3,
            Error = 4,
            Reset = 5,
            Blocked = 6,
        }

}
