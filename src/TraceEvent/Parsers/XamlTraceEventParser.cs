using System;
using System.Text;
using System.Diagnostics;
using Microsoft.Diagnostics.Tracing;
using Microsoft.Diagnostics.Tracing.Parsers;
using Microsoft.Diagnostics.Tracing.Parsers.Xaml;
using Microsoft.Diagnostics.Tracing.Parsers.Wpf;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "1.0")]
    public sealed class XamlTraceEventParser : TraceEventParser
    {
        public new static string ProviderName = "Microsoft-Windows-XAML";
        public static Guid ProviderGuid = new Guid(unchecked((int)0x531a35ab), unchecked((short)0x63ce), unchecked((short)0x4bcf), 0xaa, 0x98, 0xf8, 0x8c, 0x7a, 0x89, 0xe4, 0x55);
        public enum Keywords : long
        {
            Detailed = 0x1,
            Temporary = 0x2,
            Core = 0x4,
            Managed = 0x8,
            Parser = 0x10,
            Text = 0x20,
            Layout = 0x40,
            Controls = 0x80,
            Appmodel = 0x100,
            Databinding = 0x200,
            Templates = 0x400,
            Media = 0x800,
            Rendering = 0x1000,
            Property = 0x2000,
            CachedComposition = 0x4000,
            Input = 0x8000,
        };

        public XamlTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<URITemplateTraceData> ParseXamlBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 1, 1, "ParseXaml", ParseXamlTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ParseXamlTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> ParseXamlEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 2, 1, "ParseXaml", ParseXamlTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ParseXamlTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetBuiltInStyleBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3, 30, "GetBuiltInStyle", GetBuiltInStyleTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, GetBuiltInStyleTaskGuid);
            }
        }
        public event Action<ClassNameDataTraceData> GetBuiltInStyleEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ClassNameDataTraceData(value, 4, 30, "GetBuiltInStyle", GetBuiltInStyleTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, GetBuiltInStyleTaskGuid);
            }
        }
        public event Action<ElementIdClassNameDataTraceData> ApplyTemplateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdClassNameDataTraceData(value, 5, 39, "ApplyTemplate", ApplyTemplateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ApplyTemplateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplyTemplateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6, 39, "ApplyTemplate", ApplyTemplateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ApplyTemplateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClrStartupBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7, 2, "ClrStartup", ClrStartupTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ClrStartupTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClrStartupEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 8, 2, "ClrStartup", ClrStartupTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ClrStartupTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClrShutdownBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9, 3, "ClrShutdown", ClrShutdownTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ClrShutdownTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClrShutdownEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 10, 3, "ClrShutdown", ClrShutdownTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ClrShutdownTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PutRootVisualBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 11, 4, "PutRootVisual", PutRootVisualTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PutRootVisualTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PutRootVisualEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 12, 4, "PutRootVisual", PutRootVisualTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PutRootVisualTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PutSourceBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 13, 5, "PutSource", PutSourceTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PutSourceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PutSourceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 14, 5, "PutSource", PutSourceTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PutSourceTaskGuid);
            }
        }
        public event Action<CallbackNameDataTraceData> EventCallbackBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CallbackNameDataTraceData(value, 15, 16, "EventCallback", EventCallbackTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, EventCallbackTaskGuid);
            }
        }
        public event Action<EmptyTraceData> EventCallbackEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 16, 16, "EventCallback", EventCallbackTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, EventCallbackTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationStartupInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 17, 6, "ApplicationStartup", ApplicationStartupTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ApplicationStartupTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationStartingInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 18, 24, "ApplicationStarting", ApplicationStartingTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ApplicationStartingTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationStartedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 19, 25, "ApplicationStarted", ApplicationStartedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ApplicationStartedTaskGuid);
            }
        }
        public event Action<ComponentNameDataTraceData> ApplicationLoadComponentBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ComponentNameDataTraceData(value, 20, 26, "ApplicationLoadComponent", ApplicationLoadComponentTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ApplicationLoadComponentTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationLoadComponentEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 21, 26, "ApplicationLoadComponent", ApplicationLoadComponentTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ApplicationLoadComponentTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CoreServicesCreateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 22, 27, "CoreServicesCreate", CoreServicesCreateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CoreServicesCreateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CoreServicesCreateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 23, 27, "CoreServicesCreate", CoreServicesCreateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CoreServicesCreateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CoreServicesResetBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 24, 28, "CoreServicesReset", CoreServicesResetTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CoreServicesResetTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CoreServicesResetEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 25, 28, "CoreServicesReset", CoreServicesResetTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CoreServicesResetTaskGuid);
            }
        }
        public event Action<EmptyTraceData> TickInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 26, 31, "Tick", TickTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TickTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ShowWindowBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 27, 7, "ShowWindow", ShowWindowTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ShowWindowTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ShowWindowEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 28, 7, "ShowWindow", ShowWindowTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ShowWindowTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateWindowBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 29, 8, "CreateWindow", CreateWindowTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateWindowTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateWindowEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 30, 8, "CreateWindow", CreateWindowTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateWindowTaskGuid);
            }
        }
        public event Action<EmptyTraceData> InitializeCoreBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 31, 32, "InitializeCore", InitializeCoreTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, InitializeCoreTaskGuid);
            }
        }
        public event Action<EmptyTraceData> InitializeCoreEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 32, 32, "InitializeCore", InitializeCoreTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, InitializeCoreTaskGuid);
            }
        }
        public event Action<EmptyTraceData> InitializeMetadataStoreBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 33, 33, "InitializeMetadataStore", InitializeMetadataStoreTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, InitializeMetadataStoreTaskGuid);
            }
        }
        public event Action<EmptyTraceData> InitializeMetadataStoreEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 34, 33, "InitializeMetadataStore", InitializeMetadataStoreTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, InitializeMetadataStoreTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VideoCaptureFrameInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 35, 42, "VideoCaptureFrame", VideoCaptureFrameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, VideoCaptureFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> HardwareDecodeFrameBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 36, 59, "HardwareDecodeFrame", HardwareDecodeFrameTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, HardwareDecodeFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> HardwareDecodeFrameEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 37, 59, "HardwareDecodeFrame", HardwareDecodeFrameTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, HardwareDecodeFrameTaskGuid);
            }
        }
        public event Action<GraphicsDriverSupportedForVideoTemplateDataTraceData> GraphicsDriverSupportedForVideoDecodeInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GraphicsDriverSupportedForVideoTemplateDataTraceData(value, 38, 60, "GraphicsDriverSupportedForVideoDecode", GraphicsDriverSupportedForVideoDecodeTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, GraphicsDriverSupportedForVideoDecodeTaskGuid);
            }
        }
        public event Action<MediaFullScreenDataTraceData> MediaFullScreenStateInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MediaFullScreenDataTraceData(value, 39, 43, "MediaFullScreenState", MediaFullScreenStateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, MediaFullScreenStateTaskGuid);
            }
        }
        public event Action<MediaOverlapDataTraceData> MediaOverlapStateInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MediaOverlapDataTraceData(value, 40, 44, "MediaOverlapState", MediaOverlapStateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, MediaOverlapStateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> LayoutBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 41, 9, "Layout", LayoutTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, LayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> LayoutEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 42, 9, "Layout", LayoutTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, LayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> MeasureBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 43, 10, "Measure", MeasureTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, MeasureTaskGuid);
            }
        }
        public event Action<EmptyTraceData> MeasureEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 44, 10, "Measure", MeasureTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, MeasureTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ArrangeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 45, 11, "Arrange", ArrangeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ArrangeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ArrangeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 46, 11, "Arrange", ArrangeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ArrangeTaskGuid);
            }
        }
        public event Action<MeasureElementBeginDataTraceData> MeasureElementBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MeasureElementBeginDataTraceData(value, 47, 12, "MeasureElement", MeasureElementTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, MeasureElementTaskGuid);
            }
        }
        public event Action<MeasureElementEndDataTraceData> MeasureElementEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MeasureElementEndDataTraceData(value, 48, 12, "MeasureElement", MeasureElementTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, MeasureElementTaskGuid);
            }
        }
        public event Action<ArrangeElementBeginDataTraceData> ArrangeElementBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ArrangeElementBeginDataTraceData(value, 49, 13, "ArrangeElement", ArrangeElementTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ArrangeElementTaskGuid);
            }
        }
        public event Action<ArrangeElementEndDataTraceData> ArrangeElementEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ArrangeElementEndDataTraceData(value, 50, 13, "ArrangeElement", ArrangeElementTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ArrangeElementTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FireLayoutUpdatedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 51, 14, "FireLayoutUpdated", FireLayoutUpdatedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, FireLayoutUpdatedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FireLayoutUpdatedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 52, 14, "FireLayoutUpdated", FireLayoutUpdatedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, FireLayoutUpdatedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FireSizeChangedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 53, 15, "FireSizeChanged", FireSizeChangedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, FireSizeChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FireSizeChangedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 54, 15, "FireSizeChanged", FireSizeChangedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 54, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, FireSizeChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DynamicTimelineBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 55, 34, "DynamicTimeline", DynamicTimelineTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 55, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DynamicTimelineTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DynamicTimelineEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 56, 34, "DynamicTimeline", DynamicTimelineTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DynamicTimelineTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ProcessLayoutForTransitionBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 57, 35, "ProcessLayoutForTransition", ProcessLayoutForTransitionTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ProcessLayoutForTransitionTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ProcessLayoutForTransitionEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 58, 35, "ProcessLayoutForTransition", ProcessLayoutForTransitionTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ProcessLayoutForTransitionTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RealizeTransitionBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 59, 36, "RealizeTransition", RealizeTransitionTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RealizeTransitionTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RealizeTransitionEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 60, 36, "RealizeTransition", RealizeTransitionTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RealizeTransitionTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> ElementCreatedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 61, 40, "ElementCreated", ElementCreatedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ElementCreatedTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> ElementDestroyedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 62, 41, "ElementDestroyed", ElementDestroyedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ElementDestroyedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FrameBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 63, 22, "Frame", FrameTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, FrameTaskGuid);
            }
        }
        public event Action<RectDataTraceData> FrameInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new RectDataTraceData(value, 64, 22, "Frame", FrameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, FrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FrameEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 65, 22, "Frame", FrameTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, FrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PerFrameCallbackBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 66, 23, "PerFrameCallback", PerFrameCallbackTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 66, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PerFrameCallbackTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PerFrameCallbackEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 67, 23, "PerFrameCallback", PerFrameCallbackTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 67, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PerFrameCallbackTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadPresentBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 68, 45, "RenderThreadPresent", RenderThreadPresentTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 68, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadPresentTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadPresentEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 69, 45, "RenderThreadPresent", RenderThreadPresentTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 69, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadPresentTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreatingHardwareCompositorBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 70, 54, "CreatingHardwareCompositor", CreatingHardwareCompositorTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreatingHardwareCompositorTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreatingHardwareCompositorEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 71, 54, "CreatingHardwareCompositor", CreatingHardwareCompositorTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreatingHardwareCompositorTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreatingMetaSurfaceBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 72, 55, "CreatingMetaSurface", CreatingMetaSurfaceTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreatingMetaSurfaceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreatingMetaSurfaceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 73, 55, "CreatingMetaSurface", CreatingMetaSurfaceTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreatingMetaSurfaceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ResettingMetaSurfacesBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 74, 56, "ResettingMetaSurfaces", ResettingMetaSurfacesTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 74, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ResettingMetaSurfacesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ResettingMetaSurfacesEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 75, 56, "ResettingMetaSurfaces", ResettingMetaSurfacesTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 75, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ResettingMetaSurfacesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateGraphicsDeviceBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 76, 57, "CreateGraphicsDevice", CreateGraphicsDeviceTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 76, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateGraphicsDeviceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateGraphicsDeviceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 77, 57, "CreateGraphicsDevice", CreateGraphicsDeviceTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 77, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateGraphicsDeviceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateAcceleratedGraphicsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 78, 58, "CreateAcceleratedGraphics", CreateAcceleratedGraphicsTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateAcceleratedGraphicsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateAcceleratedGraphicsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 79, 58, "CreateAcceleratedGraphics", CreateAcceleratedGraphicsTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateAcceleratedGraphicsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> HitTestBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 80, 38, "HitTest", HitTestTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, HitTestTaskGuid);
            }
        }
        public event Action<EmptyTraceData> HitTestEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 81, 38, "HitTest", HitTestTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, HitTestTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RefreshTemplateBindingsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 82, 29, "RefreshTemplateBindings", RefreshTemplateBindingsTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RefreshTemplateBindingsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RefreshTemplateBindingsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 83, 29, "RefreshTemplateBindings", RefreshTemplateBindingsTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RefreshTemplateBindingsTaskGuid);
            }
        }
        public event Action<BeginStoryboardDataTraceData> BeginStoryboardInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BeginStoryboardDataTraceData(value, 84, 17, "BeginStoryboard", BeginStoryboardTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, BeginStoryboardTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> PauseStoryboardInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 85, 18, "PauseStoryboard", PauseStoryboardTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 85, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, PauseStoryboardTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> ResumeStoryboardInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 86, 19, "ResumeStoryboard", ResumeStoryboardTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 86, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ResumeStoryboardTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> StopStoryboardInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 87, 20, "StopStoryboard", StopStoryboardTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 87, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, StopStoryboardTaskGuid);
            }
        }
        public event Action<ElementIdDataTraceData> EndStoryboardInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdDataTraceData(value, 88, 21, "EndStoryboard", EndStoryboardTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 88, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, EndStoryboardTaskGuid);
            }
        }
        public event Action<BeginAnimationDataTraceData> AnimationInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BeginAnimationDataTraceData(value, 89, 37, "Animation", AnimationTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 89, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, AnimationTaskGuid);
            }
        }
        public event Action<CacheIdDataTraceData> BitmapCacheCreatedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CacheIdDataTraceData(value, 90, 46, "BitmapCacheCreated", BitmapCacheCreatedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 90, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, BitmapCacheCreatedTaskGuid);
            }
        }
        public event Action<CacheIdDataTraceData> BitmapCacheDestroyedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CacheIdDataTraceData(value, 91, 47, "BitmapCacheDestroyed", BitmapCacheDestroyedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, BitmapCacheDestroyedTaskGuid);
            }
        }
        public event Action<CacheUpdatedDataTraceData> BitmapCacheUpdatedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CacheUpdatedDataTraceData(value, 92, 48, "BitmapCacheUpdated", BitmapCacheUpdatedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 92, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, BitmapCacheUpdatedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderWalkBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 93, 49, "RenderWalk", RenderWalkTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 93, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderWalkTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderWalkEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 94, 49, "RenderWalk", RenderWalkTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 94, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderWalkTaskGuid);
            }
        }
        public event Action<ElementNameDataTraceData> CaptureDrawFrameInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementNameDataTraceData(value, 95, 61, "CaptureDrawFrame", CaptureDrawFrameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 95, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, CaptureDrawFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FindBackgroundPrimitiveBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 96, 50, "FindBackgroundPrimitive", FindBackgroundPrimitiveTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 96, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, FindBackgroundPrimitiveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FindBackgroundPrimitiveEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 97, 50, "FindBackgroundPrimitive", FindBackgroundPrimitiveTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 97, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, FindBackgroundPrimitiveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DrawFrameRateCounterBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 98, 51, "DrawFrameRateCounter", DrawFrameRateCounterTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 98, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DrawFrameRateCounterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DrawFrameRateCounterEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 99, 51, "DrawFrameRateCounter", DrawFrameRateCounterTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 99, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DrawFrameRateCounterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SubmitFrameBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 100, 52, "SubmitFrame", SubmitFrameTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 100, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, SubmitFrameTaskGuid);
            }
        }
        public event Action<FrameIdDataTraceData> SubmitFrameInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FrameIdDataTraceData(value, 101, 52, "SubmitFrame", SubmitFrameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, SubmitFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SubmitFrameEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 102, 52, "SubmitFrame", SubmitFrameTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, SubmitFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DownloadRequestBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 103, 53, "DownloadRequest", DownloadRequestTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DownloadRequestTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DownloadRequestEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 104, 53, "DownloadRequest", DownloadRequestTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DownloadRequestTaskGuid);
            }
        }
        public event Action<FrameCountDataTraceData> SetMaximumFrameLatencyInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FrameCountDataTraceData(value, 105, 113, "SetMaximumFrameLatency", SetMaximumFrameLatencyTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, SetMaximumFrameLatencyTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionUpdatePrimitivesBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 106, 62, "PrimitiveCompositionUpdatePrimitives", PrimitiveCompositionUpdatePrimitivesTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionUpdatePrimitivesTaskGuid);
            }
        }
        public event Action<PrimitiveCompositionUpdatePrimitivesDataTraceData> PrimitiveCompositionUpdatePrimitivesEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PrimitiveCompositionUpdatePrimitivesDataTraceData(value, 107, 62, "PrimitiveCompositionUpdatePrimitives", PrimitiveCompositionUpdatePrimitivesTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionUpdatePrimitivesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionDrawBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 108, 63, "PrimitiveCompositionDraw", PrimitiveCompositionDrawTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionDrawTaskGuid);
            }
        }
        public event Action<PrimitiveCompositionDrawDataTraceData> PrimitiveCompositionDrawEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PrimitiveCompositionDrawDataTraceData(value, 109, 63, "PrimitiveCompositionDraw", PrimitiveCompositionDrawTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionDrawTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionUpdateSurfacesBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 110, 64, "PrimitiveCompositionUpdateSurfaces", PrimitiveCompositionUpdateSurfacesTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionUpdateSurfacesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionUpdateSurfacesEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 111, 64, "PrimitiveCompositionUpdateSurfaces", PrimitiveCompositionUpdateSurfacesTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionUpdateSurfacesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadRenderBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 112, 65, "RenderThreadRender", RenderThreadRenderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadRenderTaskGuid);
            }
        }
        public event Action<FrameIdDataTraceData> RenderThreadRenderInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FrameIdDataTraceData(value, 113, 65, "RenderThreadRender", RenderThreadRenderTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 113, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, RenderThreadRenderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadRenderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 114, 65, "RenderThreadRender", RenderThreadRenderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 114, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadRenderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadFrameBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 115, 66, "RenderThreadFrame", RenderThreadFrameTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 115, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadFrameEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 116, 66, "RenderThreadFrame", RenderThreadFrameTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 116, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadFrameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadDoNotWaitInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 117, 67, "RenderThreadDoNotWait", RenderThreadDoNotWaitTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 117, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, RenderThreadDoNotWaitTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadWaitForVBlankBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 118, 68, "RenderThreadWaitForVBlank", RenderThreadWaitForVBlankTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 118, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadWaitForVBlankTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadWaitForVBlankEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 119, 68, "RenderThreadWaitForVBlank", RenderThreadWaitForVBlankTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 119, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadWaitForVBlankTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadWaitForWorkBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 120, 69, "RenderThreadWaitForWork", RenderThreadWaitForWorkTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 120, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadWaitForWorkTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadWaitForWorkEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 121, 69, "RenderThreadWaitForWork", RenderThreadWaitForWorkTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 121, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadWaitForWorkTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadTickBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 122, 70, "RenderThreadTick", RenderThreadTickTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 122, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RenderThreadTickTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RenderThreadTickEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 123, 70, "RenderThreadTick", RenderThreadTickTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 123, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RenderThreadTickTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionTreeWalkBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 124, 71, "PrimitiveCompositionTreeWalk", PrimitiveCompositionTreeWalkTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 124, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionTreeWalkTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionTreeWalkEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 125, 71, "PrimitiveCompositionTreeWalk", PrimitiveCompositionTreeWalkTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 125, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionTreeWalkTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionEnsureHardwareResourcesBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 126, 72, "PrimitiveCompositionEnsureHardwareResources", PrimitiveCompositionEnsureHardwareResourcesTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 126, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionEnsureHardwareResourcesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionEnsureHardwareResourcesEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 127, 72, "PrimitiveCompositionEnsureHardwareResources", PrimitiveCompositionEnsureHardwareResourcesTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 127, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionEnsureHardwareResourcesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionGenerateInstancesBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 128, 73, "PrimitiveCompositionGenerateInstances", PrimitiveCompositionGenerateInstancesTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 128, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrimitiveCompositionGenerateInstancesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrimitiveCompositionGenerateInstancesEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 129, 73, "PrimitiveCompositionGenerateInstances", PrimitiveCompositionGenerateInstancesTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 129, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrimitiveCompositionGenerateInstancesTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SubmitRetargetBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 130, 74, "SubmitRetarget", SubmitRetargetTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 130, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, SubmitRetargetTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SubmitRetargetEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 131, 74, "SubmitRetarget", SubmitRetargetTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 131, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, SubmitRetargetTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ProcessRetargetBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 132, 75, "ProcessRetarget", ProcessRetargetTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 132, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ProcessRetargetTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ProcessRetargetEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 133, 75, "ProcessRetarget", ProcessRetargetTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 133, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ProcessRetargetTaskGuid);
            }
        }
        public event Action<AlphaModeDataTraceData> SubmitAlphaModeUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AlphaModeDataTraceData(value, 134, 76, "SubmitAlphaModeUpdate", SubmitAlphaModeUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 134, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, SubmitAlphaModeUpdateTaskGuid);
            }
        }
        public event Action<AlphaModeDataTraceData> SubmitAlphaModeUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AlphaModeDataTraceData(value, 135, 76, "SubmitAlphaModeUpdate", SubmitAlphaModeUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 135, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, SubmitAlphaModeUpdateTaskGuid);
            }
        }
        public event Action<AlphaModeDataTraceData> ProcessAlphaModeUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AlphaModeDataTraceData(value, 136, 77, "ProcessAlphaModeUpdate", ProcessAlphaModeUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 136, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ProcessAlphaModeUpdateTaskGuid);
            }
        }
        public event Action<AlphaModeDataTraceData> ProcessAlphaModeUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AlphaModeDataTraceData(value, 137, 77, "ProcessAlphaModeUpdate", ProcessAlphaModeUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 137, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ProcessAlphaModeUpdateTaskGuid);
            }
        }
        public event Action<TextureAtlasDataTraceData> TextureAtlasAllocateInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TextureAtlasDataTraceData(value, 138, 78, "TextureAtlasAllocate", TextureAtlasAllocateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 138, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TextureAtlasAllocateTaskGuid);
            }
        }
        public event Action<IdDataTraceData> TextureAtlasFreeInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new IdDataTraceData(value, 139, 79, "TextureAtlasFree", TextureAtlasFreeTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 139, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TextureAtlasFreeTaskGuid);
            }
        }
        public event Action<TextureAtlasEntryDataTraceData> TextureAtlasEntryAllocateInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TextureAtlasEntryDataTraceData(value, 140, 80, "TextureAtlasEntryAllocate", TextureAtlasEntryAllocateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 140, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TextureAtlasEntryAllocateTaskGuid);
            }
        }
        public event Action<TextureAtlasEntryDataTraceData> TextureAtlasEntryFreeInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TextureAtlasEntryDataTraceData(value, 141, 81, "TextureAtlasEntryFree", TextureAtlasEntryFreeTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 141, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TextureAtlasEntryFreeTaskGuid);
            }
        }
        public event Action<TextureAtlasUtilizationDataTraceData> TextureAtlasUtilizationInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TextureAtlasUtilizationDataTraceData(value, 142, 82, "TextureAtlasUtilization", TextureAtlasUtilizationTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 142, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TextureAtlasUtilizationTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> ImageCacheDownloadBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 143, 83, "ImageCacheDownload", ImageCacheDownloadTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 143, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ImageCacheDownloadTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> ImageCacheDownloadEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 144, 83, "ImageCacheDownload", ImageCacheDownloadTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 144, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ImageCacheDownloadTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> ImageCacheDecodeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 145, 84, "ImageCacheDecode", ImageCacheDecodeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 145, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ImageCacheDecodeTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> ImageCacheDecodeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 146, 84, "ImageCacheDecode", ImageCacheDecodeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 146, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ImageCacheDecodeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DecodeToSurfaceBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 147, 85, "DecodeToSurface", DecodeToSurfaceTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 147, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DecodeToSurfaceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DecodeToSurfaceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 148, 85, "DecodeToSurface", DecodeToSurfaceTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 148, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DecodeToSurfaceTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerDownBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 149, 86, "PointerDown", PointerDownTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 149, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerDownTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerDownEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 150, 86, "PointerDown", PointerDownTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 150, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerDownTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 151, 87, "PointerUpdate", PointerUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 151, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerUpdateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 152, 87, "PointerUpdate", PointerUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 152, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerUpdateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerUpBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 153, 88, "PointerUp", PointerUpTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 153, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerUpTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerUpEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 154, 88, "PointerUp", PointerUpTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 154, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerUpTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerEnterBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 155, 89, "PointerEnter", PointerEnterTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 155, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerEnterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerEnterEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 156, 89, "PointerEnter", PointerEnterTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 156, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerEnterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerLeaveBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 157, 90, "PointerLeave", PointerLeaveTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 157, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerLeaveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerLeaveEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 158, 90, "PointerLeave", PointerLeaveTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 158, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerLeaveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerWheelBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 159, 91, "PointerWheel", PointerWheelTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 159, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerWheelTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerWheelEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 160, 91, "PointerWheel", PointerWheelTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 160, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerWheelTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerHWheelBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 161, 92, "PointerHWheel", PointerHWheelTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 161, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerHWheelTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerHWheelEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 162, 92, "PointerHWheel", PointerHWheelTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 162, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerHWheelTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerCaptureChangedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 163, 93, "PointerCaptureChanged", PointerCaptureChangedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 163, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PointerCaptureChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PointerCaptureChangedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 164, 93, "PointerCaptureChanged", PointerCaptureChangedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 164, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PointerCaptureChangedTaskGuid);
            }
        }
        public event Action<PointerDataTraceData> ProcessPointerInputBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PointerDataTraceData(value, 165, 94, "ProcessPointerInput", ProcessPointerInputTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 165, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ProcessPointerInputTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ProcessPointerInputEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 166, 94, "ProcessPointerInput", ProcessPointerInputTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 166, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ProcessPointerInputTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmSetContactInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 167, 95, "DmSetContact", DmSetContactTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 167, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, DmSetContactTaskGuid);
            }
        }
        public event Action<DmViewportStatusDataTraceData> DmViewportStatusInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportStatusDataTraceData(value, 168, 96, "DmViewportStatus", DmViewportStatusTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 168, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, DmViewportStatusTaskGuid);
            }
        }
        public event Action<DmViewportStatusDataTraceData> DmViewportStatusUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportStatusDataTraceData(value, 169, 97, "DmViewportStatusUpdate", DmViewportStatusUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 169, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmViewportStatusUpdateTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmViewportStatusUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 170, 97, "DmViewportStatusUpdate", DmViewportStatusUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 170, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmViewportStatusUpdateTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmViewportValuesUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 171, 98, "DmViewportValuesUpdate", DmViewportValuesUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 171, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmViewportValuesUpdateTaskGuid);
            }
        }
        public event Action<DmViewportValuesDataTraceData> DmViewportValuesUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportValuesDataTraceData(value, 172, 98, "DmViewportValuesUpdate", DmViewportValuesUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 172, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmViewportValuesUpdateTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmCompositorViewportValuesUpdateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 173, 99, "DmCompositorViewportValuesUpdate", DmCompositorViewportValuesUpdateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 173, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmCompositorViewportValuesUpdateTaskGuid);
            }
        }
        public event Action<DmViewportValuesDataTraceData> DmCompositorViewportValuesUpdateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportValuesDataTraceData(value, 174, 99, "DmCompositorViewportValuesUpdate", DmCompositorViewportValuesUpdateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 174, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmCompositorViewportValuesUpdateTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmCompositorViewportAddedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 175, 100, "DmCompositorViewportAdded", DmCompositorViewportAddedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 175, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, DmCompositorViewportAddedTaskGuid);
            }
        }
        public event Action<DmViewportDataTraceData> DmCompositorViewportRemovedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DmViewportDataTraceData(value, 176, 101, "DmCompositorViewportRemoved", DmCompositorViewportRemovedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 176, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, DmCompositorViewportRemovedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmInitializeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 177, 104, "DmInitialize", DmInitializeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 177, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmInitializeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmInitializeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 178, 104, "DmInitialize", DmInitializeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 178, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmInitializeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmSetDummyContainerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 179, 105, "DmSetDummyContainer", DmSetDummyContainerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 179, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmSetDummyContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmSetDummyContainerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 180, 105, "DmSetDummyContainer", DmSetDummyContainerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 180, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmSetDummyContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmStartDummyContainersBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 181, 106, "DmStartDummyContainers", DmStartDummyContainersTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 181, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmStartDummyContainersTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmStartDummyContainersEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 182, 106, "DmStartDummyContainers", DmStartDummyContainersTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 182, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmStartDummyContainersTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmDummyContainerCompletedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 183, 111, "DmDummyContainerCompleted", DmDummyContainerCompletedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 183, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DmDummyContainerCompletedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DmDummyContainerCompletedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 184, 111, "DmDummyContainerCompleted", DmDummyContainerCompletedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 184, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DmDummyContainerCompletedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RegisterInputPaneHandlerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 185, 102, "RegisterInputPaneHandler", RegisterInputPaneHandlerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 185, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RegisterInputPaneHandlerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RegisterInputPaneHandlerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 186, 102, "RegisterInputPaneHandler", RegisterInputPaneHandlerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 186, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RegisterInputPaneHandlerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> TouchHitTestingBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 187, 103, "TouchHitTesting", TouchHitTestingTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 187, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, TouchHitTestingTaskGuid);
            }
        }
        public event Action<FloatRectDataTraceData> TouchHitTestingEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FloatRectDataTraceData(value, 188, 103, "TouchHitTesting", TouchHitTestingTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 188, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, TouchHitTestingTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateSwipeRecognizerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 189, 107, "CreateSwipeRecognizer", CreateSwipeRecognizerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 189, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateSwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateSwipeRecognizerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 190, 107, "CreateSwipeRecognizer", CreateSwipeRecognizerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 190, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateSwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DestroySwipeRecognizerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 191, 110, "DestroySwipeRecognizer", DestroySwipeRecognizerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 191, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DestroySwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DestroySwipeRecognizerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 192, 110, "DestroySwipeRecognizer", DestroySwipeRecognizerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 192, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DestroySwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FeedSwipeRecognizerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 193, 112, "FeedSwipeRecognizer", FeedSwipeRecognizerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 193, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, FeedSwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> FeedSwipeRecognizerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 194, 112, "FeedSwipeRecognizer", FeedSwipeRecognizerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 194, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, FeedSwipeRecognizerTaskGuid);
            }
        }
        public event Action<PointerDataTraceData> FeedSwipeRecognizerInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PointerDataTraceData(value, 195, 112, "FeedSwipeRecognizer", FeedSwipeRecognizerTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 195, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, FeedSwipeRecognizerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SwipeUnrecognizedInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 196, 109, "SwipeUnrecognized", SwipeUnrecognizedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 196, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, SwipeUnrecognizedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SwipingBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 197, 108, "Swiping", SwipingTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 197, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, SwipingTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SwipingEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 198, 108, "Swiping", SwipingTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 198, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, SwipingTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationMeasureBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 199, 114, "VirtualizationMeasure", VirtualizationMeasureTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 199, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, VirtualizationMeasureTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationMeasureEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 200, 114, "VirtualizationMeasure", VirtualizationMeasureTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 200, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, VirtualizationMeasureTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationCleanupBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 201, 115, "VirtualizationCleanup", VirtualizationCleanupTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 201, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, VirtualizationCleanupTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationCleanupEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 202, 115, "VirtualizationCleanup", VirtualizationCleanupTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 202, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, VirtualizationCleanupTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationAddBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 203, 116, "VirtualizationAdd", VirtualizationAddTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 203, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, VirtualizationAddTaskGuid);
            }
        }
        public event Action<EmptyTraceData> VirtualizationAddEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 204, 116, "VirtualizationAdd", VirtualizationAddTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 204, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, VirtualizationAddTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GenerateContainerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 205, 117, "GenerateContainer", GenerateContainerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 205, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, GenerateContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GenerateContainerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 206, 117, "GenerateContainer", GenerateContainerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 206, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, GenerateContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> MeasureChildBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 207, 118, "MeasureChild", MeasureChildTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 207, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, MeasureChildTaskGuid);
            }
        }
        public event Action<EmptyTraceData> MeasureChildEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 208, 118, "MeasureChild", MeasureChildTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 208, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, MeasureChildTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrepareContainerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 209, 119, "PrepareContainer", PrepareContainerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 209, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, PrepareContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> PrepareContainerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 210, 119, "PrepareContainer", PrepareContainerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 210, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, PrepareContainerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateLogicalScrollDataBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 211, 120, "UpdateLogicalScrollData", UpdateLogicalScrollDataTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 211, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, UpdateLogicalScrollDataTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateLogicalScrollDataEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 212, 120, "UpdateLogicalScrollData", UpdateLogicalScrollDataTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 212, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, UpdateLogicalScrollDataTaskGuid);
            }
        }
        public event Action<ElementIdNameDataTraceData> ElementSetNameInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ElementIdNameDataTraceData(value, 213, 121, "ElementSetName", ElementSetNameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 213, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ElementSetNameTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationSuspendBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 214, 122, "ApplicationSuspend", ApplicationSuspendTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 214, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ApplicationSuspendTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationSuspendEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 215, 122, "ApplicationSuspend", ApplicationSuspendTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 215, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ApplicationSuspendTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationResumeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 216, 123, "ApplicationResume", ApplicationResumeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 216, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ApplicationResumeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ApplicationResumeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 217, 123, "ApplicationResume", ApplicationResumeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 217, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ApplicationResumeTaskGuid);
            }
        }

        #region Event ID Definitions
        public const TraceEventID ParseXamlBeginEventID = (TraceEventID)1;
        public const TraceEventID ParseXamlEndEventID = (TraceEventID)2;
        public const TraceEventID GetBuiltInStyleBeginEventID = (TraceEventID)3;
        public const TraceEventID GetBuiltInStyleEndEventID = (TraceEventID)4;
        public const TraceEventID ApplyTemplateBeginEventID = (TraceEventID)5;
        public const TraceEventID ApplyTemplateEndEventID = (TraceEventID)6;
        public const TraceEventID ClrStartupBeginEventID = (TraceEventID)7;
        public const TraceEventID ClrStartupEndEventID = (TraceEventID)8;
        public const TraceEventID ClrShutdownBeginEventID = (TraceEventID)9;
        public const TraceEventID ClrShutdownEndEventID = (TraceEventID)10;
        public const TraceEventID PutRootVisualBeginEventID = (TraceEventID)11;
        public const TraceEventID PutRootVisualEndEventID = (TraceEventID)12;
        public const TraceEventID PutSourceBeginEventID = (TraceEventID)13;
        public const TraceEventID PutSourceEndEventID = (TraceEventID)14;
        public const TraceEventID EventCallbackBeginEventID = (TraceEventID)15;
        public const TraceEventID EventCallbackEndEventID = (TraceEventID)16;
        public const TraceEventID ApplicationStartupInfoEventID = (TraceEventID)17;
        public const TraceEventID ApplicationStartingInfoEventID = (TraceEventID)18;
        public const TraceEventID ApplicationStartedInfoEventID = (TraceEventID)19;
        public const TraceEventID ApplicationLoadComponentBeginEventID = (TraceEventID)20;
        public const TraceEventID ApplicationLoadComponentEndEventID = (TraceEventID)21;
        public const TraceEventID CoreServicesCreateBeginEventID = (TraceEventID)22;
        public const TraceEventID CoreServicesCreateEndEventID = (TraceEventID)23;
        public const TraceEventID CoreServicesResetBeginEventID = (TraceEventID)24;
        public const TraceEventID CoreServicesResetEndEventID = (TraceEventID)25;
        public const TraceEventID TickInfoEventID = (TraceEventID)26;
        public const TraceEventID ShowWindowBeginEventID = (TraceEventID)27;
        public const TraceEventID ShowWindowEndEventID = (TraceEventID)28;
        public const TraceEventID CreateWindowBeginEventID = (TraceEventID)29;
        public const TraceEventID CreateWindowEndEventID = (TraceEventID)30;
        public const TraceEventID InitializeCoreBeginEventID = (TraceEventID)31;
        public const TraceEventID InitializeCoreEndEventID = (TraceEventID)32;
        public const TraceEventID InitializeMetadataStoreBeginEventID = (TraceEventID)33;
        public const TraceEventID InitializeMetadataStoreEndEventID = (TraceEventID)34;
        public const TraceEventID VideoCaptureFrameInfoEventID = (TraceEventID)35;
        public const TraceEventID HardwareDecodeFrameBeginEventID = (TraceEventID)36;
        public const TraceEventID HardwareDecodeFrameEndEventID = (TraceEventID)37;
        public const TraceEventID GraphicsDriverSupportedForVideoDecodeInfoEventID = (TraceEventID)38;
        public const TraceEventID MediaFullScreenStateInfoEventID = (TraceEventID)39;
        public const TraceEventID MediaOverlapStateInfoEventID = (TraceEventID)40;
        public const TraceEventID LayoutBeginEventID = (TraceEventID)41;
        public const TraceEventID LayoutEndEventID = (TraceEventID)42;
        public const TraceEventID MeasureBeginEventID = (TraceEventID)43;
        public const TraceEventID MeasureEndEventID = (TraceEventID)44;
        public const TraceEventID ArrangeBeginEventID = (TraceEventID)45;
        public const TraceEventID ArrangeEndEventID = (TraceEventID)46;
        public const TraceEventID MeasureElementBeginEventID = (TraceEventID)47;
        public const TraceEventID MeasureElementEndEventID = (TraceEventID)48;
        public const TraceEventID ArrangeElementBeginEventID = (TraceEventID)49;
        public const TraceEventID ArrangeElementEndEventID = (TraceEventID)50;
        public const TraceEventID FireLayoutUpdatedBeginEventID = (TraceEventID)51;
        public const TraceEventID FireLayoutUpdatedEndEventID = (TraceEventID)52;
        public const TraceEventID FireSizeChangedBeginEventID = (TraceEventID)53;
        public const TraceEventID FireSizeChangedEndEventID = (TraceEventID)54;
        public const TraceEventID DynamicTimelineBeginEventID = (TraceEventID)55;
        public const TraceEventID DynamicTimelineEndEventID = (TraceEventID)56;
        public const TraceEventID ProcessLayoutForTransitionBeginEventID = (TraceEventID)57;
        public const TraceEventID ProcessLayoutForTransitionEndEventID = (TraceEventID)58;
        public const TraceEventID RealizeTransitionBeginEventID = (TraceEventID)59;
        public const TraceEventID RealizeTransitionEndEventID = (TraceEventID)60;
        public const TraceEventID ElementCreatedInfoEventID = (TraceEventID)61;
        public const TraceEventID ElementDestroyedInfoEventID = (TraceEventID)62;
        public const TraceEventID FrameBeginEventID = (TraceEventID)63;
        public const TraceEventID FrameInfoEventID = (TraceEventID)64;
        public const TraceEventID FrameEndEventID = (TraceEventID)65;
        public const TraceEventID PerFrameCallbackBeginEventID = (TraceEventID)66;
        public const TraceEventID PerFrameCallbackEndEventID = (TraceEventID)67;
        public const TraceEventID RenderThreadPresentBeginEventID = (TraceEventID)68;
        public const TraceEventID RenderThreadPresentEndEventID = (TraceEventID)69;
        public const TraceEventID CreatingHardwareCompositorBeginEventID = (TraceEventID)70;
        public const TraceEventID CreatingHardwareCompositorEndEventID = (TraceEventID)71;
        public const TraceEventID CreatingMetaSurfaceBeginEventID = (TraceEventID)72;
        public const TraceEventID CreatingMetaSurfaceEndEventID = (TraceEventID)73;
        public const TraceEventID ResettingMetaSurfacesBeginEventID = (TraceEventID)74;
        public const TraceEventID ResettingMetaSurfacesEndEventID = (TraceEventID)75;
        public const TraceEventID CreateGraphicsDeviceBeginEventID = (TraceEventID)76;
        public const TraceEventID CreateGraphicsDeviceEndEventID = (TraceEventID)77;
        public const TraceEventID CreateAcceleratedGraphicsBeginEventID = (TraceEventID)78;
        public const TraceEventID CreateAcceleratedGraphicsEndEventID = (TraceEventID)79;
        public const TraceEventID HitTestBeginEventID = (TraceEventID)80;
        public const TraceEventID HitTestEndEventID = (TraceEventID)81;
        public const TraceEventID RefreshTemplateBindingsBeginEventID = (TraceEventID)82;
        public const TraceEventID RefreshTemplateBindingsEndEventID = (TraceEventID)83;
        public const TraceEventID BeginStoryboardInfoEventID = (TraceEventID)84;
        public const TraceEventID PauseStoryboardInfoEventID = (TraceEventID)85;
        public const TraceEventID ResumeStoryboardInfoEventID = (TraceEventID)86;
        public const TraceEventID StopStoryboardInfoEventID = (TraceEventID)87;
        public const TraceEventID EndStoryboardInfoEventID = (TraceEventID)88;
        public const TraceEventID AnimationInfoEventID = (TraceEventID)89;
        public const TraceEventID BitmapCacheCreatedInfoEventID = (TraceEventID)90;
        public const TraceEventID BitmapCacheDestroyedInfoEventID = (TraceEventID)91;
        public const TraceEventID BitmapCacheUpdatedInfoEventID = (TraceEventID)92;
        public const TraceEventID RenderWalkBeginEventID = (TraceEventID)93;
        public const TraceEventID RenderWalkEndEventID = (TraceEventID)94;
        public const TraceEventID CaptureDrawFrameInfoEventID = (TraceEventID)95;
        public const TraceEventID FindBackgroundPrimitiveBeginEventID = (TraceEventID)96;
        public const TraceEventID FindBackgroundPrimitiveEndEventID = (TraceEventID)97;
        public const TraceEventID DrawFrameRateCounterBeginEventID = (TraceEventID)98;
        public const TraceEventID DrawFrameRateCounterEndEventID = (TraceEventID)99;
        public const TraceEventID SubmitFrameBeginEventID = (TraceEventID)100;
        public const TraceEventID SubmitFrameInfoEventID = (TraceEventID)101;
        public const TraceEventID SubmitFrameEndEventID = (TraceEventID)102;
        public const TraceEventID DownloadRequestBeginEventID = (TraceEventID)103;
        public const TraceEventID DownloadRequestEndEventID = (TraceEventID)104;
        public const TraceEventID SetMaximumFrameLatencyInfoEventID = (TraceEventID)105;
        public const TraceEventID PrimitiveCompositionUpdatePrimitivesBeginEventID = (TraceEventID)106;
        public const TraceEventID PrimitiveCompositionUpdatePrimitivesEndEventID = (TraceEventID)107;
        public const TraceEventID PrimitiveCompositionDrawBeginEventID = (TraceEventID)108;
        public const TraceEventID PrimitiveCompositionDrawEndEventID = (TraceEventID)109;
        public const TraceEventID PrimitiveCompositionUpdateSurfacesBeginEventID = (TraceEventID)110;
        public const TraceEventID PrimitiveCompositionUpdateSurfacesEndEventID = (TraceEventID)111;
        public const TraceEventID RenderThreadRenderBeginEventID = (TraceEventID)112;
        public const TraceEventID RenderThreadRenderInfoEventID = (TraceEventID)113;
        public const TraceEventID RenderThreadRenderEndEventID = (TraceEventID)114;
        public const TraceEventID RenderThreadFrameBeginEventID = (TraceEventID)115;
        public const TraceEventID RenderThreadFrameEndEventID = (TraceEventID)116;
        public const TraceEventID RenderThreadDoNotWaitInfoEventID = (TraceEventID)117;
        public const TraceEventID RenderThreadWaitForVBlankBeginEventID = (TraceEventID)118;
        public const TraceEventID RenderThreadWaitForVBlankEndEventID = (TraceEventID)119;
        public const TraceEventID RenderThreadWaitForWorkBeginEventID = (TraceEventID)120;
        public const TraceEventID RenderThreadWaitForWorkEndEventID = (TraceEventID)121;
        public const TraceEventID RenderThreadTickBeginEventID = (TraceEventID)122;
        public const TraceEventID RenderThreadTickEndEventID = (TraceEventID)123;
        public const TraceEventID PrimitiveCompositionTreeWalkBeginEventID = (TraceEventID)124;
        public const TraceEventID PrimitiveCompositionTreeWalkEndEventID = (TraceEventID)125;
        public const TraceEventID PrimitiveCompositionEnsureHardwareResourcesBeginEventID = (TraceEventID)126;
        public const TraceEventID PrimitiveCompositionEnsureHardwareResourcesEndEventID = (TraceEventID)127;
        public const TraceEventID PrimitiveCompositionGenerateInstancesBeginEventID = (TraceEventID)128;
        public const TraceEventID PrimitiveCompositionGenerateInstancesEndEventID = (TraceEventID)129;
        public const TraceEventID SubmitRetargetBeginEventID = (TraceEventID)130;
        public const TraceEventID SubmitRetargetEndEventID = (TraceEventID)131;
        public const TraceEventID ProcessRetargetBeginEventID = (TraceEventID)132;
        public const TraceEventID ProcessRetargetEndEventID = (TraceEventID)133;
        public const TraceEventID SubmitAlphaModeUpdateBeginEventID = (TraceEventID)134;
        public const TraceEventID SubmitAlphaModeUpdateEndEventID = (TraceEventID)135;
        public const TraceEventID ProcessAlphaModeUpdateBeginEventID = (TraceEventID)136;
        public const TraceEventID ProcessAlphaModeUpdateEndEventID = (TraceEventID)137;
        public const TraceEventID TextureAtlasAllocateInfoEventID = (TraceEventID)138;
        public const TraceEventID TextureAtlasFreeInfoEventID = (TraceEventID)139;
        public const TraceEventID TextureAtlasEntryAllocateInfoEventID = (TraceEventID)140;
        public const TraceEventID TextureAtlasEntryFreeInfoEventID = (TraceEventID)141;
        public const TraceEventID TextureAtlasUtilizationInfoEventID = (TraceEventID)142;
        public const TraceEventID ImageCacheDownloadBeginEventID = (TraceEventID)143;
        public const TraceEventID ImageCacheDownloadEndEventID = (TraceEventID)144;
        public const TraceEventID ImageCacheDecodeBeginEventID = (TraceEventID)145;
        public const TraceEventID ImageCacheDecodeEndEventID = (TraceEventID)146;
        public const TraceEventID DecodeToSurfaceBeginEventID = (TraceEventID)147;
        public const TraceEventID DecodeToSurfaceEndEventID = (TraceEventID)148;
        public const TraceEventID PointerDownBeginEventID = (TraceEventID)149;
        public const TraceEventID PointerDownEndEventID = (TraceEventID)150;
        public const TraceEventID PointerUpdateBeginEventID = (TraceEventID)151;
        public const TraceEventID PointerUpdateEndEventID = (TraceEventID)152;
        public const TraceEventID PointerUpBeginEventID = (TraceEventID)153;
        public const TraceEventID PointerUpEndEventID = (TraceEventID)154;
        public const TraceEventID PointerEnterBeginEventID = (TraceEventID)155;
        public const TraceEventID PointerEnterEndEventID = (TraceEventID)156;
        public const TraceEventID PointerLeaveBeginEventID = (TraceEventID)157;
        public const TraceEventID PointerLeaveEndEventID = (TraceEventID)158;
        public const TraceEventID PointerWheelBeginEventID = (TraceEventID)159;
        public const TraceEventID PointerWheelEndEventID = (TraceEventID)160;
        public const TraceEventID PointerHWheelBeginEventID = (TraceEventID)161;
        public const TraceEventID PointerHWheelEndEventID = (TraceEventID)162;
        public const TraceEventID PointerCaptureChangedBeginEventID = (TraceEventID)163;
        public const TraceEventID PointerCaptureChangedEndEventID = (TraceEventID)164;
        public const TraceEventID ProcessPointerInputBeginEventID = (TraceEventID)165;
        public const TraceEventID ProcessPointerInputEndEventID = (TraceEventID)166;
        public const TraceEventID DmSetContactInfoEventID = (TraceEventID)167;
        public const TraceEventID DmViewportStatusInfoEventID = (TraceEventID)168;
        public const TraceEventID DmViewportStatusUpdateBeginEventID = (TraceEventID)169;
        public const TraceEventID DmViewportStatusUpdateEndEventID = (TraceEventID)170;
        public const TraceEventID DmViewportValuesUpdateBeginEventID = (TraceEventID)171;
        public const TraceEventID DmViewportValuesUpdateEndEventID = (TraceEventID)172;
        public const TraceEventID DmCompositorViewportValuesUpdateBeginEventID = (TraceEventID)173;
        public const TraceEventID DmCompositorViewportValuesUpdateEndEventID = (TraceEventID)174;
        public const TraceEventID DmCompositorViewportAddedInfoEventID = (TraceEventID)175;
        public const TraceEventID DmCompositorViewportRemovedInfoEventID = (TraceEventID)176;
        public const TraceEventID DmInitializeBeginEventID = (TraceEventID)177;
        public const TraceEventID DmInitializeEndEventID = (TraceEventID)178;
        public const TraceEventID DmSetDummyContainerBeginEventID = (TraceEventID)179;
        public const TraceEventID DmSetDummyContainerEndEventID = (TraceEventID)180;
        public const TraceEventID DmStartDummyContainersBeginEventID = (TraceEventID)181;
        public const TraceEventID DmStartDummyContainersEndEventID = (TraceEventID)182;
        public const TraceEventID DmDummyContainerCompletedBeginEventID = (TraceEventID)183;
        public const TraceEventID DmDummyContainerCompletedEndEventID = (TraceEventID)184;
        public const TraceEventID RegisterInputPaneHandlerBeginEventID = (TraceEventID)185;
        public const TraceEventID RegisterInputPaneHandlerEndEventID = (TraceEventID)186;
        public const TraceEventID TouchHitTestingBeginEventID = (TraceEventID)187;
        public const TraceEventID TouchHitTestingEndEventID = (TraceEventID)188;
        public const TraceEventID CreateSwipeRecognizerBeginEventID = (TraceEventID)189;
        public const TraceEventID CreateSwipeRecognizerEndEventID = (TraceEventID)190;
        public const TraceEventID DestroySwipeRecognizerBeginEventID = (TraceEventID)191;
        public const TraceEventID DestroySwipeRecognizerEndEventID = (TraceEventID)192;
        public const TraceEventID FeedSwipeRecognizerBeginEventID = (TraceEventID)193;
        public const TraceEventID FeedSwipeRecognizerEndEventID = (TraceEventID)194;
        public const TraceEventID FeedSwipeRecognizerInfoEventID = (TraceEventID)195;
        public const TraceEventID SwipeUnrecognizedInfoEventID = (TraceEventID)196;
        public const TraceEventID SwipingBeginEventID = (TraceEventID)197;
        public const TraceEventID SwipingEndEventID = (TraceEventID)198;
        public const TraceEventID VirtualizationMeasureBeginEventID = (TraceEventID)199;
        public const TraceEventID VirtualizationMeasureEndEventID = (TraceEventID)200;
        public const TraceEventID VirtualizationCleanupBeginEventID = (TraceEventID)201;
        public const TraceEventID VirtualizationCleanupEndEventID = (TraceEventID)202;
        public const TraceEventID VirtualizationAddBeginEventID = (TraceEventID)203;
        public const TraceEventID VirtualizationAddEndEventID = (TraceEventID)204;
        public const TraceEventID GenerateContainerBeginEventID = (TraceEventID)205;
        public const TraceEventID GenerateContainerEndEventID = (TraceEventID)206;
        public const TraceEventID MeasureChildBeginEventID = (TraceEventID)207;
        public const TraceEventID MeasureChildEndEventID = (TraceEventID)208;
        public const TraceEventID PrepareContainerBeginEventID = (TraceEventID)209;
        public const TraceEventID PrepareContainerEndEventID = (TraceEventID)210;
        public const TraceEventID UpdateLogicalScrollDataBeginEventID = (TraceEventID)211;
        public const TraceEventID UpdateLogicalScrollDataEndEventID = (TraceEventID)212;
        public const TraceEventID ElementSetNameInfoEventID = (TraceEventID)213;
        public const TraceEventID ApplicationSuspendBeginEventID = (TraceEventID)214;
        public const TraceEventID ApplicationSuspendEndEventID = (TraceEventID)215;
        public const TraceEventID ApplicationResumeBeginEventID = (TraceEventID)216;
        public const TraceEventID ApplicationResumeEndEventID = (TraceEventID)217;
        #endregion

        #region private
        private static Guid ParseXamlTaskGuid = new Guid(unchecked((int)0x9835e264), unchecked((short)0x04b9), unchecked((short)0x4ee1), 0x8f, 0x0d, 0x66, 0x6c, 0x1a, 0x86, 0xea, 0x24);
        private static Guid ClrStartupTaskGuid = new Guid(unchecked((int)0x84d1c136), unchecked((short)0x7de5), unchecked((short)0x46c9), 0xb5, 0xb7, 0x26, 0x43, 0x25, 0xc4, 0xa0, 0x1c);
        private static Guid ClrShutdownTaskGuid = new Guid(unchecked((int)0x8a537cd0), unchecked((short)0xcf1e), unchecked((short)0x4d92), 0x9c, 0x8b, 0xa0, 0x05, 0xae, 0x1d, 0xd4, 0x01);
        private static Guid PutRootVisualTaskGuid = new Guid(unchecked((int)0xa72c6400), unchecked((short)0x7ef2), unchecked((short)0x4355), 0xb2, 0x31, 0xe3, 0x8f, 0xe4, 0xd6, 0x3a, 0x84);
        private static Guid PutSourceTaskGuid = new Guid(unchecked((int)0xea919d73), unchecked((short)0x2960), unchecked((short)0x49e4), 0x86, 0x49, 0xf4, 0x41, 0xe0, 0x2f, 0x58, 0xcd);
        private static Guid ApplicationStartupTaskGuid = new Guid(unchecked((int)0x3b99be34), unchecked((short)0xa702), unchecked((short)0x477a), 0xbf, 0xff, 0x3b, 0xef, 0xde, 0xfd, 0x5c, 0x0e);
        private static Guid ShowWindowTaskGuid = new Guid(unchecked((int)0x054a51c3), unchecked((short)0x97f7), unchecked((short)0x4bcc), 0xa0, 0x20, 0x16, 0x93, 0xc1, 0xf0, 0x84, 0x96);
        private static Guid CreateWindowTaskGuid = new Guid(unchecked((int)0x0ae1d84a), unchecked((short)0xca23), unchecked((short)0x46e2), 0xbf, 0x63, 0x37, 0x2f, 0xbb, 0xbe, 0x99, 0x29);
        private static Guid LayoutTaskGuid = new Guid(unchecked((int)0xcabe0ce7), unchecked((short)0x8e44), unchecked((short)0x430a), 0x87, 0x7b, 0x2c, 0xab, 0xa2, 0xa5, 0x22, 0x7d);
        private static Guid MeasureTaskGuid = new Guid(unchecked((int)0x475921e0), unchecked((short)0x1cdb), unchecked((short)0x4467), 0xbb, 0x77, 0xee, 0x00, 0x9f, 0x51, 0x60, 0x46);
        private static Guid ArrangeTaskGuid = new Guid(unchecked((int)0x4eb265ae), unchecked((short)0x95b3), unchecked((short)0x4ce3), 0x89, 0x08, 0x2f, 0x9f, 0x0b, 0x2f, 0x59, 0x50);
        private static Guid MeasureElementTaskGuid = new Guid(unchecked((int)0x74acf5e2), unchecked((short)0x585f), unchecked((short)0x4639), 0xbc, 0xce, 0x5d, 0x32, 0x80, 0x05, 0x8d, 0x3b);
        private static Guid ArrangeElementTaskGuid = new Guid(unchecked((int)0xf4fb719b), unchecked((short)0xd48b), unchecked((short)0x4b74), 0x8e, 0xb4, 0x66, 0x9c, 0x0b, 0x20, 0x04, 0x1d);
        private static Guid FireLayoutUpdatedTaskGuid = new Guid(unchecked((int)0xbe75c388), unchecked((short)0x7935), unchecked((short)0x453e), 0xb2, 0xca, 0x49, 0x05, 0xf6, 0x3f, 0xf8, 0x12);
        private static Guid FireSizeChangedTaskGuid = new Guid(unchecked((int)0xe48697de), unchecked((short)0xf9e6), unchecked((short)0x42fd), 0x83, 0x67, 0x38, 0x14, 0x45, 0x06, 0x8a, 0x8c);
        private static Guid EventCallbackTaskGuid = new Guid(unchecked((int)0xbf317e0f), unchecked((short)0x9a21), unchecked((short)0x42b8), 0x9d, 0xfb, 0xa3, 0xf5, 0x8e, 0x42, 0x4d, 0x82);
        private static Guid BeginStoryboardTaskGuid = new Guid(unchecked((int)0xb7748228), unchecked((short)0x7f93), unchecked((short)0x4775), 0xae, 0xc1, 0x93, 0xfb, 0x35, 0x5e, 0x0d, 0x74);
        private static Guid PauseStoryboardTaskGuid = new Guid(unchecked((int)0x38880998), unchecked((short)0x3d4c), unchecked((short)0x4c8d), 0x9f, 0x98, 0xeb, 0x19, 0x26, 0x84, 0x13, 0xef);
        private static Guid ResumeStoryboardTaskGuid = new Guid(unchecked((int)0x5e638a49), unchecked((short)0x51ae), unchecked((short)0x48fc), 0x93, 0xe9, 0x1f, 0x46, 0x83, 0xd1, 0x89, 0xab);
        private static Guid StopStoryboardTaskGuid = new Guid(unchecked((int)0xbbdf745f), unchecked((short)0x2962), unchecked((short)0x4d75), 0xae, 0x96, 0x2b, 0xff, 0xa0, 0x97, 0xd0, 0xa2);
        private static Guid EndStoryboardTaskGuid = new Guid(unchecked((int)0xbd3f602a), unchecked((short)0x557a), unchecked((short)0x47eb), 0x9f, 0x0f, 0xb9, 0x7c, 0x0e, 0x29, 0x84, 0xe2);
        private static Guid FrameTaskGuid = new Guid(unchecked((int)0x9ee4b089), unchecked((short)0x164b), unchecked((short)0x4038), 0xac, 0x71, 0xcd, 0x41, 0xf6, 0x49, 0xb7, 0xad);
        private static Guid PerFrameCallbackTaskGuid = new Guid(unchecked((int)0x600c2568), unchecked((short)0x1af2), unchecked((short)0x4981), 0x8a, 0x60, 0x99, 0x0f, 0xe4, 0x15, 0xff, 0x0f);
        private static Guid ApplicationStartingTaskGuid = new Guid(unchecked((int)0x1278aa8d), unchecked((short)0x101b), unchecked((short)0x4ffa), 0xac, 0xc8, 0x82, 0x04, 0x87, 0x3f, 0x5a, 0x0e);
        private static Guid ApplicationStartedTaskGuid = new Guid(unchecked((int)0x734cf386), unchecked((short)0x713f), unchecked((short)0x4249), 0xba, 0x85, 0x4a, 0x47, 0x8b, 0xe8, 0x39, 0xc9);
        private static Guid ApplicationLoadComponentTaskGuid = new Guid(unchecked((int)0xcdcdc866), unchecked((short)0xb51a), unchecked((short)0x41ac), 0x8f, 0x07, 0x44, 0x7c, 0x82, 0x22, 0x4a, 0xf8);
        private static Guid CoreServicesCreateTaskGuid = new Guid(unchecked((int)0xcdbab665), unchecked((short)0x217e), unchecked((short)0x40a0), 0x9f, 0x8c, 0x39, 0x16, 0xa9, 0x1b, 0x83, 0x2f);
        private static Guid CoreServicesResetTaskGuid = new Guid(unchecked((int)0xed75c1fc), unchecked((short)0xe6ce), unchecked((short)0x4310), 0xb7, 0xf1, 0xe2, 0x6c, 0x7e, 0x1e, 0xa6, 0x1b);
        private static Guid RefreshTemplateBindingsTaskGuid = new Guid(unchecked((int)0xdc2879b8), unchecked((short)0x3213), unchecked((short)0x4520), 0x8f, 0xe0, 0x6a, 0x90, 0x6b, 0xee, 0x51, 0x8e);
        private static Guid GetBuiltInStyleTaskGuid = new Guid(unchecked((int)0xf4895669), unchecked((short)0xa49b), unchecked((short)0x475e), 0x92, 0xb4, 0x02, 0xc5, 0xa8, 0x61, 0xbc, 0x76);
        private static Guid TickTaskGuid = new Guid(unchecked((int)0xc0015e93), unchecked((short)0x34f0), unchecked((short)0x4250), 0xbd, 0x70, 0xc8, 0x9b, 0xfb, 0x11, 0x58, 0x20);
        private static Guid InitializeCoreTaskGuid = new Guid(unchecked((int)0xce921a2a), unchecked((short)0xe97c), unchecked((short)0x4c30), 0xb3, 0x18, 0x17, 0x3f, 0x99, 0xc5, 0xa6, 0x08);
        private static Guid InitializeMetadataStoreTaskGuid = new Guid(unchecked((int)0x7ced9481), unchecked((short)0xf1be), unchecked((short)0x40d8), 0x83, 0x17, 0x44, 0xc9, 0xf9, 0x31, 0x63, 0x62);
        private static Guid DynamicTimelineTaskGuid = new Guid(unchecked((int)0x4f2edd6d), unchecked((short)0x73a1), unchecked((short)0x4ebc), 0x93, 0x64, 0x8e, 0xe4, 0xa3, 0xc3, 0x47, 0x0d);
        private static Guid ProcessLayoutForTransitionTaskGuid = new Guid(unchecked((int)0xcc830311), unchecked((short)0x86b3), unchecked((short)0x4387), 0xbc, 0x38, 0xd5, 0x4f, 0x30, 0x4e, 0x66, 0xb9);
        private static Guid RealizeTransitionTaskGuid = new Guid(unchecked((int)0xb2cee7cd), unchecked((short)0xe0a8), unchecked((short)0x4b4c), 0x86, 0xd0, 0xab, 0xb7, 0xa6, 0x3a, 0xa2, 0xc7);
        private static Guid AnimationTaskGuid = new Guid(unchecked((int)0x41381084), unchecked((short)0x00fb), unchecked((short)0x496d), 0x9a, 0xd3, 0x69, 0xe1, 0x63, 0xf2, 0x9d, 0x3b);
        private static Guid HitTestTaskGuid = new Guid(unchecked((int)0x792dcaad), unchecked((short)0x3da8), unchecked((short)0x439a), 0xa0, 0xe8, 0xb4, 0x8a, 0x9b, 0xb0, 0xde, 0x43);
        private static Guid ApplyTemplateTaskGuid = new Guid(unchecked((int)0xc51bef3c), unchecked((short)0x5d26), unchecked((short)0x4de9), 0x81, 0xac, 0x39, 0xb4, 0x01, 0xf8, 0x2f, 0xaa);
        private static Guid ElementCreatedTaskGuid = new Guid(unchecked((int)0xf1bcb08d), unchecked((short)0x3fca), unchecked((short)0x4b5e), 0x8d, 0x56, 0x51, 0x2a, 0xb0, 0xc8, 0x76, 0xd0);
        private static Guid ElementDestroyedTaskGuid = new Guid(unchecked((int)0xf000f204), unchecked((short)0x7b4e), unchecked((short)0x441a), 0x9c, 0xe9, 0x95, 0xeb, 0xfc, 0x82, 0x1b, 0x76);
        private static Guid VideoCaptureFrameTaskGuid = new Guid(unchecked((int)0xda28cb58), unchecked((short)0xcba2), unchecked((short)0x4ad4), 0xb1, 0x38, 0x04, 0x35, 0x7e, 0x3e, 0x07, 0x36);
        private static Guid MediaFullScreenStateTaskGuid = new Guid(unchecked((int)0x2b8d7fe2), unchecked((short)0x2e2d), unchecked((short)0x47b9), 0x90, 0xb1, 0x70, 0x35, 0xd0, 0xfc, 0xf7, 0xe6);
        private static Guid MediaOverlapStateTaskGuid = new Guid(unchecked((int)0x33e8a096), unchecked((short)0x19ea), unchecked((short)0x485c), 0x8b, 0x53, 0x42, 0x84, 0xbc, 0x43, 0xff, 0xc0);
        private static Guid RenderThreadPresentTaskGuid = new Guid(unchecked((int)0x1a9e8cc4), unchecked((short)0x1930), unchecked((short)0x4aba), 0xbc, 0x65, 0xf2, 0x21, 0xe3, 0x23, 0x71, 0xf1);
        private static Guid BitmapCacheCreatedTaskGuid = new Guid(unchecked((int)0xd89466af), unchecked((short)0xe42d), unchecked((short)0x4151), 0xb9, 0xc0, 0x52, 0x58, 0xba, 0xe4, 0xda, 0x69);
        private static Guid BitmapCacheDestroyedTaskGuid = new Guid(unchecked((int)0x3d1c35b2), unchecked((short)0xcd08), unchecked((short)0x4522), 0xa2, 0x1c, 0x1f, 0x25, 0x8d, 0x29, 0x08, 0xb6);
        private static Guid BitmapCacheUpdatedTaskGuid = new Guid(unchecked((int)0xacce479e), unchecked((short)0x4bb0), unchecked((short)0x4b77), 0x9b, 0x0e, 0xfe, 0xa6, 0x05, 0x48, 0x1c, 0x94);
        private static Guid RenderWalkTaskGuid = new Guid(unchecked((int)0x29347895), unchecked((short)0x3508), unchecked((short)0x43ae), 0x84, 0x57, 0xe4, 0x7e, 0xa6, 0x33, 0x4a, 0x94);
        private static Guid FindBackgroundPrimitiveTaskGuid = new Guid(unchecked((int)0x173d9d04), unchecked((short)0x4b2b), unchecked((short)0x4a1a), 0xb2, 0x59, 0x10, 0xe7, 0x38, 0x52, 0xc0, 0xe7);
        private static Guid DrawFrameRateCounterTaskGuid = new Guid(unchecked((int)0x032ebdbf), unchecked((short)0xeda0), unchecked((short)0x4f63), 0xb8, 0x21, 0xa3, 0x64, 0xb8, 0x50, 0x4b, 0x95);
        private static Guid SubmitFrameTaskGuid = new Guid(unchecked((int)0x8c25a176), unchecked((short)0x609c), unchecked((short)0x48dc), 0xa5, 0x19, 0x48, 0x9a, 0x92, 0xb9, 0x0d, 0x1b);
        private static Guid DownloadRequestTaskGuid = new Guid(unchecked((int)0x47ebc335), unchecked((short)0xe0b7), unchecked((short)0x490f), 0x86, 0x45, 0x62, 0xc1, 0xa3, 0x26, 0x1f, 0x73);
        private static Guid CreatingHardwareCompositorTaskGuid = new Guid(unchecked((int)0x19341127), unchecked((short)0xd2b0), unchecked((short)0x4e96), 0xb8, 0x88, 0x09, 0x20, 0xf5, 0x9e, 0xaf, 0x8a);
        private static Guid CreatingMetaSurfaceTaskGuid = new Guid(unchecked((int)0x078acb4f), unchecked((short)0xe170), unchecked((short)0x4bd0), 0xab, 0xe2, 0x22, 0xbc, 0xc4, 0xc6, 0x04, 0x5c);
        private static Guid ResettingMetaSurfacesTaskGuid = new Guid(unchecked((int)0xdf85e5be), unchecked((short)0x1011), unchecked((short)0x47d3), 0x81, 0xc1, 0x39, 0x05, 0xa6, 0x8b, 0xa8, 0x08);
        private static Guid CreateGraphicsDeviceTaskGuid = new Guid(unchecked((int)0x2bd68a1a), unchecked((short)0xf298), unchecked((short)0x4cab), 0xbf, 0x93, 0x15, 0xcf, 0xb4, 0x3a, 0x5e, 0x0d);
        private static Guid CreateAcceleratedGraphicsTaskGuid = new Guid(unchecked((int)0xa5623c27), unchecked((short)0xed29), unchecked((short)0x40be), 0xb1, 0x5e, 0x20, 0x4e, 0xa9, 0xe3, 0xef, 0x6a);
        private static Guid HardwareDecodeFrameTaskGuid = new Guid(unchecked((int)0xaee790b0), unchecked((short)0x871e), unchecked((short)0x4442), 0xad, 0x75, 0x46, 0xb2, 0x85, 0x69, 0x32, 0xbe);
        private static Guid GraphicsDriverSupportedForVideoDecodeTaskGuid = new Guid(unchecked((int)0x3e44ace9), unchecked((short)0x79fd), unchecked((short)0x4fbd), 0x95, 0xc9, 0xd8, 0xfa, 0x5a, 0x5c, 0x00, 0x48);
        private static Guid CaptureDrawFrameTaskGuid = new Guid(unchecked((int)0x92020389), unchecked((short)0xc253), unchecked((short)0x44bf), 0xac, 0x68, 0x33, 0x8c, 0xfa, 0x40, 0xad, 0xdf);
        private static Guid PrimitiveCompositionUpdatePrimitivesTaskGuid = new Guid(unchecked((int)0x3ffb56f5), unchecked((short)0x2a40), unchecked((short)0x4724), 0x83, 0x4c, 0xf9, 0xc6, 0x5a, 0x4a, 0x18, 0xcb);
        private static Guid PrimitiveCompositionDrawTaskGuid = new Guid(unchecked((int)0xd2106124), unchecked((short)0xa94c), unchecked((short)0x4b19), 0xb8, 0x6e, 0x3b, 0x66, 0xa8, 0x05, 0xd0, 0x1c);
        private static Guid PrimitiveCompositionUpdateSurfacesTaskGuid = new Guid(unchecked((int)0x5ca2bc42), unchecked((short)0x83c0), unchecked((short)0x4703), 0x9a, 0x45, 0x9f, 0xd7, 0xf6, 0xa7, 0xcd, 0x97);
        private static Guid RenderThreadRenderTaskGuid = new Guid(unchecked((int)0xf8a45061), unchecked((short)0xb916), unchecked((short)0x4a8b), 0x84, 0x05, 0x0e, 0x16, 0x88, 0x97, 0x5a, 0x3c);
        private static Guid RenderThreadFrameTaskGuid = new Guid(unchecked((int)0xc2a5c05f), unchecked((short)0xc025), unchecked((short)0x4865), 0xaf, 0x24, 0x3b, 0xf4, 0x52, 0xa2, 0xd2, 0xb7);
        private static Guid RenderThreadDoNotWaitTaskGuid = new Guid(unchecked((int)0x507e089d), unchecked((short)0x74e6), unchecked((short)0x4736), 0x8e, 0xbd, 0xee, 0xd7, 0x97, 0x37, 0xc7, 0xfa);
        private static Guid RenderThreadWaitForVBlankTaskGuid = new Guid(unchecked((int)0x3031eec7), unchecked((short)0x6d18), unchecked((short)0x472c), 0x8d, 0x62, 0x40, 0xb3, 0xe3, 0x36, 0x8f, 0x09);
        private static Guid RenderThreadWaitForWorkTaskGuid = new Guid(unchecked((int)0xa63ab23b), unchecked((short)0xcc6c), unchecked((short)0x4ea7), 0x8d, 0x82, 0x92, 0xb4, 0x00, 0xa3, 0x07, 0xa2);
        private static Guid RenderThreadTickTaskGuid = new Guid(unchecked((int)0x431de830), unchecked((short)0xb8aa), unchecked((short)0x4fe7), 0xb2, 0x9f, 0x2f, 0xd1, 0x2e, 0xef, 0xa9, 0x45);
        private static Guid PrimitiveCompositionTreeWalkTaskGuid = new Guid(unchecked((int)0xaaa2c978), unchecked((short)0xef17), unchecked((short)0x446a), 0x9b, 0x5d, 0xfb, 0x9c, 0xeb, 0xb8, 0xcc, 0x74);
        private static Guid PrimitiveCompositionEnsureHardwareResourcesTaskGuid = new Guid(unchecked((int)0xa3eb704f), unchecked((short)0xa444), unchecked((short)0x43fc), 0x9d, 0xca, 0x6a, 0x11, 0x5b, 0xa7, 0x25, 0x08);
        private static Guid PrimitiveCompositionGenerateInstancesTaskGuid = new Guid(unchecked((int)0x9fd92282), unchecked((short)0x4ecf), unchecked((short)0x4a16), 0x99, 0xa8, 0xd3, 0x56, 0x82, 0x8f, 0x36, 0xb1);
        private static Guid SubmitRetargetTaskGuid = new Guid(unchecked((int)0x41ea1858), unchecked((short)0x8082), unchecked((short)0x4bbc), 0x9d, 0xaf, 0xb5, 0x65, 0x9b, 0x1c, 0xdf, 0x1f);
        private static Guid ProcessRetargetTaskGuid = new Guid(unchecked((int)0x1004559a), unchecked((short)0xda1a), unchecked((short)0x4219), 0x8c, 0xde, 0xbd, 0xb0, 0x38, 0x24, 0x0c, 0xbc);
        private static Guid SubmitAlphaModeUpdateTaskGuid = new Guid(unchecked((int)0x979b80fb), unchecked((short)0x2640), unchecked((short)0x4990), 0x8a, 0x38, 0xcd, 0x40, 0x06, 0x1f, 0x40, 0x52);
        private static Guid ProcessAlphaModeUpdateTaskGuid = new Guid(unchecked((int)0x164288aa), unchecked((short)0x3fd8), unchecked((short)0x458a), 0xae, 0xbc, 0x58, 0x8c, 0x5b, 0x86, 0xc5, 0x34);
        private static Guid TextureAtlasAllocateTaskGuid = new Guid(unchecked((int)0xcb0c8814), unchecked((short)0xca1f), unchecked((short)0x4039), 0xaf, 0x58, 0x10, 0xdb, 0x29, 0xa2, 0xd9, 0x4d);
        private static Guid TextureAtlasFreeTaskGuid = new Guid(unchecked((int)0xa216c6e3), unchecked((short)0x283e), unchecked((short)0x4fd9), 0xb4, 0x7d, 0x01, 0x4e, 0x06, 0x95, 0x43, 0x38);
        private static Guid TextureAtlasEntryAllocateTaskGuid = new Guid(unchecked((int)0x6ed0b03c), unchecked((short)0xf66e), unchecked((short)0x4656), 0x8c, 0x61, 0x7d, 0xcf, 0xf7, 0xc0, 0x94, 0x7f);
        private static Guid TextureAtlasEntryFreeTaskGuid = new Guid(unchecked((int)0x61601a94), unchecked((short)0x472a), unchecked((short)0x423e), 0x9d, 0xa3, 0x09, 0xb3, 0x8f, 0x22, 0x10, 0x94);
        private static Guid TextureAtlasUtilizationTaskGuid = new Guid(unchecked((int)0x1bf00d65), unchecked((short)0xf6d9), unchecked((short)0x4521), 0xa4, 0xf8, 0x29, 0x3e, 0xec, 0x62, 0x08, 0x66);
        private static Guid ImageCacheDownloadTaskGuid = new Guid(unchecked((int)0x28300166), unchecked((short)0xf324), unchecked((short)0x4f8e), 0x99, 0x16, 0xe0, 0xfb, 0xc5, 0xd3, 0x8f, 0x01);
        private static Guid ImageCacheDecodeTaskGuid = new Guid(unchecked((int)0xc10bb1eb), unchecked((short)0x8892), unchecked((short)0x42ae), 0xa6, 0xdf, 0x00, 0x9c, 0x17, 0x4e, 0xf1, 0x3b);
        private static Guid DecodeToSurfaceTaskGuid = new Guid(unchecked((int)0x07005f31), unchecked((short)0xadd6), unchecked((short)0x4876), 0xa7, 0xce, 0x6f, 0x90, 0xa5, 0x90, 0x03, 0xa1);
        private static Guid PointerDownTaskGuid = new Guid(unchecked((int)0x07c148b5), unchecked((short)0x20ef), unchecked((short)0x461c), 0xa5, 0xd1, 0xa6, 0xed, 0x1c, 0x80, 0x09, 0x01);
        private static Guid PointerUpdateTaskGuid = new Guid(unchecked((int)0x07c148b5), unchecked((short)0x20ef), unchecked((short)0x461c), 0xa5, 0xd1, 0xa6, 0xed, 0x1c, 0x80, 0x09, 0x02);
        private static Guid PointerUpTaskGuid = new Guid(unchecked((int)0x07c148b5), unchecked((short)0x20ef), unchecked((short)0x461c), 0xa5, 0xd1, 0xa6, 0xed, 0x1c, 0x80, 0x09, 0x03);
        private static Guid PointerEnterTaskGuid = new Guid(unchecked((int)0x6b87453f), unchecked((short)0xb775), unchecked((short)0x4b62), 0x9c, 0xf7, 0x35, 0xe6, 0x49, 0x63, 0x36, 0xde);
        private static Guid PointerLeaveTaskGuid = new Guid(unchecked((int)0x22e1fdc7), unchecked((short)0x6627), unchecked((short)0x4d1b), 0xbc, 0x90, 0x99, 0xe3, 0x9f, 0x57, 0x77, 0x6e);
        private static Guid PointerWheelTaskGuid = new Guid(unchecked((int)0x60615954), unchecked((short)0x14cb), unchecked((short)0x4513), 0xa4, 0xc8, 0xa6, 0xdd, 0x8c, 0xa9, 0xd7, 0x31);
        private static Guid PointerHWheelTaskGuid = new Guid(unchecked((int)0x5cf77714), unchecked((short)0x2b20), unchecked((short)0x4c1b), 0x91, 0x33, 0x00, 0x13, 0x56, 0x84, 0x65, 0x0f);
        private static Guid PointerCaptureChangedTaskGuid = new Guid(unchecked((int)0x42a4716d), unchecked((short)0x8326), unchecked((short)0x4698), 0xb9, 0x02, 0x73, 0x13, 0x8c, 0xe4, 0x72, 0x5a);
        private static Guid ProcessPointerInputTaskGuid = new Guid(unchecked((int)0xf5c8b5ad), unchecked((short)0x063c), unchecked((short)0x42c6), 0x8d, 0x1e, 0x5e, 0xca, 0x39, 0xd1, 0x2a, 0x75);
        private static Guid DmSetContactTaskGuid = new Guid(unchecked((int)0x8d78bb0b), unchecked((short)0x476a), unchecked((short)0x4b3b), 0xa6, 0x8b, 0xde, 0xaf, 0x3e, 0xfd, 0x56, 0xe1);
        private static Guid DmViewportStatusTaskGuid = new Guid(unchecked((int)0x839899f4), unchecked((short)0x7787), unchecked((short)0x45cd), 0x87, 0xa0, 0x01, 0x8f, 0x4b, 0xcd, 0xd3, 0xa9);
        private static Guid DmViewportStatusUpdateTaskGuid = new Guid(unchecked((int)0xbcf30cb3), unchecked((short)0x33b4), unchecked((short)0x4a93), 0xa5, 0x53, 0x08, 0x7c, 0xc4, 0x64, 0xac, 0xc4);
        private static Guid DmViewportValuesUpdateTaskGuid = new Guid(unchecked((int)0x647c48fa), unchecked((short)0xab15), unchecked((short)0x46b5), 0xa1, 0x3a, 0xb9, 0x02, 0x36, 0xe0, 0x9f, 0xb6);
        private static Guid DmCompositorViewportValuesUpdateTaskGuid = new Guid(unchecked((int)0xd651c8ef), unchecked((short)0x1598), unchecked((short)0x4d5f), 0xad, 0xea, 0x5d, 0x7d, 0x34, 0x1c, 0x18, 0x8e);
        private static Guid DmCompositorViewportAddedTaskGuid = new Guid(unchecked((int)0x78c5c8e8), unchecked((short)0x0363), unchecked((short)0x4891), 0x82, 0x9c, 0x7e, 0x13, 0x98, 0xec, 0x56, 0x97);
        private static Guid DmCompositorViewportRemovedTaskGuid = new Guid(unchecked((int)0xe936180a), unchecked((short)0x0b08), unchecked((short)0x4437), 0xa7, 0xde, 0x24, 0xd3, 0x63, 0x1c, 0x7b, 0x86);
        private static Guid RegisterInputPaneHandlerTaskGuid = new Guid(unchecked((int)0x8e5e5b26), unchecked((short)0xd136), unchecked((short)0x48f0), 0xae, 0xa2, 0x1e, 0xa1, 0xfe, 0x29, 0xa8, 0x97);
        private static Guid TouchHitTestingTaskGuid = new Guid(unchecked((int)0xb7ab53e2), unchecked((short)0x6ebc), unchecked((short)0x45cf), 0x99, 0x4b, 0xe4, 0xa5, 0x0b, 0xe5, 0xae, 0x21);
        private static Guid DmInitializeTaskGuid = new Guid(unchecked((int)0x21120203), unchecked((short)0x567e), unchecked((short)0x4d34), 0xaf, 0xfe, 0x04, 0x7a, 0x44, 0x51, 0xcb, 0x9d);
        private static Guid DmSetDummyContainerTaskGuid = new Guid(unchecked((int)0x5046d83b), unchecked((short)0x8b51), unchecked((short)0x45fa), 0x83, 0x18, 0x1a, 0x74, 0xaa, 0x46, 0xc7, 0xd3);
        private static Guid DmStartDummyContainersTaskGuid = new Guid(unchecked((int)0x6e4a9e38), unchecked((short)0x132c), unchecked((short)0x49b6), 0xaa, 0xf9, 0xf9, 0x25, 0xa2, 0xab, 0xec, 0x82);
        private static Guid CreateSwipeRecognizerTaskGuid = new Guid(unchecked((int)0x934405f5), unchecked((short)0xacf4), unchecked((short)0x4af7), 0x93, 0x35, 0xec, 0x3c, 0xbd, 0xfd, 0xe3, 0xce);
        private static Guid SwipingTaskGuid = new Guid(unchecked((int)0x916c5a67), unchecked((short)0x4b5d), unchecked((short)0x4d7b), 0xbc, 0x98, 0xe7, 0x13, 0xe7, 0x4c, 0x50, 0x5d);
        private static Guid SwipeUnrecognizedTaskGuid = new Guid(unchecked((int)0x94825f58), unchecked((short)0x6efd), unchecked((short)0x4db1), 0xbd, 0x6f, 0xb9, 0xa8, 0x2e, 0x18, 0x48, 0xc9);
        private static Guid DestroySwipeRecognizerTaskGuid = new Guid(unchecked((int)0x62ce6ef9), unchecked((short)0xd7fc), unchecked((short)0x4b7c), 0xa5, 0x58, 0xf3, 0x49, 0x91, 0x14, 0x2e, 0xd5);
        private static Guid DmDummyContainerCompletedTaskGuid = new Guid(unchecked((int)0x19761571), unchecked((short)0x5204), unchecked((short)0x4094), 0x9a, 0xaf, 0x5f, 0x15, 0x86, 0x8b, 0xac, 0x65);
        private static Guid FeedSwipeRecognizerTaskGuid = new Guid(unchecked((int)0x503be4c8), unchecked((short)0x9701), unchecked((short)0x4168), 0x8d, 0x65, 0xd7, 0x3a, 0xbc, 0xbd, 0xac, 0x98);
        private static Guid SetMaximumFrameLatencyTaskGuid = new Guid(unchecked((int)0x5af2216c), unchecked((short)0x7052), unchecked((short)0x4872), 0x9b, 0x64, 0xc9, 0x50, 0x1a, 0xca, 0xba, 0x4f);
        private static Guid VirtualizationMeasureTaskGuid = new Guid(unchecked((int)0xb0d00ed9), unchecked((short)0x9817), unchecked((short)0x440d), 0xad, 0xc0, 0x01, 0x9b, 0xe9, 0xab, 0x8d, 0x1b);
        private static Guid VirtualizationCleanupTaskGuid = new Guid(unchecked((int)0x2904bcdc), unchecked((short)0x7aaf), unchecked((short)0x49e3), 0xae, 0x0d, 0x63, 0x75, 0xf1, 0xd1, 0xb1, 0xdd);
        private static Guid VirtualizationAddTaskGuid = new Guid(unchecked((int)0x6b9cbe75), unchecked((short)0x90d7), unchecked((short)0x48f3), 0xa2, 0x20, 0x31, 0x9e, 0xd5, 0x80, 0xb6, 0xb2);
        private static Guid GenerateContainerTaskGuid = new Guid(unchecked((int)0x50ecb666), unchecked((short)0xb7ca), unchecked((short)0x4a19), 0x9d, 0x59, 0x5d, 0x39, 0x49, 0x0a, 0xc0, 0xc6);
        private static Guid MeasureChildTaskGuid = new Guid(unchecked((int)0xbe15d722), unchecked((short)0xb80a), unchecked((short)0x4d23), 0xa8, 0x1e, 0x28, 0xb0, 0x89, 0xb6, 0x86, 0xbc);
        private static Guid PrepareContainerTaskGuid = new Guid(unchecked((int)0x8c3660af), unchecked((short)0x56e3), unchecked((short)0x41e3), 0xbf, 0x43, 0x15, 0x1d, 0xe0, 0xf0, 0xfb, 0xe5);
        private static Guid UpdateLogicalScrollDataTaskGuid = new Guid(unchecked((int)0xb3ffb743), unchecked((short)0x6106), unchecked((short)0x4a03), 0xb4, 0x7b, 0xbd, 0xd1, 0xfd, 0x93, 0x4a, 0x4f);
        private static Guid ElementSetNameTaskGuid = new Guid(unchecked((int)0x1838530b), unchecked((short)0x0d6f), unchecked((short)0x4404), 0x89, 0x15, 0xe0, 0xaa, 0x43, 0xad, 0xa0, 0x9a);
        private static Guid ApplicationSuspendTaskGuid = new Guid(unchecked((int)0xade91ac3), unchecked((short)0x9b1f), unchecked((short)0x4688), 0x88, 0xaf, 0x3b, 0x7c, 0x19, 0xce, 0xa7, 0x2d);
        private static Guid ApplicationResumeTaskGuid = new Guid(unchecked((int)0x82e9dc5a), unchecked((short)0x5c6c), unchecked((short)0x46a7), 0x9a, 0x1f, 0xb1, 0x18, 0x1a, 0x26, 0xf4, 0x43);
        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.Xaml
{
    //public sealed class URITemplateTraceData : TraceEvent
    //{
    //    public string URI { get { return GetUnicodeStringAt(0); } }

    //    #region Private
    //    internal URITemplateTraceData(Action<URITemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
    //        : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
    //    {
    //        this.Action = action;
    //    }
    //    internal protected override void Dispatch()
    //    {
    //        Action(this);
    //    }
    //    internal protected override void Validate()
    //    {
    //        Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
    //        Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
    //    }
    //    public override StringBuilder ToXml(StringBuilder sb)
    //    {
    //        Prefix(sb);
    //        XmlAttrib(sb, "URI", URI);
    //        sb.Append("/>");
    //        return sb;
    //    }

    //    public override string[] PayloadNames
    //    {
    //        get
    //        {
    //            if (payloadNames == null)
    //                payloadNames = new string[] { "URI" };
    //            return payloadNames;
    //        }
    //    }

    //    public override object PayloadValue(int index)
    //    {
    //        switch (index)
    //        {
    //            case 0:
    //                return URI;
    //            default:
    //                Debug.Assert(false, "Bad field index");
    //                return null;
    //        }
    //    }

    //    private event Action<URITemplateTraceData> Action;
    //    #endregion
    //}
    public sealed class ClassNameDataTraceData : TraceEvent
    {
        public string ClassName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal ClassNameDataTraceData(Action<ClassNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ClassName", ClassName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClassName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClassName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ClassNameDataTraceData> Action;
        #endregion
    }
    public sealed class ElementIdClassNameDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public string ClassName { get { return GetUnicodeStringAt(8); } }

        #region Private
        internal ElementIdClassNameDataTraceData(Action<ElementIdClassNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "ClassName", ClassName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "ClassName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return ClassName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ElementIdClassNameDataTraceData> Action;
        #endregion
    }
    public sealed class CallbackNameDataTraceData : TraceEvent
    {
        public string CallbackName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal CallbackNameDataTraceData(Action<CallbackNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "CallbackName", CallbackName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CallbackName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CallbackName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CallbackNameDataTraceData> Action;
        #endregion
    }
    public sealed class ComponentNameDataTraceData : TraceEvent
    {
        public string ComponentName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal ComponentNameDataTraceData(Action<ComponentNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ComponentName", ComponentName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ComponentName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ComponentName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ComponentNameDataTraceData> Action;
        #endregion
    }
    public sealed class GraphicsDriverSupportedForVideoTemplateDataTraceData : TraceEvent
    {
        public string GraphicsDriverSupportType { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal GraphicsDriverSupportedForVideoTemplateDataTraceData(Action<GraphicsDriverSupportedForVideoTemplateDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "GraphicsDriverSupportType", GraphicsDriverSupportType);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GraphicsDriverSupportType" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GraphicsDriverSupportType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GraphicsDriverSupportedForVideoTemplateDataTraceData> Action;
        #endregion
    }
    public sealed class MediaFullScreenDataTraceData : TraceEvent
    {
        public long MediaElementID { get { return GetInt64At(0); } }
        public int InFullScreen { get { return GetInt32At(8); } }

        #region Private
        internal MediaFullScreenDataTraceData(Action<MediaFullScreenDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "MediaElementID", MediaElementID);
            XmlAttrib(sb, "InFullScreen", InFullScreen);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MediaElementID", "InFullScreen" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MediaElementID;
                case 1:
                    return InFullScreen;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MediaFullScreenDataTraceData> Action;
        #endregion
    }
    public sealed class MediaOverlapDataTraceData : TraceEvent
    {
        public long MediaElementID { get { return GetInt64At(0); } }
        public int HasOverlap { get { return GetInt32At(8); } }

        #region Private
        internal MediaOverlapDataTraceData(Action<MediaOverlapDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "MediaElementID", MediaElementID);
            XmlAttrib(sb, "HasOverlap", HasOverlap);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "MediaElementID", "HasOverlap" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return MediaElementID;
                case 1:
                    return HasOverlap;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MediaOverlapDataTraceData> Action;
        #endregion
    }
    public sealed class MeasureElementBeginDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public float Width { get { return GetSingleAt(8); } }
        public float Height { get { return GetSingleAt(12); } }

        #region Private
        internal MeasureElementBeginDataTraceData(Action<MeasureElementBeginDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "Width", "Height" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return Width;
                case 2:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MeasureElementBeginDataTraceData> Action;
        #endregion
    }
    public sealed class MeasureElementEndDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public float DesiredWidth { get { return GetSingleAt(8); } }
        public float DesiredHeight { get { return GetSingleAt(12); } }

        #region Private
        internal MeasureElementEndDataTraceData(Action<MeasureElementEndDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "DesiredWidth", DesiredWidth);
            XmlAttrib(sb, "DesiredHeight", DesiredHeight);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "DesiredWidth", "DesiredHeight" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return DesiredWidth;
                case 2:
                    return DesiredHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MeasureElementEndDataTraceData> Action;
        #endregion
    }
    public sealed class ArrangeElementBeginDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public float Left { get { return GetSingleAt(8); } }
        public float Top { get { return GetSingleAt(12); } }
        public float Width { get { return GetSingleAt(16); } }
        public float Height { get { return GetSingleAt(20); } }

        #region Private
        internal ArrangeElementBeginDataTraceData(Action<ArrangeElementBeginDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "Left", Left);
            XmlAttrib(sb, "Top", Top);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "Left", "Top", "Width", "Height" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return Left;
                case 2:
                    return Top;
                case 3:
                    return Width;
                case 4:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ArrangeElementBeginDataTraceData> Action;
        #endregion
    }
    public sealed class ArrangeElementEndDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public float VisualOffsetX { get { return GetSingleAt(8); } }
        public float VisualOffsetY { get { return GetSingleAt(12); } }
        public float RenderWidth { get { return GetSingleAt(16); } }
        public float RenderHeight { get { return GetSingleAt(20); } }

        #region Private
        internal ArrangeElementEndDataTraceData(Action<ArrangeElementEndDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "VisualOffsetX", VisualOffsetX);
            XmlAttrib(sb, "VisualOffsetY", VisualOffsetY);
            XmlAttrib(sb, "RenderWidth", RenderWidth);
            XmlAttrib(sb, "RenderHeight", RenderHeight);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "VisualOffsetX", "VisualOffsetY", "RenderWidth", "RenderHeight" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return VisualOffsetX;
                case 2:
                    return VisualOffsetY;
                case 3:
                    return RenderWidth;
                case 4:
                    return RenderHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ArrangeElementEndDataTraceData> Action;
        #endregion
    }
    public sealed class ElementIdDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }

        #region Private
        internal ElementIdDataTraceData(Action<ElementIdDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ElementIdDataTraceData> Action;
        #endregion
    }
    public sealed class RectDataTraceData : TraceEvent
    {
        public int X { get { return GetInt32At(0); } }
        public int Y { get { return GetInt32At(4); } }
        public int Width { get { return GetInt32At(8); } }
        public int Height { get { return GetInt32At(12); } }

        #region Private
        internal RectDataTraceData(Action<RectDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "X", X);
            XmlAttrib(sb, "Y", Y);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "X", "Y", "Width", "Height" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return X;
                case 1:
                    return Y;
                case 2:
                    return Width;
                case 3:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RectDataTraceData> Action;
        #endregion
    }
    public sealed class BeginStoryboardDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public long TargetElementId { get { return GetInt64At(8); } }

        #region Private
        internal BeginStoryboardDataTraceData(Action<BeginStoryboardDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "TargetElementId", TargetElementId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "TargetElementId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return TargetElementId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BeginStoryboardDataTraceData> Action;
        #endregion
    }
    public sealed class BeginAnimationDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public string TargetProperty { get { return GetUnicodeStringAt(8); } }

        #region Private
        internal BeginAnimationDataTraceData(Action<BeginAnimationDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "TargetProperty", TargetProperty);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "TargetPropertyId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return TargetProperty;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BeginAnimationDataTraceData> Action;
        #endregion
    }
    public sealed class CacheIdDataTraceData : TraceEvent
    {
        public long CacheId { get { return GetInt64At(0); } }

        #region Private
        internal CacheIdDataTraceData(Action<CacheIdDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "CacheId", CacheId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CacheIdDataTraceData> Action;
        #endregion
    }
    public sealed class CacheUpdatedDataTraceData : TraceEvent
    {
        public long CacheId { get { return GetInt64At(0); } }
        public int X { get { return GetInt32At(8); } }
        public int Y { get { return GetInt32At(12); } }
        public int UpdateWidth { get { return GetInt32At(16); } }
        public int UpdateHeight { get { return GetInt32At(20); } }
        public int SurfaceWidth { get { return GetInt32At(24); } }
        public int SurfaceHeight { get { return GetInt32At(28); } }

        #region Private
        internal CacheUpdatedDataTraceData(Action<CacheUpdatedDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 32));
            Debug.Assert(!(Version > 0 && EventDataLength < 32));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "CacheId", CacheId);
            XmlAttrib(sb, "X", X);
            XmlAttrib(sb, "Y", Y);
            XmlAttrib(sb, "UpdateWidth", UpdateWidth);
            XmlAttrib(sb, "UpdateHeight", UpdateHeight);
            XmlAttrib(sb, "SurfaceWidth", SurfaceWidth);
            XmlAttrib(sb, "SurfaceHeight", SurfaceHeight);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CacheId", "X", "Y", "UpdateWidth", "UpdateHeight", "SurfaceWidth", "SurfaceHeight" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CacheId;
                case 1:
                    return X;
                case 2:
                    return Y;
                case 3:
                    return UpdateWidth;
                case 4:
                    return UpdateHeight;
                case 5:
                    return SurfaceWidth;
                case 6:
                    return SurfaceHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CacheUpdatedDataTraceData> Action;
        #endregion
    }
    public sealed class ElementNameDataTraceData : TraceEvent
    {
        public string ElementName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal ElementNameDataTraceData(Action<ElementNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementName", ElementName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ElementNameDataTraceData> Action;
        #endregion
    }
    public sealed class FrameIdDataTraceData : TraceEvent
    {
        public long FrameId { get { return GetInt64At(0); } }

        #region Private
        internal FrameIdDataTraceData(Action<FrameIdDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "FrameId", FrameId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FrameId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FrameId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FrameIdDataTraceData> Action;
        #endregion
    }
    public sealed class FrameCountDataTraceData : TraceEvent
    {
        public int FrameCount { get { return GetInt32At(0); } }

        #region Private
        internal FrameCountDataTraceData(Action<FrameCountDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "FrameCount", FrameCount);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FrameCount" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FrameCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FrameCountDataTraceData> Action;
        #endregion
    }
    public sealed class PrimitiveCompositionUpdatePrimitivesDataTraceData : TraceEvent
    {
        public int UpdatedPrimitives { get { return GetInt32At(0); } }
        public int UpdatedInvisiblePrimitives { get { return GetInt32At(4); } }
        public int UpdatedGeometryGeneratedPrimitives { get { return GetInt32At(8); } }
        public int UpdatedRegularPrimitives { get { return GetInt32At(12); } }
        public int UpdatedGeometryGeneratedVertexCount { get { return GetInt32At(16); } }

        #region Private
        internal PrimitiveCompositionUpdatePrimitivesDataTraceData(Action<PrimitiveCompositionUpdatePrimitivesDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "UpdatedPrimitives", UpdatedPrimitives);
            XmlAttrib(sb, "UpdatedInvisiblePrimitives", UpdatedInvisiblePrimitives);
            XmlAttrib(sb, "UpdatedGeometryGeneratedPrimitives", UpdatedGeometryGeneratedPrimitives);
            XmlAttrib(sb, "UpdatedRegularPrimitives", UpdatedRegularPrimitives);
            XmlAttrib(sb, "UpdatedGeometryGeneratedVertexCount", UpdatedGeometryGeneratedVertexCount);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "UpdatedPrimitives", "UpdatedInvisiblePrimitives", "UpdatedGeometryGeneratedPrimitives", "UpdatedRegularPrimitives", "UpdatedGeometryGeneratedVertexCount" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return UpdatedPrimitives;
                case 1:
                    return UpdatedInvisiblePrimitives;
                case 2:
                    return UpdatedGeometryGeneratedPrimitives;
                case 3:
                    return UpdatedRegularPrimitives;
                case 4:
                    return UpdatedGeometryGeneratedVertexCount;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PrimitiveCompositionUpdatePrimitivesDataTraceData> Action;
        #endregion
    }
    public sealed class PrimitiveCompositionDrawDataTraceData : TraceEvent
    {
        public int BatchCount { get { return GetInt32At(0); } }
        public int PrimitivesDrawn { get { return GetInt32At(4); } }
        public int GeometryGeneratedPrimitivesDrawn { get { return GetInt32At(8); } }
        public int GeometryGeneratedVerticesDrawn { get { return GetInt32At(12); } }

        #region Private
        internal PrimitiveCompositionDrawDataTraceData(Action<PrimitiveCompositionDrawDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "BatchCount", BatchCount);
            XmlAttrib(sb, "PrimitivesDrawn", PrimitivesDrawn);
            XmlAttrib(sb, "GeometryGeneratedPrimitivesDrawn", GeometryGeneratedPrimitivesDrawn);
            XmlAttrib(sb, "GeometryGeneratedVerticesDrawn", GeometryGeneratedVerticesDrawn);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BatchCount", "PrimitivesDrawn", "GeometryGeneratedPrimitivesDrawn", "GeometryGeneratedVerticesDrawn" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BatchCount;
                case 1:
                    return PrimitivesDrawn;
                case 2:
                    return GeometryGeneratedPrimitivesDrawn;
                case 3:
                    return GeometryGeneratedVerticesDrawn;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PrimitiveCompositionDrawDataTraceData> Action;
        #endregion
    }
    public sealed class AlphaModeDataTraceData : TraceEvent
    {
        public int Transparent { get { return GetInt32At(0); } }

        #region Private
        internal AlphaModeDataTraceData(Action<AlphaModeDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Transparent", Transparent);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Transparent" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Transparent;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AlphaModeDataTraceData> Action;
        #endregion
    }
    public sealed class TextureAtlasDataTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public int Width { get { return GetInt32At(8); } }
        public int Height { get { return GetInt32At(12); } }
        public int BitDepth { get { return GetInt32At(16); } }

        #region Private
        internal TextureAtlasDataTraceData(Action<TextureAtlasDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Id", Id);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            XmlAttrib(sb, "BitDepth", BitDepth);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Width", "Height", "BitDepth" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Width;
                case 2:
                    return Height;
                case 3:
                    return BitDepth;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TextureAtlasDataTraceData> Action;
        #endregion
    }
    public sealed class IdDataTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }

        #region Private
        internal IdDataTraceData(Action<IdDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Id", Id);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IdDataTraceData> Action;
        #endregion
    }
    public sealed class TextureAtlasEntryDataTraceData : TraceEvent
    {
        public long AtlasId { get { return GetInt64At(0); } }
        public int X { get { return GetInt32At(8); } }
        public int Y { get { return GetInt32At(12); } }
        public int Width { get { return GetInt32At(16); } }
        public int Height { get { return GetInt32At(20); } }

        #region Private
        internal TextureAtlasEntryDataTraceData(Action<TextureAtlasEntryDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "AtlasId", AtlasId);
            XmlAttrib(sb, "X", X);
            XmlAttrib(sb, "Y", Y);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AtlasId", "X", "Y", "Width", "Height" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AtlasId;
                case 1:
                    return X;
                case 2:
                    return Y;
                case 3:
                    return Width;
                case 4:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TextureAtlasEntryDataTraceData> Action;
        #endregion
    }
    public sealed class TextureAtlasUtilizationDataTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public int Width { get { return GetInt32At(8); } }
        public int Height { get { return GetInt32At(12); } }
        public int BitDepth { get { return GetInt32At(16); } }
        public float PercentUsed { get { return GetSingleAt(20); } }

        #region Private
        internal TextureAtlasUtilizationDataTraceData(Action<TextureAtlasUtilizationDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "Id", Id);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            XmlAttrib(sb, "BitDepth", BitDepth);
            XmlAttrib(sb, "PercentUsed", PercentUsed);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Width", "Height", "BitDepth", "PercentUsed" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Width;
                case 2:
                    return Height;
                case 3:
                    return BitDepth;
                case 4:
                    return PercentUsed;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TextureAtlasUtilizationDataTraceData> Action;
        #endregion
    }
    public sealed class PointerDataTraceData : TraceEvent
    {
        public int PointerId { get { return GetInt32At(0); } }
        public float X { get { return GetSingleAt(4); } }
        public float Y { get { return GetSingleAt(8); } }

        #region Private
        internal PointerDataTraceData(Action<PointerDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version > 0 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "PointerId", PointerId);
            XmlAttrib(sb, "X", X);
            XmlAttrib(sb, "Y", Y);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PointerId", "X", "Y" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PointerId;
                case 1:
                    return X;
                case 2:
                    return Y;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PointerDataTraceData> Action;
        #endregion
    }
    public sealed class DmViewportDataTraceData : TraceEvent
    {
        public long ViewportId { get { return GetInt64At(0); } }

        #region Private
        internal DmViewportDataTraceData(Action<DmViewportDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ViewportId", ViewportId);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ViewportId" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ViewportId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DmViewportDataTraceData> Action;
        #endregion
    }
    public sealed class DmViewportStatusDataTraceData : TraceEvent
    {
        public long ViewportId { get { return GetInt64At(0); } }
        public int OldStatus { get { return GetInt32At(8); } }
        public int NewStatus { get { return GetInt32At(12); } }

        #region Private
        internal DmViewportStatusDataTraceData(Action<DmViewportStatusDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ViewportId", ViewportId);
            XmlAttrib(sb, "OldStatus", OldStatus);
            XmlAttrib(sb, "NewStatus", NewStatus);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ViewportId", "OldStatus", "NewStatus" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ViewportId;
                case 1:
                    return OldStatus;
                case 2:
                    return NewStatus;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DmViewportStatusDataTraceData> Action;
        #endregion
    }
    public sealed class DmViewportValuesDataTraceData : TraceEvent
    {
        public long ViewportId { get { return GetInt64At(0); } }
        public float TranslationX { get { return GetSingleAt(8); } }
        public float TranslationY { get { return GetSingleAt(12); } }
        public float ZoomFactor { get { return GetSingleAt(16); } }

        #region Private
        internal DmViewportValuesDataTraceData(Action<DmViewportValuesDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version > 0 && EventDataLength < 20));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ViewportId", ViewportId);
            XmlAttrib(sb, "TranslationX", TranslationX);
            XmlAttrib(sb, "TranslationY", TranslationY);
            XmlAttrib(sb, "ZoomFactor", ZoomFactor);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ViewportId", "TranslationX", "TranslationY", "ZoomFactor" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ViewportId;
                case 1:
                    return TranslationX;
                case 2:
                    return TranslationY;
                case 3:
                    return ZoomFactor;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DmViewportValuesDataTraceData> Action;
        #endregion
    }
    public sealed class FloatRectDataTraceData : TraceEvent
    {
        public float X { get { return GetSingleAt(0); } }
        public float Y { get { return GetSingleAt(4); } }
        public float Width { get { return GetSingleAt(8); } }
        public float Height { get { return GetSingleAt(12); } }

        #region Private
        internal FloatRectDataTraceData(Action<FloatRectDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "X", X);
            XmlAttrib(sb, "Y", Y);
            XmlAttrib(sb, "Width", Width);
            XmlAttrib(sb, "Height", Height);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "X", "Y", "Width", "Height" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return X;
                case 1:
                    return Y;
                case 2:
                    return Width;
                case 3:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FloatRectDataTraceData> Action;
        #endregion
    }
    public sealed class ElementIdNameDataTraceData : TraceEvent
    {
        public long ElementId { get { return GetInt64At(0); } }
        public string Name { get { return GetUnicodeStringAt(8); } }

        #region Private
        internal ElementIdNameDataTraceData(Action<ElementIdNameDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
        internal protected override void Dispatch()
        {
            Action(this);
        }
        internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ElementId", ElementId);
            XmlAttrib(sb, "Name", Name);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ElementId", "Name" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ElementId;
                case 1:
                    return Name;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ElementIdNameDataTraceData> Action;
        #endregion
    }

}
