//<autogenerated/>
using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.ProcessMetadataEventSource;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class ProcessMetadataEventSourceTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "ProcessMetadataEventSource";
        public static Guid ProviderGuid = new Guid(unchecked((int)0xa0aec25c), unchecked((short)0xe018), unchecked((short)0x5ee2), 0x59, 0x94, 0xb2, 0x88, 0x6f, 0xdb, 0x33, 0x3d);

        public enum Keywords : long
        {
            Session3 = 0x100000000000,
            Session2 = 0x200000000000,
            Session1 = 0x400000000000,
            Session0 = 0x800000000000,
        };

        public ProcessMetadataEventSourceTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<EventSourceMessageArgsTraceData> EventSourceMessage
        {
            add
            {
                RegisterTemplate(new EventSourceMessageArgsTraceData(value, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, Guid.Empty);
            }
        }
        public event Action<ModuleLoadArgsTraceData> ModuleStart
        {
            add
            {
                RegisterTemplate(new ModuleLoadArgsTraceData(value, 5, 3, "Module", Guid.Empty, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, Guid.Empty);
            }
        }
        public event Action<ModuleUnloadArgsTraceData> ModuleStop
        {
            add
            {
                RegisterTemplate(new ModuleUnloadArgsTraceData(value, 6, 3, "Module", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, Guid.Empty);
            }
        }
        public event Action<ProcessStartArgsTraceData> ProcessStart
        {
            add
            {
                RegisterTemplate(new ProcessStartArgsTraceData(value, 1, 1, "Process", Guid.Empty, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, Guid.Empty);
            }
        }
        public event Action<ProcessExitArgsTraceData> ProcessStop
        {
            add
            {
                RegisterTemplate(new ProcessExitArgsTraceData(value, 2, 1, "Process", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, Guid.Empty);
            }
        }
        public event Action<ThreadCreateArgsTraceData> ThreadStart
        {
            add
            {
                RegisterTemplate(new ThreadCreateArgsTraceData(value, 3, 2, "Thread", Guid.Empty, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, Guid.Empty);
            }
        }
        public event Action<ThreadDestroyArgsTraceData> ThreadStop
        {
            add
            {
                RegisterTemplate(new ThreadDestroyArgsTraceData(value, 4, 2, "Thread", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, Guid.Empty);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private EventSourceMessageArgsTraceData EventSourceMessageTemplate(Action<EventSourceMessageArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EventSourceMessageArgsTraceData(action, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }
        static private ModuleLoadArgsTraceData ModuleStartTemplate(Action<ModuleLoadArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ModuleLoadArgsTraceData(action, 5, 3, "Module", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
        }
        static private ModuleUnloadArgsTraceData ModuleStopTemplate(Action<ModuleUnloadArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ModuleUnloadArgsTraceData(action, 6, 3, "Module", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private ProcessStartArgsTraceData ProcessStartTemplate(Action<ProcessStartArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProcessStartArgsTraceData(action, 1, 1, "Process", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
        }
        static private ProcessExitArgsTraceData ProcessStopTemplate(Action<ProcessExitArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ProcessExitArgsTraceData(action, 2, 1, "Process", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private ThreadCreateArgsTraceData ThreadStartTemplate(Action<ThreadCreateArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadCreateArgsTraceData(action, 3, 2, "Thread", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
        }
        static private ThreadDestroyArgsTraceData ThreadStopTemplate(Action<ThreadDestroyArgsTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new ThreadDestroyArgsTraceData(action, 4, 2, "Thread", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected internal override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[7];
                templates[0] = new EventSourceMessageArgsTraceData(null, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName);
                templates[1] = new ProcessStartArgsTraceData(null, 1, 1, "Process", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
                templates[2] = new ProcessExitArgsTraceData(null, 2, 1, "Process", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
                templates[3] = new ThreadCreateArgsTraceData(null, 3, 2, "Thread", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
                templates[4] = new ThreadDestroyArgsTraceData(null, 4, 2, "Thread", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
                templates[5] = new ModuleLoadArgsTraceData(null, 5, 3, "Module", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
                templates[6] = new ModuleUnloadArgsTraceData(null, 6, 3, "Module", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        private void RegisterTemplate(TraceEvent template)
        {
            Debug.Assert(template.ProviderGuid == MicrosoftAntimalwareEngineTraceEventParser.ProviderGuid);
            source.RegisterEventTemplate(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.ProcessMetadataEventSource
{
    public sealed class EventSourceMessageArgsTraceData : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal EventSourceMessageArgsTraceData(Action<EventSourceMessageArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<EventSourceMessageArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "message", message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<EventSourceMessageArgsTraceData> Action;
        #endregion
    }
    public sealed class ModuleLoadArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long LoadAddress { get { return GetInt64At(8); } }
        public long ModuleSize { get { return GetInt64At(16); } }
        public Guid DebugGuid { get { return GetGuidAt(24); } }
        public int DebugAge { get { return GetInt32At(40); } }
        public string ModuleFilePath { get { return GetUnicodeStringAt(44); } }
        public string DebugModuleFileName { get { return GetUnicodeStringAt(SkipUnicodeString(44)); } }

        #region Private
        internal ModuleLoadArgsTraceData(Action<ModuleLoadArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(44))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(44))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ModuleLoadArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "LoadAddress", LoadAddress);
            XmlAttrib(sb, "ModuleSize", ModuleSize);
            XmlAttrib(sb, "DebugGuid", DebugGuid);
            XmlAttrib(sb, "DebugAge", DebugAge);
            XmlAttrib(sb, "ModuleFilePath", ModuleFilePath);
            XmlAttrib(sb, "DebugModuleFileName", DebugModuleFileName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "LoadAddress", "ModuleSize", "DebugGuid", "DebugAge", "ModuleFilePath", "DebugModuleFileName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return LoadAddress;
                case 2:
                    return ModuleSize;
                case 3:
                    return DebugGuid;
                case 4:
                    return DebugAge;
                case 5:
                    return ModuleFilePath;
                case 6:
                    return DebugModuleFileName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ModuleLoadArgsTraceData> Action;
        #endregion
    }
    public sealed class ModuleUnloadArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long LoadAddress { get { return GetInt64At(8); } }
        public long ModuleSize { get { return GetInt64At(16); } }
        public string ModuleFilePath { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal ModuleUnloadArgsTraceData(Action<ModuleUnloadArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ModuleUnloadArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "LoadAddress", LoadAddress);
            XmlAttrib(sb, "ModuleSize", ModuleSize);
            XmlAttrib(sb, "ModuleFilePath", ModuleFilePath);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "LoadAddress", "ModuleSize", "ModuleFilePath" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return LoadAddress;
                case 2:
                    return ModuleSize;
                case 3:
                    return ModuleFilePath;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ModuleUnloadArgsTraceData> Action;
        #endregion
    }
    public sealed class ProcessStartArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long ParentProcessId { get { return GetInt64At(8); } }
        public string Executable { get { return GetUnicodeStringAt(16); } }
        public string CommandLine { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }

        #region Private
        internal ProcessStartArgsTraceData(Action<ProcessStartArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ProcessStartArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ParentProcessId", ParentProcessId);
            XmlAttrib(sb, "Executable", Executable);
            XmlAttrib(sb, "CommandLine", CommandLine);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "ParentProcessId", "Executable", "CommandLine" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return ParentProcessId;
                case 2:
                    return Executable;
                case 3:
                    return CommandLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ProcessStartArgsTraceData> Action;
        #endregion
    }
    public sealed class ProcessExitArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long ParentProcessId { get { return GetInt64At(8); } }
        public int ExitCode { get { return GetInt32At(16); } }
        public string Executable { get { return GetUnicodeStringAt(20); } }
        public string CommandLine { get { return GetUnicodeStringAt(SkipUnicodeString(20)); } }

        #region Private
        internal ProcessExitArgsTraceData(Action<ProcessExitArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(20))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(20))));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ProcessExitArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ParentProcessId", ParentProcessId);
            XmlAttrib(sb, "ExitCode", ExitCode);
            XmlAttrib(sb, "Executable", Executable);
            XmlAttrib(sb, "CommandLine", CommandLine);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "ParentProcessId", "ExitCode", "Executable", "CommandLine" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return ParentProcessId;
                case 2:
                    return ExitCode;
                case 3:
                    return Executable;
                case 4:
                    return CommandLine;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ProcessExitArgsTraceData> Action;
        #endregion
    }
    public sealed class ThreadCreateArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long ThreadId { get { return GetInt64At(8); } }
        public long StackBaseAddress { get { return GetInt64At(16); } }
        public string ThreadName { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal ThreadCreateArgsTraceData(Action<ThreadCreateArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ThreadCreateArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ThreadId", ThreadId);
            XmlAttrib(sb, "StackBaseAddress", StackBaseAddress);
            XmlAttrib(sb, "ThreadName", ThreadName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "ThreadId", "StackBaseAddress", "ThreadName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return ThreadId;
                case 2:
                    return StackBaseAddress;
                case 3:
                    return ThreadName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ThreadCreateArgsTraceData> Action;
        #endregion
    }
    public sealed class ThreadDestroyArgsTraceData : TraceEvent
    {
        public long ProcessId { get { return GetInt64At(0); } }
        public long ThreadId { get { return GetInt64At(8); } }
        public long StackBaseAddress { get { return GetInt64At(16); } }
        public string ThreadName { get { return GetUnicodeStringAt(24); } }

        #region Private
        internal ThreadDestroyArgsTraceData(Action<ThreadDestroyArgsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            Action = action;
        }
        protected internal override void Dispatch()
        {
            Action(this);
        }
        protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(24)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(24)));
        }
        protected internal override Delegate Target
        {
            get { return Action; }
            set { Action = (Action<ThreadDestroyArgsTraceData>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "ProcessId", ProcessId);
            XmlAttrib(sb, "ThreadId", ThreadId);
            XmlAttrib(sb, "StackBaseAddress", StackBaseAddress);
            XmlAttrib(sb, "ThreadName", ThreadName);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ProcessId", "ThreadId", "StackBaseAddress", "ThreadName" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ProcessId;
                case 1:
                    return ThreadId;
                case 2:
                    return StackBaseAddress;
                case 3:
                    return ThreadName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        public static ulong GetKeywords() { return 0; }
        public static string GetProviderName() { return "ProcessMetadataEventSource"; }
        public static Guid GetProviderGuid() { return new Guid("a0aec25c-e018-5ee2-5994-b2886fdb333d"); }
        private event Action<ThreadDestroyArgsTraceData> Action;
        #endregion
    }
}
