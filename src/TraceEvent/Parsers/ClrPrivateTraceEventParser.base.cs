using System;
using System.Text;
using System.Diagnostics;
using Diagnostics.Eventing;
using Address = System.UInt64;

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace System.Diagnostics.Eventing.Parsers
{
    public sealed class DotNETRuntimePrivateTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-DotNETRuntimePrivate";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x763fd754), unchecked((short) 0x7086), unchecked((short) 0x4dfe), 0x95, 0xeb, 0xc0, 0x1a, 0x46, 0xfa, 0xf4, 0xca);
        public enum Keywords : long
        {
            GC = 0x00000001,
            Binding = 0x00000002,
            NGenForceRestore = 0x00000004,
            Fusion = 0x00000008,
            LoaderHeap = 0x00000010,
            Security = 0x00000400,
            Threading = 0x10000,
            MulticoreJit = 0x20000,
            Stack = 0x40000000,
            Startup = 0x80000000,
            PerfTrack = 0x20000000,
        };

        public DotNETRuntimePrivateTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<GCDecisionTraceData> GCDecision
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCDecisionTraceData(value, 1, 1, "GC", GCTaskGuid, 132, "Decision", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCSettingsTraceData> GCSettings
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCSettingsTraceData(value, 2, 1, "GC", GCTaskGuid, 14, "Settings", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCOptimizedTraceData> GCOptimized
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCOptimizedTraceData(value, 3, 1, "GC", GCTaskGuid, 16, "Optimized", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCPerHeapHistoryTraceData> GCPerHeapHistory
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCPerHeapHistoryTraceData(value, 4, 1, "GC", GCTaskGuid, 17, "PerHeapHistory", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCGlobalHeapTraceData> GCGlobalHeapHistory
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCGlobalHeapTraceData(value, 5, 1, "GC", GCTaskGuid, 18, "GlobalHeapHistory", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCJoinTraceData> GCJoin
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCJoinTraceData(value, 6, 1, "GC", GCTaskGuid, 20, "Join", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCMarkTraceData> GCMarkStackRoots
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCMarkTraceData(value, 7, 1, "GC", GCTaskGuid, 21, "MarkStackRoots", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCMarkTraceData> GCMarkFinalizeQueueRoots
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCMarkTraceData(value, 8, 1, "GC", GCTaskGuid, 22, "MarkFinalizeQueueRoots", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCMarkTraceData> GCMarkHandles
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCMarkTraceData(value, 9, 1, "GC", GCTaskGuid, 23, "MarkHandles", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCMarkTraceData> GCMarkCards
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCMarkTraceData(value, 10, 1, "GC", GCTaskGuid, 24, "MarkCards", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGCStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 11, 1, "GC", GCTaskGuid, 25, "BGCStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC1stNonCondStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 12, 1, "GC", GCTaskGuid, 26, "BGC1stNonCondStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC1stConStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 13, 1, "GC", GCTaskGuid, 27, "BGC1stConStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC2ndNonConStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 14, 1, "GC", GCTaskGuid, 28, "BGC2ndNonConStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC2ndNonConStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 15, 1, "GC", GCTaskGuid, 29, "BGC2ndNonConStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC2ndConStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 16, 1, "GC", GCTaskGuid, 30, "BGC2ndConStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGC2ndConStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 17, 1, "GC", GCTaskGuid, 31, "BGC2ndConStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGCPlanStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 18, 1, "GC", GCTaskGuid, 32, "BGCPlanStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCNoUserDataTraceData> GCBGCSweepStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCNoUserDataTraceData(value, 19, 1, "GC", GCTaskGuid, 33, "BGCSweepStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BGCDrainMarkTraceData> GCBGCDrainMark
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BGCDrainMarkTraceData(value, 20, 1, "GC", GCTaskGuid, 34, "BGCDrainMark", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BGCRevisitTraceData> GCBGCRevisit
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BGCRevisitTraceData(value, 21, 1, "GC", GCTaskGuid, 35, "BGCRevisit", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BGCOverflowTraceData> GCBGCOverflow
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BGCOverflowTraceData(value, 22, 1, "GC", GCTaskGuid, 36, "BGCOverflow", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BGCAllocWaitTraceData> GCBGCAllocWaitStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BGCAllocWaitTraceData(value, 23, 1, "GC", GCTaskGuid, 37, "BGCAllocWaitStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BGCAllocWaitTraceData> GCBGCAllocWaitStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BGCAllocWaitTraceData(value, 24, 1, "GC", GCTaskGuid, 38, "BGCAllocWaitStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<GCFullNotifyTraceData> GCFullNotify
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GCFullNotifyTraceData(value, 25, 1, "GC", GCTaskGuid, 19, "FullNotify", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEStartupStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 80, 9, "Startup", StartupTaskGuid, 128, "EEStartupStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEStartupStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 81, 9, "Startup", StartupTaskGuid, 129, "EEStartupStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEConfigSetupStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 82, 9, "Startup", StartupTaskGuid, 130, "EEConfigSetupStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEConfigSetupStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 83, 9, "Startup", StartupTaskGuid, 131, "EEConfigSetupStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLoadSystemBasesStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 84, 9, "Startup", StartupTaskGuid, 132, "LoadSystemBasesStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLoadSystemBasesStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 85, 9, "Startup", StartupTaskGuid, 133, "LoadSystemBasesStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupExecExeStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 86, 9, "Startup", StartupTaskGuid, 134, "ExecExeStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupExecExeStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 87, 9, "Startup", StartupTaskGuid, 135, "ExecExeStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupMainStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 88, 9, "Startup", StartupTaskGuid, 136, "MainStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupMainStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 89, 9, "Startup", StartupTaskGuid, 137, "MainStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupApplyPolicyStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 90, 9, "Startup", StartupTaskGuid, 10, "ApplyPolicyStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupApplyPolicyStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 91, 9, "Startup", StartupTaskGuid, 11, "ApplyPolicyStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLdLibShFolderStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 92, 9, "Startup", StartupTaskGuid, 12, "LdLibShFolderStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLdLibShFolderStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 93, 9, "Startup", StartupTaskGuid, 13, "LdLibShFolderStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupPrestubWorkerStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 94, 9, "Startup", StartupTaskGuid, 14, "PrestubWorkerStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupPrestubWorkerStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 95, 9, "Startup", StartupTaskGuid, 15, "PrestubWorkerStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupGetInstallationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 96, 9, "Startup", StartupTaskGuid, 16, "GetInstallationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupGetInstallationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 97, 9, "Startup", StartupTaskGuid, 17, "GetInstallationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupOpenHModuleStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 98, 9, "Startup", StartupTaskGuid, 18, "OpenHModuleStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupOpenHModuleStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 99, 9, "Startup", StartupTaskGuid, 19, "OpenHModuleStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupExplicitBindStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 100, 9, "Startup", StartupTaskGuid, 20, "ExplicitBindStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupExplicitBindStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 101, 9, "Startup", StartupTaskGuid, 21, "ExplicitBindStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupParseXmlStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 102, 9, "Startup", StartupTaskGuid, 22, "ParseXmlStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupParseXmlStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 103, 9, "Startup", StartupTaskGuid, 23, "ParseXmlStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupInitDefaultDomainStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 104, 9, "Startup", StartupTaskGuid, 24, "InitDefaultDomainStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupInitDefaultDomainStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 105, 9, "Startup", StartupTaskGuid, 25, "InitDefaultDomainStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupInitSecurityStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 106, 9, "Startup", StartupTaskGuid, 26, "InitSecurityStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupInitSecurityStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 107, 9, "Startup", StartupTaskGuid, 27, "InitSecurityStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupAllowBindingRedirsStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 108, 9, "Startup", StartupTaskGuid, 28, "AllowBindingRedirsStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupAllowBindingRedirsStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 109, 9, "Startup", StartupTaskGuid, 29, "AllowBindingRedirsStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEConfigSyncStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 110, 9, "Startup", StartupTaskGuid, 30, "EEConfigSyncStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupEEConfigSyncStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 111, 9, "Startup", StartupTaskGuid, 31, "EEConfigSyncStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupBindingStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 112, 9, "Startup", StartupTaskGuid, 32, "BindingStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupBindingStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 113, 9, "Startup", StartupTaskGuid, 33, "BindingStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLoaderCatchCallStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 114, 9, "Startup", StartupTaskGuid, 34, "LoaderCatchCallStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupLoaderCatchCallStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 115, 9, "Startup", StartupTaskGuid, 35, "LoaderCatchCallStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusionInitStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 116, 9, "Startup", StartupTaskGuid, 36, "FusionInitStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusionInitStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 117, 9, "Startup", StartupTaskGuid, 37, "FusionInitStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusionAppCtxStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 118, 9, "Startup", StartupTaskGuid, 38, "FusionAppCtxStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusionAppCtxStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 119, 9, "Startup", StartupTaskGuid, 39, "FusionAppCtxStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusion2EEStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 120, 9, "Startup", StartupTaskGuid, 40, "Fusion2EEStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupFusion2EEStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 121, 9, "Startup", StartupTaskGuid, 41, "Fusion2EEStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupSecurityCatchCallStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 122, 9, "Startup", StartupTaskGuid, 42, "SecurityCatchCallStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<StartupTraceData> StartupSecurityCatchCallStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new StartupTraceData(value, 123, 9, "Startup", StartupTaskGuid, 43, "SecurityCatchCallStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<ClrStackWalkTraceData> ClrStackWalk
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ClrStackWalkTraceData(value, 151, 11, "ClrStack", ClrStackTaskGuid, 82, "Walk", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<ModuleRangePrivateTraceData> ClrPerfTrackModuleRangeLoad
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ModuleRangePrivateTraceData(value, 158, 20, "ClrPerfTrack", ClrPerfTrackTaskGuid, 10, "ModuleRangeLoad", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingPolicyPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 159, 10, "Binding", BindingTaskGuid, 51, "PolicyPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingPolicyPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 160, 10, "Binding", BindingTaskGuid, 52, "PolicyPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingNgenPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 161, 10, "Binding", BindingTaskGuid, 53, "NgenPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingNgenPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 162, 10, "Binding", BindingTaskGuid, 54, "NgenPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoopupAndProbingPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 163, 10, "Binding", BindingTaskGuid, 55, "LoopupAndProbingPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLookupAndProbingPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 164, 10, "Binding", BindingTaskGuid, 56, "LookupAndProbingPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 165, 10, "Binding", BindingTaskGuid, 57, "LoaderPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 166, 10, "Binding", BindingTaskGuid, 58, "LoaderPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 167, 10, "Binding", BindingTaskGuid, 59, "PhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 168, 10, "Binding", BindingTaskGuid, 60, "PhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingDownloadPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 169, 10, "Binding", BindingTaskGuid, 61, "DownloadPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingDownloadPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 170, 10, "Binding", BindingTaskGuid, 62, "DownloadPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderAssemblyInitPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 171, 10, "Binding", BindingTaskGuid, 63, "LoaderAssemblyInitPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderAssemblyInitPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 172, 10, "Binding", BindingTaskGuid, 64, "LoaderAssemblyInitPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderMappingPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 173, 10, "Binding", BindingTaskGuid, 65, "LoaderMappingPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderMappingPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 174, 10, "Binding", BindingTaskGuid, 66, "LoaderMappingPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderDeliverEventPhaseStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 175, 10, "Binding", BindingTaskGuid, 67, "LoaderDeliverEventPhaseStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<BindingTraceData> BindingLoaderDeliverEventsPhaseStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new BindingTraceData(value, 176, 10, "Binding", BindingTaskGuid, 68, "LoaderDeliverEventsPhaseStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<EvidenceGeneratedTraceData> EvidenceGenerationEvidenceGenerated
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EvidenceGeneratedTraceData(value, 177, 12, "EvidenceGeneration", EvidenceGenerationTaskGuid, 10, "EvidenceGenerated", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<ModuleTransparencyCalculationTraceData> TransparencyModuleTransparencyComputationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ModuleTransparencyCalculationTraceData(value, 178, 14, "Transparency", TransparencyTaskGuid, 83, "ModuleTransparencyComputationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<ModuleTransparencyCalculationResultTraceData> TransparencyModuleTransparencyComputationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ModuleTransparencyCalculationResultTraceData(value, 179, 14, "Transparency", TransparencyTaskGuid, 84, "ModuleTransparencyComputationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<TypeTransparencyCalculationTraceData> TransparencyTypeTransparencyComputationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TypeTransparencyCalculationTraceData(value, 180, 14, "Transparency", TransparencyTaskGuid, 85, "TypeTransparencyComputationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<TypeTransparencyCalculationResultTraceData> TransparencyTypeTransparencyComputationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TypeTransparencyCalculationResultTraceData(value, 181, 14, "Transparency", TransparencyTaskGuid, 86, "TypeTransparencyComputationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<MethodTransparencyCalculationTraceData> TransparencyMethodTransparencyComputationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MethodTransparencyCalculationTraceData(value, 182, 14, "Transparency", TransparencyTaskGuid, 87, "MethodTransparencyComputationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<MethodTransparencyCalculationResultTraceData> TransparencyMethodTransparencyComputationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MethodTransparencyCalculationResultTraceData(value, 183, 14, "Transparency", TransparencyTaskGuid, 88, "MethodTransparencyComputationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<FieldTransparencyCalculationTraceData> TransparencyFieldTransparencyComputationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FieldTransparencyCalculationTraceData(value, 184, 14, "Transparency", TransparencyTaskGuid, 89, "FieldTransparencyComputationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<FieldTransparencyCalculationResultTraceData> TransparencyFieldTransparencyComputationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FieldTransparencyCalculationResultTraceData(value, 185, 14, "Transparency", TransparencyTaskGuid, 90, "FieldTransparencyComputationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<TokenTransparencyCalculationTraceData> TransparencyTokenTransparencyComputationStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TokenTransparencyCalculationTraceData(value, 186, 14, "Transparency", TransparencyTaskGuid, 91, "TokenTransparencyComputationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<TokenTransparencyCalculationResultTraceData> TransparencyTokenTransparencyComputationStop
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TokenTransparencyCalculationResultTraceData(value, 187, 14, "Transparency", TransparencyTaskGuid, 92, "TokenTransparencyComputationStop", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<NgenBindEventTraceData> NgenBinderNgenBind
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new NgenBindEventTraceData(value, 188, 13, "NgenBinder", NgenBinderTaskGuid, 69, "NgenBind", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<FailFastTraceData> FailFastFailFast
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FailFastTraceData(value, 191, 2, "FailFast", FailFastTaskGuid, 52, "FailFast", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<MulticoreJitPrivateTraceData> ClrMulticoreJitCommon
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MulticoreJitPrivateTraceData(value, 201, 17, "ClrMulticoreJit", ClrMulticoreJitTaskGuid, 10, "Common", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<ThreadPoolWorkingThreadCountTraceData> ThreadPoolWorkingThreadCountStart
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ThreadPoolWorkingThreadCountTraceData(value, 300, 15, "ThreadPoolWorkingThreadCount", ThreadPoolWorkingThreadCountTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }
        public event Action<LoaderHeapPrivateTraceData> LoaderHeapLoaderHeapAllocRequest
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LoaderHeapPrivateTraceData(value, 310, 16, "LoaderHeap", LoaderHeapTaskGuid, 97, "LoaderHeapAllocRequest", ProviderGuid, ProviderName));
            }
            remove
            {
                throw new Exception("Not supported");
            }
        }

       #region Event ID Definitions
        public const TraceEventID GCDecisionEventID = (TraceEventID) 1;
        public const TraceEventID GCSettingsEventID = (TraceEventID) 2;
        public const TraceEventID GCOptimizedEventID = (TraceEventID) 3;
        public const TraceEventID GCPerHeapHistoryEventID = (TraceEventID) 4;
        public const TraceEventID GCGlobalHeapHistoryEventID = (TraceEventID) 5;
        public const TraceEventID GCJoinEventID = (TraceEventID) 6;
        public const TraceEventID GCMarkStackRootsEventID = (TraceEventID) 7;
        public const TraceEventID GCMarkFinalizeQueueRootsEventID = (TraceEventID) 8;
        public const TraceEventID GCMarkHandlesEventID = (TraceEventID) 9;
        public const TraceEventID GCMarkCardsEventID = (TraceEventID) 10;
        public const TraceEventID GCBGCStartEventID = (TraceEventID) 11;
        public const TraceEventID GCBGC1stNonCondStopEventID = (TraceEventID) 12;
        public const TraceEventID GCBGC1stConStopEventID = (TraceEventID) 13;
        public const TraceEventID GCBGC2ndNonConStartEventID = (TraceEventID) 14;
        public const TraceEventID GCBGC2ndNonConStopEventID = (TraceEventID) 15;
        public const TraceEventID GCBGC2ndConStartEventID = (TraceEventID) 16;
        public const TraceEventID GCBGC2ndConStopEventID = (TraceEventID) 17;
        public const TraceEventID GCBGCPlanStopEventID = (TraceEventID) 18;
        public const TraceEventID GCBGCSweepStopEventID = (TraceEventID) 19;
        public const TraceEventID GCBGCDrainMarkEventID = (TraceEventID) 20;
        public const TraceEventID GCBGCRevisitEventID = (TraceEventID) 21;
        public const TraceEventID GCBGCOverflowEventID = (TraceEventID) 22;
        public const TraceEventID GCBGCAllocWaitStartEventID = (TraceEventID) 23;
        public const TraceEventID GCBGCAllocWaitStopEventID = (TraceEventID) 24;
        public const TraceEventID GCFullNotifyEventID = (TraceEventID) 25;
        public const TraceEventID StartupEEStartupStartEventID = (TraceEventID) 80;
        public const TraceEventID StartupEEStartupStopEventID = (TraceEventID) 81;
        public const TraceEventID StartupEEConfigSetupStartEventID = (TraceEventID) 82;
        public const TraceEventID StartupEEConfigSetupStopEventID = (TraceEventID) 83;
        public const TraceEventID StartupLoadSystemBasesStartEventID = (TraceEventID) 84;
        public const TraceEventID StartupLoadSystemBasesStopEventID = (TraceEventID) 85;
        public const TraceEventID StartupExecExeStartEventID = (TraceEventID) 86;
        public const TraceEventID StartupExecExeStopEventID = (TraceEventID) 87;
        public const TraceEventID StartupMainStartEventID = (TraceEventID) 88;
        public const TraceEventID StartupMainStopEventID = (TraceEventID) 89;
        public const TraceEventID StartupApplyPolicyStartEventID = (TraceEventID) 90;
        public const TraceEventID StartupApplyPolicyStopEventID = (TraceEventID) 91;
        public const TraceEventID StartupLdLibShFolderStartEventID = (TraceEventID) 92;
        public const TraceEventID StartupLdLibShFolderStopEventID = (TraceEventID) 93;
        public const TraceEventID StartupPrestubWorkerStartEventID = (TraceEventID) 94;
        public const TraceEventID StartupPrestubWorkerStopEventID = (TraceEventID) 95;
        public const TraceEventID StartupGetInstallationStartEventID = (TraceEventID) 96;
        public const TraceEventID StartupGetInstallationStopEventID = (TraceEventID) 97;
        public const TraceEventID StartupOpenHModuleStartEventID = (TraceEventID) 98;
        public const TraceEventID StartupOpenHModuleStopEventID = (TraceEventID) 99;
        public const TraceEventID StartupExplicitBindStartEventID = (TraceEventID) 100;
        public const TraceEventID StartupExplicitBindStopEventID = (TraceEventID) 101;
        public const TraceEventID StartupParseXmlStartEventID = (TraceEventID) 102;
        public const TraceEventID StartupParseXmlStopEventID = (TraceEventID) 103;
        public const TraceEventID StartupInitDefaultDomainStartEventID = (TraceEventID) 104;
        public const TraceEventID StartupInitDefaultDomainStopEventID = (TraceEventID) 105;
        public const TraceEventID StartupInitSecurityStartEventID = (TraceEventID) 106;
        public const TraceEventID StartupInitSecurityStopEventID = (TraceEventID) 107;
        public const TraceEventID StartupAllowBindingRedirsStartEventID = (TraceEventID) 108;
        public const TraceEventID StartupAllowBindingRedirsStopEventID = (TraceEventID) 109;
        public const TraceEventID StartupEEConfigSyncStartEventID = (TraceEventID) 110;
        public const TraceEventID StartupEEConfigSyncStopEventID = (TraceEventID) 111;
        public const TraceEventID StartupBindingStartEventID = (TraceEventID) 112;
        public const TraceEventID StartupBindingStopEventID = (TraceEventID) 113;
        public const TraceEventID StartupLoaderCatchCallStartEventID = (TraceEventID) 114;
        public const TraceEventID StartupLoaderCatchCallStopEventID = (TraceEventID) 115;
        public const TraceEventID StartupFusionInitStartEventID = (TraceEventID) 116;
        public const TraceEventID StartupFusionInitStopEventID = (TraceEventID) 117;
        public const TraceEventID StartupFusionAppCtxStartEventID = (TraceEventID) 118;
        public const TraceEventID StartupFusionAppCtxStopEventID = (TraceEventID) 119;
        public const TraceEventID StartupFusion2EEStartEventID = (TraceEventID) 120;
        public const TraceEventID StartupFusion2EEStopEventID = (TraceEventID) 121;
        public const TraceEventID StartupSecurityCatchCallStartEventID = (TraceEventID) 122;
        public const TraceEventID StartupSecurityCatchCallStopEventID = (TraceEventID) 123;
        public const TraceEventID ClrStackWalkEventID = (TraceEventID) 151;
        public const TraceEventID ClrPerfTrackModuleRangeLoadEventID = (TraceEventID) 158;
        public const TraceEventID BindingPolicyPhaseStartEventID = (TraceEventID) 159;
        public const TraceEventID BindingPolicyPhaseStopEventID = (TraceEventID) 160;
        public const TraceEventID BindingNgenPhaseStartEventID = (TraceEventID) 161;
        public const TraceEventID BindingNgenPhaseStopEventID = (TraceEventID) 162;
        public const TraceEventID BindingLoopupAndProbingPhaseStartEventID = (TraceEventID) 163;
        public const TraceEventID BindingLookupAndProbingPhaseStopEventID = (TraceEventID) 164;
        public const TraceEventID BindingLoaderPhaseStartEventID = (TraceEventID) 165;
        public const TraceEventID BindingLoaderPhaseStopEventID = (TraceEventID) 166;
        public const TraceEventID BindingPhaseStartEventID = (TraceEventID) 167;
        public const TraceEventID BindingPhaseStopEventID = (TraceEventID) 168;
        public const TraceEventID BindingDownloadPhaseStartEventID = (TraceEventID) 169;
        public const TraceEventID BindingDownloadPhaseStopEventID = (TraceEventID) 170;
        public const TraceEventID BindingLoaderAssemblyInitPhaseStartEventID = (TraceEventID) 171;
        public const TraceEventID BindingLoaderAssemblyInitPhaseStopEventID = (TraceEventID) 172;
        public const TraceEventID BindingLoaderMappingPhaseStartEventID = (TraceEventID) 173;
        public const TraceEventID BindingLoaderMappingPhaseStopEventID = (TraceEventID) 174;
        public const TraceEventID BindingLoaderDeliverEventPhaseStartEventID = (TraceEventID) 175;
        public const TraceEventID BindingLoaderDeliverEventsPhaseStopEventID = (TraceEventID) 176;
        public const TraceEventID EvidenceGenerationEvidenceGeneratedEventID = (TraceEventID) 177;
        public const TraceEventID TransparencyModuleTransparencyComputationStartEventID = (TraceEventID) 178;
        public const TraceEventID TransparencyModuleTransparencyComputationStopEventID = (TraceEventID) 179;
        public const TraceEventID TransparencyTypeTransparencyComputationStartEventID = (TraceEventID) 180;
        public const TraceEventID TransparencyTypeTransparencyComputationStopEventID = (TraceEventID) 181;
        public const TraceEventID TransparencyMethodTransparencyComputationStartEventID = (TraceEventID) 182;
        public const TraceEventID TransparencyMethodTransparencyComputationStopEventID = (TraceEventID) 183;
        public const TraceEventID TransparencyFieldTransparencyComputationStartEventID = (TraceEventID) 184;
        public const TraceEventID TransparencyFieldTransparencyComputationStopEventID = (TraceEventID) 185;
        public const TraceEventID TransparencyTokenTransparencyComputationStartEventID = (TraceEventID) 186;
        public const TraceEventID TransparencyTokenTransparencyComputationStopEventID = (TraceEventID) 187;
        public const TraceEventID NgenBinderNgenBindEventID = (TraceEventID) 188;
        public const TraceEventID FailFastFailFastEventID = (TraceEventID) 191;
        public const TraceEventID ClrMulticoreJitCommonEventID = (TraceEventID) 201;
        public const TraceEventID ThreadPoolWorkingThreadCountStartEventID = (TraceEventID) 300;
        public const TraceEventID LoaderHeapLoaderHeapAllocRequestEventID = (TraceEventID) 310;
       #endregion

    #region private
        private static Guid GCTaskGuid = new Guid(unchecked((int) 0x2f1b6bf6), unchecked((short) 0x18ff), unchecked((short) 0x4645), 0x95, 0x01, 0x15, 0xdf, 0x6c, 0x64, 0xc2, 0xcf);
        private static Guid FailFastTaskGuid = new Guid(unchecked((int) 0xee9ede12), unchecked((short) 0xc5f5), unchecked((short) 0x4995), 0x81, 0xa2, 0xdc, 0xfb, 0x5f, 0x6b, 0x80, 0xc8);
        private static Guid StartupTaskGuid = new Guid(unchecked((int) 0x02d08a4f), unchecked((short) 0xfd01), unchecked((short) 0x4538), 0x98, 0x9b, 0x03, 0xe4, 0x37, 0xb9, 0x50, 0xf4);
        private static Guid BindingTaskGuid = new Guid(unchecked((int) 0xe90e32ba), unchecked((short) 0xe396), unchecked((short) 0x4e6a), 0xa7, 0x90, 0x0a, 0x08, 0xc6, 0xc9, 0x25, 0xdc);
        private static Guid ClrStackTaskGuid = new Guid(unchecked((int) 0xd3363dc0), unchecked((short) 0x243a), unchecked((short) 0x4620), 0xa4, 0xd0, 0x8a, 0x07, 0xd7, 0x72, 0xf5, 0x33);
        private static Guid EvidenceGenerationTaskGuid = new Guid(unchecked((int) 0x24333617), unchecked((short) 0x5ae4), unchecked((short) 0x4f9e), 0xa5, 0xc5, 0x5e, 0xde, 0x1b, 0xc5, 0x92, 0x07);
        private static Guid NgenBinderTaskGuid = new Guid(unchecked((int) 0x861f5339), unchecked((short) 0x19d6), unchecked((short) 0x4873), 0xb3, 0x50, 0x7b, 0x03, 0x22, 0x8b, 0xda, 0x7c);
        private static Guid TransparencyTaskGuid = new Guid(unchecked((int) 0xe2444377), unchecked((short) 0xddf9), unchecked((short) 0x4589), 0xa8, 0x85, 0x08, 0xd6, 0x09, 0x25, 0x21, 0xdf);
        private static Guid ThreadPoolWorkingThreadCountTaskGuid = new Guid(unchecked((int) 0x1b032b96), unchecked((short) 0x767c), unchecked((short) 0x42e4), 0x84, 0x81, 0xcb, 0x52, 0x8a, 0x66, 0xd7, 0xbd);
        private static Guid LoaderHeapTaskGuid = new Guid(unchecked((int) 0x87f1e966), unchecked((short) 0xd604), unchecked((short) 0x41ba), 0xb1, 0xab, 0x18, 0x38, 0x49, 0xdf, 0xf2, 0x9d);
        private static Guid ClrMulticoreJitTaskGuid = new Guid(unchecked((int) 0xb85ad9e5), unchecked((short) 0x658b), unchecked((short) 0x4215), 0x8d, 0xdb, 0x83, 0x40, 0x40, 0xf4, 0xbc, 0x10);
        private static Guid ClrPerfTrackTaskGuid = new Guid(unchecked((int) 0xeac685f6), unchecked((short) 0x2104), unchecked((short) 0x4dec), 0x88, 0xfd, 0x91, 0xe4, 0x25, 0x42, 0x21, 0xec);
    #endregion
    }

    public sealed class GCDecisionTraceData : TraceEvent
    {
        public bool DoCompact { get { return GetInt32At(0) != 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(4); return 0; } }

        #region Private
        internal GCDecisionTraceData(Action<GCDecisionTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version == 1 && EventDataLength != 6));
            Debug.Assert(!(Version > 1 && EventDataLength < 6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("DoCompact", DoCompact);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DoCompact", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DoCompact;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCDecisionTraceData> Action;
        #endregion
    }
    public sealed class GCSettingsTraceData : TraceEvent
    {
        public long SegmentSize { get { return GetInt64At(0); } }
        public long LargeObjectSegmentSize { get { return GetInt64At(8); } }
        public bool ServerGC { get { return GetInt32At(16) != 0; } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(20); return 0; } }

        #region Private
        internal GCSettingsTraceData(Action<GCSettingsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version == 1 && EventDataLength != 22));
            Debug.Assert(!(Version > 1 && EventDataLength < 22));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("SegmentSize", SegmentSize);
             sb.XmlAttrib("LargeObjectSegmentSize", LargeObjectSegmentSize);
             sb.XmlAttrib("ServerGC", ServerGC);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SegmentSize", "LargeObjectSegmentSize", "ServerGC", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SegmentSize;
                case 1:
                    return LargeObjectSegmentSize;
                case 2:
                    return ServerGC;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCSettingsTraceData> Action;
        #endregion
    }
    public sealed class GCOptimizedTraceData : TraceEvent
    {
        public long DesiredAllocation { get { return GetInt64At(0); } }
        public long NewAllocation { get { return GetInt64At(8); } }
        public int GenerationNumber { get { return GetInt32At(16); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(20); return 0; } }

        #region Private
        internal GCOptimizedTraceData(Action<GCOptimizedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 20));
            Debug.Assert(!(Version == 1 && EventDataLength != 22));
            Debug.Assert(!(Version > 1 && EventDataLength < 22));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttribHex("DesiredAllocation", DesiredAllocation);
             sb.XmlAttribHex("NewAllocation", NewAllocation);
             sb.XmlAttrib("GenerationNumber", GenerationNumber);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DesiredAllocation", "NewAllocation", "GenerationNumber", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DesiredAllocation;
                case 1:
                    return NewAllocation;
                case 2:
                    return GenerationNumber;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCOptimizedTraceData> Action;
        #endregion
    }
    public sealed class GCPerHeapHistoryTraceData : TraceEvent
    {
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(0); return 0; } }

        #region Private
        internal GCPerHeapHistoryTraceData(Action<GCPerHeapHistoryTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 2));
            Debug.Assert(!(Version > 1 && EventDataLength < 2));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCPerHeapHistoryTraceData> Action;
        #endregion
    }
    public sealed class GCGlobalHeapTraceData : TraceEvent
    {
        public long FinalYoungestDesired { get { return GetInt64At(0); } }
        public int NumHeaps { get { return GetInt32At(8); } }
        public int CondemnedGeneration { get { return GetInt32At(12); } }
        public int Gen0ReductionCount { get { return GetInt32At(16); } }
        public GCReason Reason { get { return (GCReason)GetInt32At(20); } }
        public GCGlobalMechanisms GlobalMechanisms { get { return (GCGlobalMechanisms)GetInt32At(24); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(28); return 0; } }

        #region Private
        internal GCGlobalHeapTraceData(Action<GCGlobalHeapTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 28));
            Debug.Assert(!(Version == 1 && EventDataLength != 30));
            Debug.Assert(!(Version > 1 && EventDataLength < 30));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttribHex("FinalYoungestDesired", FinalYoungestDesired);
             sb.XmlAttrib("NumHeaps", NumHeaps);
             sb.XmlAttrib("CondemnedGeneration", CondemnedGeneration);
             sb.XmlAttrib("Gen0ReductionCount", Gen0ReductionCount);
             sb.XmlAttrib("Reason", Reason);
             sb.XmlAttrib("GlobalMechanisms", GlobalMechanisms);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FinalYoungestDesired", "NumHeaps", "CondemnedGeneration", "Gen0ReductionCount", "Reason", "GlobalMechanisms", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FinalYoungestDesired;
                case 1:
                    return NumHeaps;
                case 2:
                    return CondemnedGeneration;
                case 3:
                    return Gen0ReductionCount;
                case 4:
                    return Reason;
                case 5:
                    return GlobalMechanisms;
                case 6:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCGlobalHeapTraceData> Action;
        #endregion
    }
    public sealed class GCJoinTraceData : TraceEvent
    {
        public int Heap { get { return GetInt32At(0); } }
        public int JoinTime { get { return GetInt32At(4); } }
        public int JoinType { get { return GetInt32At(8); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(12); return 0; } }

        #region Private
        internal GCJoinTraceData(Action<GCJoinTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 12));
            Debug.Assert(!(Version == 1 && EventDataLength != 14));
            Debug.Assert(!(Version > 1 && EventDataLength < 14));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Heap", Heap);
             sb.XmlAttrib("JoinTime", JoinTime);
             sb.XmlAttrib("JoinType", JoinType);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Heap", "JoinTime", "JoinType", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Heap;
                case 1:
                    return JoinTime;
                case 2:
                    return JoinType;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCJoinTraceData> Action;
        #endregion
    }
    public sealed class GCMarkTraceData : TraceEvent
    {
        public int HeapNum { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(4); return 0; } }

        #region Private
        internal GCMarkTraceData(Action<GCMarkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version == 1 && EventDataLength != 6));
            Debug.Assert(!(Version > 1 && EventDataLength < 6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("HeapNum", HeapNum);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "HeapNum", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return HeapNum;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCMarkTraceData> Action;
        #endregion
    }
    public sealed class GCNoUserDataTraceData : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }

        #region Private
        internal GCNoUserDataTraceData(Action<GCNoUserDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 2));
            Debug.Assert(!(Version > 0 && EventDataLength < 2));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCNoUserDataTraceData> Action;
        #endregion
    }
    public sealed class BGCDrainMarkTraceData : TraceEvent
    {
        public long Objects { get { return GetInt64At(0); } }
        public int ClrInstanceID { get { return GetInt16At(8); } }

        #region Private
        internal BGCDrainMarkTraceData(Action<BGCDrainMarkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 10));
            Debug.Assert(!(Version > 0 && EventDataLength < 10));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Objects", Objects);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Objects", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Objects;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BGCDrainMarkTraceData> Action;
        #endregion
    }
    public sealed class BGCRevisitTraceData : TraceEvent
    {
        public long Pages { get { return GetInt64At(0); } }
        public long Objects { get { return GetInt64At(8); } }
        public int IsLarge { get { return GetInt32At(16); } }
        public int ClrInstanceID { get { return GetInt16At(20); } }

        #region Private
        internal BGCRevisitTraceData(Action<BGCRevisitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 22));
            Debug.Assert(!(Version > 0 && EventDataLength < 22));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Pages", Pages);
             sb.XmlAttrib("Objects", Objects);
             sb.XmlAttrib("IsLarge", IsLarge);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pages", "Objects", "IsLarge", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pages;
                case 1:
                    return Objects;
                case 2:
                    return IsLarge;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BGCRevisitTraceData> Action;
        #endregion
    }
    public sealed class BGCOverflowTraceData : TraceEvent
    {
        public long Min { get { return GetInt64At(0); } }
        public long Max { get { return GetInt64At(8); } }
        public long Objects { get { return GetInt64At(16); } }
        public int IsLarge { get { return GetInt32At(24); } }
        public int ClrInstanceID { get { return GetInt16At(28); } }

        #region Private
        internal BGCOverflowTraceData(Action<BGCOverflowTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 30));
            Debug.Assert(!(Version > 0 && EventDataLength < 30));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Min", Min);
             sb.XmlAttrib("Max", Max);
             sb.XmlAttrib("Objects", Objects);
             sb.XmlAttrib("IsLarge", IsLarge);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Min", "Max", "Objects", "IsLarge", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Min;
                case 1:
                    return Max;
                case 2:
                    return Objects;
                case 3:
                    return IsLarge;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BGCOverflowTraceData> Action;
        #endregion
    }
    public sealed class BGCAllocWaitTraceData : TraceEvent
    {
        public int Reason { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }

        #region Private
        internal BGCAllocWaitTraceData(Action<BGCAllocWaitTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Reason", Reason);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BGCAllocWaitTraceData> Action;
        #endregion
    }
    public sealed class GCFullNotifyTraceData : TraceEvent
    {
        public int GenNumber { get { return GetInt32At(0); } }
        public int IsAlloc { get { return GetInt32At(4); } }
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(8); return 0; } }

        #region Private
        internal GCFullNotifyTraceData(Action<GCFullNotifyTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version == 1 && EventDataLength != 10));
            Debug.Assert(!(Version > 1 && EventDataLength < 10));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("GenNumber", GenNumber);
             sb.XmlAttrib("IsAlloc", IsAlloc);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GenNumber", "IsAlloc", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GenNumber;
                case 1:
                    return IsAlloc;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GCFullNotifyTraceData> Action;
        #endregion
    }
    public sealed class StartupTraceData : TraceEvent
    {
        public int ClrInstanceID { get { if (Version >= 1) return GetInt16At(0); return 0; } }

        #region Private
        internal StartupTraceData(Action<StartupTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 2));
            Debug.Assert(!(Version > 1 && EventDataLength < 2));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<StartupTraceData> Action;
        #endregion
    }
    public sealed class ClrStackWalkTraceData : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        // Skipping Reserved1
        // Skipping Reserved2
        public int FrameCount { get { return GetInt32At(4); } }
        public Address Stack { get { return GetHostPointer(8); } }

        #region Private
        internal ClrStackWalkTraceData(Action<ClrStackWalkTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.XmlAttrib("FrameCount", FrameCount);
             sb.XmlAttribHex("Stack", Stack);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "FrameCount", "Stack"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return FrameCount;
                case 2:
                    return Stack;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ClrStackWalkTraceData> Action;
        #endregion
    }
    public sealed class ModuleRangePrivateTraceData : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public long ModuleID { get { return GetInt64At(2); } }
        public int RangeBegin { get { return GetInt32At(10); } }
        public int RangeSize { get { return GetInt32At(14); } }
        public ModuleRangeType RangeType { get { return (ModuleRangeType)GetByteAt(18); } }
        public ModuleRangeIBCType IBCType { get { return (ModuleRangeIBCType)GetByteAt(19); } }
        public ModuleRangeSectionType SectionType { get { return (ModuleRangeSectionType)GetInt16At(20); } }

        #region Private
        internal ModuleRangePrivateTraceData(Action<ModuleRangePrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 22));
            Debug.Assert(!(Version > 0 && EventDataLength < 22));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.XmlAttribHex("ModuleID", ModuleID);
             sb.XmlAttribHex("RangeBegin", RangeBegin);
             sb.XmlAttribHex("RangeSize", RangeSize);
             sb.XmlAttrib("RangeType", RangeType);
             sb.XmlAttrib("IBCType", IBCType);
             sb.XmlAttrib("SectionType", SectionType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "ModuleID", "RangeBegin", "RangeSize", "RangeType", "IBCType", "SectionType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return ModuleID;
                case 2:
                    return RangeBegin;
                case 3:
                    return RangeSize;
                case 4:
                    return RangeType;
                case 5:
                    return IBCType;
                case 6:
                    return SectionType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ModuleRangePrivateTraceData> Action;
        #endregion
    }
    public sealed class BindingTraceData : TraceEvent
    {
        public int AppDomainID { get { return GetInt32At(0); } }
        public int LoadContextID { get { return GetInt32At(4); } }
        public int FromLoaderCache { get { return GetInt32At(8); } }
        public int DynamicLoad { get { return GetInt32At(12); } }
        public string AssemblyCodebase { get { return GetUnicodeStringAt(16); } }
        public string AssemblyName { get { return GetUnicodeStringAt(SkipUnicodeString(16)); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(16))); } }

        #region Private
        internal BindingTraceData(Action<BindingTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(16))+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(16))+2));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("LoadContextID", LoadContextID);
             sb.XmlAttrib("FromLoaderCache", FromLoaderCache);
             sb.XmlAttrib("DynamicLoad", DynamicLoad);
             sb.XmlAttrib("AssemblyCodebase", AssemblyCodebase);
             sb.XmlAttrib("AssemblyName", AssemblyName);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AppDomainID", "LoadContextID", "FromLoaderCache", "DynamicLoad", "AssemblyCodebase", "AssemblyName", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AppDomainID;
                case 1:
                    return LoadContextID;
                case 2:
                    return FromLoaderCache;
                case 3:
                    return DynamicLoad;
                case 4:
                    return AssemblyCodebase;
                case 5:
                    return AssemblyName;
                case 6:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BindingTraceData> Action;
        #endregion
    }
    public sealed class EvidenceGeneratedTraceData : TraceEvent
    {
        public int Type { get { return GetInt32At(0); } }
        public int AppDomain { get { return GetInt32At(4); } }
        public string ILImage { get { return GetUnicodeStringAt(8); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(8)); } }

        #region Private
        internal EvidenceGeneratedTraceData(Action<EvidenceGeneratedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(8)+2));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(8)+2));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Type", Type);
             sb.XmlAttrib("AppDomain", AppDomain);
             sb.XmlAttrib("ILImage", ILImage);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "AppDomain", "ILImage", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return AppDomain;
                case 2:
                    return ILImage;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EvidenceGeneratedTraceData> Action;
        #endregion
    }
    public sealed class ModuleTransparencyCalculationTraceData : TraceEvent
    {
        public string Module { get { return GetUnicodeStringAt(0); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(0)+4); } }

        #region Private
        internal ModuleTransparencyCalculationTraceData(Action<ModuleTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+6));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Module", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Module;
                case 1:
                    return AppDomainID;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ModuleTransparencyCalculationTraceData> Action;
        #endregion
    }
    public sealed class ModuleTransparencyCalculationResultTraceData : TraceEvent
    {
        public string Module { get { return GetUnicodeStringAt(0); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(0)); } }
        public bool IsAllCritical { get { return GetInt32At(SkipUnicodeString(0)+4) != 0; } }
        public bool IsAllTransparent { get { return GetInt32At(SkipUnicodeString(0)+8) != 0; } }
        public bool IsTreatAsSafe { get { return GetInt32At(SkipUnicodeString(0)+12) != 0; } }
        public bool IsOpportunisticallyCritical { get { return GetInt32At(SkipUnicodeString(0)+16) != 0; } }
        public int SecurityRuleSet { get { return GetInt32At(SkipUnicodeString(0)+20); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(0)+24); } }

        #region Private
        internal ModuleTransparencyCalculationResultTraceData(Action<ModuleTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)+26));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)+26));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("IsAllCritical", IsAllCritical);
             sb.XmlAttrib("IsAllTransparent", IsAllTransparent);
             sb.XmlAttrib("IsTreatAsSafe", IsTreatAsSafe);
             sb.XmlAttrib("IsOpportunisticallyCritical", IsOpportunisticallyCritical);
             sb.XmlAttrib("SecurityRuleSet", SecurityRuleSet);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Module", "AppDomainID", "IsAllCritical", "IsAllTransparent", "IsTreatAsSafe", "IsOpportunisticallyCritical", "SecurityRuleSet", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Module;
                case 1:
                    return AppDomainID;
                case 2:
                    return IsAllCritical;
                case 3:
                    return IsAllTransparent;
                case 4:
                    return IsTreatAsSafe;
                case 5:
                    return IsOpportunisticallyCritical;
                case 6:
                    return SecurityRuleSet;
                case 7:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ModuleTransparencyCalculationResultTraceData> Action;
        #endregion
    }
    public sealed class TypeTransparencyCalculationTraceData : TraceEvent
    {
        public string Type { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+4); } }

        #region Private
        internal TypeTransparencyCalculationTraceData(Action<TypeTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+6));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Type", Type);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Module", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TypeTransparencyCalculationTraceData> Action;
        #endregion
    }
    public sealed class TypeTransparencyCalculationResultTraceData : TraceEvent
    {
        public string Type { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool IsAllCritical { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4) != 0; } }
        public bool IsAllTransparent { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8) != 0; } }
        public bool IsCritical { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+12) != 0; } }
        public bool IsTreatAsSafe { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+16) != 0; } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+20); } }

        #region Private
        internal TypeTransparencyCalculationResultTraceData(Action<TypeTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+22));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+22));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Type", Type);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("IsAllCritical", IsAllCritical);
             sb.XmlAttrib("IsAllTransparent", IsAllTransparent);
             sb.XmlAttrib("IsCritical", IsCritical);
             sb.XmlAttrib("IsTreatAsSafe", IsTreatAsSafe);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type", "Module", "AppDomainID", "IsAllCritical", "IsAllTransparent", "IsCritical", "IsTreatAsSafe", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return IsAllCritical;
                case 4:
                    return IsAllTransparent;
                case 5:
                    return IsCritical;
                case 6:
                    return IsTreatAsSafe;
                case 7:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TypeTransparencyCalculationResultTraceData> Action;
        #endregion
    }
    public sealed class MethodTransparencyCalculationTraceData : TraceEvent
    {
        public string Method { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+4); } }

        #region Private
        internal MethodTransparencyCalculationTraceData(Action<MethodTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+6));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Method", Method);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Method", "Module", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Method;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodTransparencyCalculationTraceData> Action;
        #endregion
    }
    public sealed class MethodTransparencyCalculationResultTraceData : TraceEvent
    {
        public string Method { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool IsCritical { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4) != 0; } }
        public bool IsTreatAsSafe { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8) != 0; } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+12); } }

        #region Private
        internal MethodTransparencyCalculationResultTraceData(Action<MethodTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+14));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+14));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Method", Method);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("IsCritical", IsCritical);
             sb.XmlAttrib("IsTreatAsSafe", IsTreatAsSafe);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Method", "Module", "AppDomainID", "IsCritical", "IsTreatAsSafe", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Method;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return IsCritical;
                case 4:
                    return IsTreatAsSafe;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MethodTransparencyCalculationResultTraceData> Action;
        #endregion
    }
    public sealed class FieldTransparencyCalculationTraceData : TraceEvent
    {
        public string Field { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+4); } }

        #region Private
        internal FieldTransparencyCalculationTraceData(Action<FieldTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+6));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Field", Field);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Field", "Module", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Field;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FieldTransparencyCalculationTraceData> Action;
        #endregion
    }
    public sealed class FieldTransparencyCalculationResultTraceData : TraceEvent
    {
        public string Field { get { return GetUnicodeStringAt(0); } }
        public string Module { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool IsCritical { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+4) != 0; } }
        public bool IsTreatAsSafe { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+8) != 0; } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+12); } }

        #region Private
        internal FieldTransparencyCalculationResultTraceData(Action<FieldTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))+14));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))+14));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Field", Field);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("IsCritical", IsCritical);
             sb.XmlAttrib("IsTreatAsSafe", IsTreatAsSafe);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Field", "Module", "AppDomainID", "IsCritical", "IsTreatAsSafe", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Field;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return IsCritical;
                case 4:
                    return IsTreatAsSafe;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FieldTransparencyCalculationResultTraceData> Action;
        #endregion
    }
    public sealed class TokenTransparencyCalculationTraceData : TraceEvent
    {
        public int Token { get { return GetInt32At(0); } }
        public string Module { get { return GetUnicodeStringAt(4); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(4)); } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(4)+4); } }

        #region Private
        internal TokenTransparencyCalculationTraceData(Action<TokenTransparencyCalculationTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+6));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Token", Token);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Token", "Module", "AppDomainID", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Token;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TokenTransparencyCalculationTraceData> Action;
        #endregion
    }
    public sealed class TokenTransparencyCalculationResultTraceData : TraceEvent
    {
        public int Token { get { return GetInt32At(0); } }
        public string Module { get { return GetUnicodeStringAt(4); } }
        public int AppDomainID { get { return GetInt32At(SkipUnicodeString(4)); } }
        public bool IsCritical { get { return GetInt32At(SkipUnicodeString(4)+4) != 0; } }
        public bool IsTreatAsSafe { get { return GetInt32At(SkipUnicodeString(4)+8) != 0; } }
        public int ClrInstanceID { get { return GetInt16At(SkipUnicodeString(4)+12); } }

        #region Private
        internal TokenTransparencyCalculationResultTraceData(Action<TokenTransparencyCalculationResultTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(4)+14));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(4)+14));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Token", Token);
             sb.XmlAttrib("Module", Module);
             sb.XmlAttrib("AppDomainID", AppDomainID);
             sb.XmlAttrib("IsCritical", IsCritical);
             sb.XmlAttrib("IsTreatAsSafe", IsTreatAsSafe);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Token", "Module", "AppDomainID", "IsCritical", "IsTreatAsSafe", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Token;
                case 1:
                    return Module;
                case 2:
                    return AppDomainID;
                case 3:
                    return IsCritical;
                case 4:
                    return IsTreatAsSafe;
                case 5:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TokenTransparencyCalculationResultTraceData> Action;
        #endregion
    }
    public sealed class NgenBindEventTraceData : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public long BindingID { get { return GetInt64At(2); } }
        public int ReasonCode { get { return GetInt32At(10); } }
        public string AssemblyName { get { return GetUnicodeStringAt(14); } }

        #region Private
        internal NgenBindEventTraceData(Action<NgenBindEventTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(14)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(14)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.XmlAttrib("BindingID", BindingID);
             sb.XmlAttrib("ReasonCode", ReasonCode);
             sb.XmlAttrib("AssemblyName", AssemblyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "BindingID", "ReasonCode", "AssemblyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return BindingID;
                case 2:
                    return ReasonCode;
                case 3:
                    return AssemblyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<NgenBindEventTraceData> Action;
        #endregion
    }
    public sealed class FailFastTraceData : TraceEvent
    {
        public string FailFastUserMessage { get { return GetUnicodeStringAt(0); } }
        public Address FailedEIP { get { return GetHostPointer(SkipUnicodeString(0)); } }
        public int OSExitCode { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+4, 1)); } }
        public int ClrExitCode { get { return GetInt32At(HostOffset(SkipUnicodeString(0)+8, 1)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(SkipUnicodeString(0)+12, 1)); } }

        #region Private
        internal FailFastTraceData(Action<FailFastTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(SkipUnicodeString(0)+14, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(SkipUnicodeString(0)+14, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("FailFastUserMessage", FailFastUserMessage);
             sb.XmlAttribHex("FailedEIP", FailedEIP);
             sb.XmlAttrib("OSExitCode", OSExitCode);
             sb.XmlAttrib("ClrExitCode", ClrExitCode);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FailFastUserMessage", "FailedEIP", "OSExitCode", "ClrExitCode", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FailFastUserMessage;
                case 1:
                    return FailedEIP;
                case 2:
                    return OSExitCode;
                case 3:
                    return ClrExitCode;
                case 4:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FailFastTraceData> Action;
        #endregion
    }
    public sealed class MulticoreJitPrivateTraceData : TraceEvent
    {
        public int ClrInstanceID { get { return GetInt16At(0); } }
        public string String1 { get { return GetUnicodeStringAt(2); } }
        public string String2 { get { return GetUnicodeStringAt(SkipUnicodeString(2)); } }
        public int Int1 { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(2))); } }
        public int Int2 { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(2))+4); } }
        public int Int3 { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(2))+8); } }

        #region Private
        internal MulticoreJitPrivateTraceData(Action<MulticoreJitPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(2))+12));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(2))+12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.XmlAttrib("String1", String1);
             sb.XmlAttrib("String2", String2);
             sb.XmlAttrib("Int1", Int1);
             sb.XmlAttrib("Int2", Int2);
             sb.XmlAttrib("Int3", Int3);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ClrInstanceID", "String1", "String2", "Int1", "Int2", "Int3"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ClrInstanceID;
                case 1:
                    return String1;
                case 2:
                    return String2;
                case 3:
                    return Int1;
                case 4:
                    return Int2;
                case 5:
                    return Int3;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MulticoreJitPrivateTraceData> Action;
        #endregion
    }
    public sealed class ThreadPoolWorkingThreadCountTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }
        public int ClrInstanceID { get { return GetInt16At(4); } }

        #region Private
        internal ThreadPoolWorkingThreadCountTraceData(Action<ThreadPoolWorkingThreadCountTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 6));
            Debug.Assert(!(Version > 0 && EventDataLength < 6));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttrib("Count", Count);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                case 1:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ThreadPoolWorkingThreadCountTraceData> Action;
        #endregion
    }
    public sealed class LoaderHeapPrivateTraceData : TraceEvent
    {
        public Address LoaderHeapPtr { get { return GetHostPointer(0); } }
        public int RequestSize { get { return GetInt32At(HostOffset(4, 1)); } }
        public int ClrInstanceID { get { return GetInt16At(HostOffset(8, 1)); } }

        #region Private
        internal LoaderHeapPrivateTraceData(Action<LoaderHeapPrivateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         internal protected override void Dispatch()
        {
            Action(this);
        }
         internal protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(10, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(10, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             sb.XmlAttribHex("LoaderHeapPtr", LoaderHeapPtr);
             sb.XmlAttrib("RequestSize", RequestSize);
             sb.XmlAttrib("ClrInstanceID", ClrInstanceID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LoaderHeapPtr", "RequestSize", "ClrInstanceID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LoaderHeapPtr;
                case 1:
                    return RequestSize;
                case 2:
                    return ClrInstanceID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LoaderHeapPrivateTraceData> Action;
        #endregion
    }
        [Flags]
        public enum ModuleRangeIBCType
        {
            None = 0,
            IBCUnprofiledSection = 0x1,
            IBCProfiledSection = 0x2,
        }
        [Flags]
        public enum ModuleRangeType
        {
            None = 0,
            HotRange = 0x1,
            WarmRange = 0x2,
            ColdRange = 0x4,
            HotColdSortedRange = 0x8,
        }
        [Flags]
        public enum GCGlobalMechanisms
        {
            None = 0,
            Concurrent = 0x1,
            Compaction = 0x2,
            Promotion = 0x4,
            Demotion = 0x8,
            CardBundles = 0x10,
        }
        public enum ModuleRangeSectionType
        {
            ModuleSection = 0x1,
            EETableSection = 0x2,
            WriteDataSection = 0x3,
            WriteableDataSection = 0x4,
            DataSection = 0x5,
            RVAStaticsSection = 0x6,
            EEDataSection = 0x7,
            DelayLoadInfoTableEagerSection = 0x8,
            DelayLoadInfoTableSection = 0x9,
            EEReadonlyData = 0xA,
            ReadonlyData = 0xB,
            ClassSection = 0xC,
            CrossDomainInfoSection = 0xD,
            MethodDescSection = 0xE,
            MethodDescWriteableSection = 0xF,
            ExceptionSection = 0x10,
            InstrumentSection = 0x11,
            VirtualImportThunkSection = 0x12,
            ExternalMethodThunkSection = 0x13,
            HelperTableSection = 0x14,
            MethodPrecodeWriteableSection = 0x15,
            MethodPrecodeWriteSection = 0x16,
            MethodPrecodeSection = 0x17,
            Win32ResourcesSection = 0x18,
            HeaderSection = 0x19,
            MetadataSection = 0x1A,
            DelayLoadInfoSection = 0x1B,
            ImportTableSection = 0x1C,
            CodeSection = 0x1D,
            CodeHeaderSection = 0x1E,
            CodeManagerSection = 0x1F,
            UnwindDataSection = 0x20,
            RuntimeFunctionSection = 0x21,
            StubsSection = 0x22,
            StubDispatchDataSection = 0x23,
            ExternalMethodDataSection = 0x24,
            DelayLoadInfoDelayListSection = 0x25,
            ReadonlySharedSection = 0x26,
            ReadonlySection = 0x27,
            ILSection = 0x28,
            GCInfoSection = 0x29,
            ILMetadataSection = 0x2A,
            ResourcesSection = 0x2B,
            CompressedMapsSection = 0x2C,
            DebugSection = 0x2D,
            BaseRelocsSection = 0x2E,
        }
        public enum GCReason
        {
            AllocSmall = 0x0,
            Induced = 0x1,
            LowMemory = 0x2,
            Empty = 0x3,
            AllocLarge = 0x4,
            OutOfSpaceSmallObjectHeap = 0x5,
            OutOfSpaceLargeObjectHeap = 0x6,
        }

}
