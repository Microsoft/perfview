using System;
using System.Text;
using System.Diagnostics;
using Microsoft.Diagnostics.Tracing;
using Microsoft.Diagnostics.Tracing.Parsers;
using Microsoft.Diagnostics.Tracing.Parsers.Wpf;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "1.0")]
    public sealed class WpfTraceEventParser : TraceEventParser 
    {
        public new static string ProviderName = "Microsoft-Windows-WPF";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xe13b77a8), unchecked((short) 0x14b6), unchecked((short) 0x11de), 0x80, 0x69, 0x00, 0x1b, 0x21, 0x2b, 0x50, 0x09);
        public enum Keywords : long
        {
            KeywordGeneral = 0x1,
            KeywordPerf = 0x2,
            KeywordText = 0x4,
            KeywordInput = 0x8,
            KeywordAnnotation = 0x10,
            KeywordXamlBaml = 0x20,
            KeywordXPS = 0x40,
            KeywordAnimation = 0x80,
            KeywordLayout = 0x100,
            KeywordHosting = 0x400,
            KeywordHeapMeter = 0x800,
            KeywordGraphics = 0x1000,
            KeywordDispatcher = 0x2000,
        };

        public WpfTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<Template18TraceData> WClientCreateVisual
        {
            add
            {
                                                         // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template18TraceData(value, 1, 28, "WClientCreateVisual", WClientCreateVisualTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientCreateVisualTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAppCtor
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 2, 48, "WClientAppCtor", WClientAppCtorTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientAppCtorTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAppRun
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3, 49, "WClientAppRun", WClientAppRunTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientAppRunTaskGuid);
            }
        }
        public event Action<InfoStringTemplateTraceData> WClientString
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new InfoStringTemplateTraceData(value, 4, 51, "WClientString", WClientStringTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientStringTaskGuid);
            }
        }
        public event Action<InfoStringTemplateTraceData> WClientStringBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new InfoStringTemplateTraceData(value, 5, 51, "WClientString", WClientStringTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientStringTaskGuid);
            }
        }
        public event Action<InfoStringTemplateTraceData> WClientStringEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new InfoStringTemplateTraceData(value, 6, 51, "WClientString", WClientStringTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientStringTaskGuid);
            }
        }
        public event Action<Template37TraceData> WClientPropParentCheck
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template37TraceData(value, 7, 85, "WClientPropParentCheck", WClientPropParentCheckTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientPropParentCheckTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateVisualStateStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 8, 129, "UpdateVisualState", UpdateVisualStateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, UpdateVisualStateTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateVisualStateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9, 129, "UpdateVisualState", UpdateVisualStateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, UpdateVisualStateTaskGuid);
            }
        }
        public event Action<PerfElementNameTraceData> PerfElementIDName
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementNameTraceData(value, 10, 143, "WPFElementID", WPFElementIDTaskGuid, 10, "ElementName", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, WPFElementIDTaskGuid);
            }
        }
        public event Action<PerfElementInfoTraceData> PerfElementIDAssignment
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementInfoTraceData(value, 11, 143, "WPFElementID", WPFElementIDTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WPFElementIDTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientFontCache
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 1001, 52, "WClientFontCache", WClientFontCacheTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1001, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientFontCacheTaskGuid);
            }
        }
        public event Action<Template19TraceData> WClientInputMessage
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template19TraceData(value, 2001, 29, "WClientInputMessage", WClientInputMessageTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2001, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientInputMessageTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> StylusEventQueued
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2002, 132, "StylusEventQueued", StylusEventQueuedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2002, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, StylusEventQueuedTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> TouchDownReported
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2003, 133, "TouchDownReported", TouchDownReportedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2003, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TouchDownReportedTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> TouchMoveReported
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2004, 134, "TouchMoveReported", TouchMoveReportedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2004, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TouchMoveReportedTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> TouchUpReported
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2005, 135, "TouchUpReported", TouchUpReportedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2005, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, TouchUpReportedTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> ManipulationReportFrame
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2006, 136, "ManipulationReportFrame", ManipulationReportFrameTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2006, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ManipulationReportFrameTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> ManipulationEventRaised
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 2007, 137, "ManipulationEventRaised", ManipulationEventRaisedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2007, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, ManipulationEventRaisedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateStickyNoteBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3001, 92, "CreateStickyNote", CreateStickyNoteTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateStickyNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateStickyNoteEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3002, 92, "CreateStickyNote", CreateStickyNoteTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateStickyNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteTextNoteBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3003, 93, "DeleteTextNote", DeleteTextNoteTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3003, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DeleteTextNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteTextNoteEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3004, 93, "DeleteTextNote", DeleteTextNoteTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3004, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DeleteTextNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteInkNoteBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3005, 94, "DeleteInkNote", DeleteInkNoteTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3005, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DeleteInkNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteInkNoteEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3006, 94, "DeleteInkNote", DeleteInkNoteTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3006, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DeleteInkNoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateHighlightBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3007, 95, "CreateHighlight", CreateHighlightTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3007, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, CreateHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> CreateHighlightEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3008, 95, "CreateHighlight", CreateHighlightTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3008, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, CreateHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClearHighlightBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3009, 96, "ClearHighlight", ClearHighlightTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3009, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, ClearHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> ClearHighlightEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3010, 96, "ClearHighlight", ClearHighlightTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3010, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, ClearHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> LoadAnnotationsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3011, 97, "LoadAnnotations", LoadAnnotationsTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, LoadAnnotationsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> LoadAnnotationsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3012, 97, "LoadAnnotations", LoadAnnotationsTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, LoadAnnotationsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAnnotationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3013, 99, "AddAnnotation", AddAnnotationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3013, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AddAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAnnotationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3014, 99, "AddAnnotation", AddAnnotationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3014, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AddAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteAnnotationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3015, 100, "DeleteAnnotation", DeleteAnnotationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3015, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DeleteAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeleteAnnotationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3016, 100, "DeleteAnnotation", DeleteAnnotationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3016, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DeleteAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByIdBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3017, 101, "GetAnnotationById", GetAnnotationByIdTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3017, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, GetAnnotationByIdTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByIdEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3018, 101, "GetAnnotationById", GetAnnotationByIdTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3018, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, GetAnnotationByIdTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByLocBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3019, 102, "GetAnnotationByLoc", GetAnnotationByLocTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3019, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, GetAnnotationByLocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationByLocEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3020, 102, "GetAnnotationByLoc", GetAnnotationByLocTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3020, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, GetAnnotationByLocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3021, 103, "GetAnnotations", GetAnnotationsTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3021, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, GetAnnotationsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> GetAnnotationsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3022, 103, "GetAnnotations", GetAnnotationsTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3022, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, GetAnnotationsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SerializeAnnotationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3023, 104, "SerializeAnnotation", SerializeAnnotationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3023, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, SerializeAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> SerializeAnnotationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3024, 104, "SerializeAnnotation", SerializeAnnotationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3024, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, SerializeAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeserializeAnnotationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3025, 105, "DeserializeAnnotation", DeserializeAnnotationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3025, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, DeserializeAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DeserializeAnnotationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3026, 105, "DeserializeAnnotation", DeserializeAnnotationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3026, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, DeserializeAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateAnnotationWithSNCBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3027, 106, "UpdateAnnotationWithSNC", UpdateAnnotationWithSNCTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3027, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, UpdateAnnotationWithSNCTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateAnnotationWithSNCEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3028, 106, "UpdateAnnotationWithSNC", UpdateAnnotationWithSNCTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3028, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, UpdateAnnotationWithSNCTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateSNCWithAnnotationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3029, 107, "UpdateSNCWithAnnotation", UpdateSNCWithAnnotationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3029, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, UpdateSNCWithAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> UpdateSNCWithAnnotationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3030, 107, "UpdateSNCWithAnnotation", UpdateSNCWithAnnotationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3030, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, UpdateSNCWithAnnotationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationTextChangedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3031, 108, "AnnotationTextChanged", AnnotationTextChangedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3031, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AnnotationTextChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationTextChangedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3032, 108, "AnnotationTextChanged", AnnotationTextChangedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3032, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AnnotationTextChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationInkChangedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3033, 109, "AnnotationInkChanged", AnnotationInkChangedTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3033, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AnnotationInkChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AnnotationInkChangedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3034, 109, "AnnotationInkChanged", AnnotationInkChangedTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3034, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AnnotationInkChangedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedSNBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3035, 110, "AddAttachedSN", AddAttachedSNTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3035, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AddAttachedSNTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedSNEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3036, 110, "AddAttachedSN", AddAttachedSNTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3036, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AddAttachedSNTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedSNBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3037, 111, "RemoveAttachedSN", RemoveAttachedSNTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3037, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RemoveAttachedSNTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedSNEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3038, 111, "RemoveAttachedSN", RemoveAttachedSNTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3038, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RemoveAttachedSNTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedHighlightBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3039, 112, "AddAttachedHighlight", AddAttachedHighlightTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3039, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AddAttachedHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedHighlightEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3040, 112, "AddAttachedHighlight", AddAttachedHighlightTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3040, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AddAttachedHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedHighlightBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3041, 113, "RemoveAttachedHighlight", RemoveAttachedHighlightTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3041, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RemoveAttachedHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedHighlightEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3042, 113, "RemoveAttachedHighlight", RemoveAttachedHighlightTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3042, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RemoveAttachedHighlightTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedMHBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3043, 114, "AddAttachedMH", AddAttachedMHTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3043, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, AddAttachedMHTaskGuid);
            }
        }
        public event Action<EmptyTraceData> AddAttachedMHEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3044, 114, "AddAttachedMH", AddAttachedMHTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3044, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, AddAttachedMHTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedMHBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3045, 115, "RemoveAttachedMH", RemoveAttachedMHTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3045, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, RemoveAttachedMHTaskGuid);
            }
        }
        public event Action<EmptyTraceData> RemoveAttachedMHEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 3046, 115, "RemoveAttachedMH", RemoveAttachedMHTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3046, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, RemoveAttachedMHTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseBamlBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4001, 41, "WClientParseBaml", WClientParseBamlTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseBamlTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseBamlEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4002, 41, "WClientParseBaml", WClientParseBamlTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseBamlTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseXmlBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4003, 43, "WClientParseXml", WClientParseXmlTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4003, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseXmlTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseXmlEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4004, 43, "WClientParseXml", WClientParseXmlTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4004, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseXmlTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseFefCrInstBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4005, 44, "WClientParseFefCrInst", WClientParseFefCrInstTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4005, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseFefCrInstTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseFefCrInstEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4006, 44, "WClientParseFefCrInst", WClientParseFefCrInstTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4006, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseFefCrInstTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseInstVisTreeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4007, 45, "WClientParseInstVisTree", WClientParseInstVisTreeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4007, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseInstVisTreeTaskGuid);
            }
        }
        public event Action<MessageStringTemplateTraceData> WClientParseInstVisTreeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MessageStringTemplateTraceData(value, 4008, 45, "WClientParseInstVisTree", WClientParseInstVisTreeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4008, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseInstVisTreeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInstBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4009, 46, "WClientParseRdrCrInst", WClientParseRdrCrInstTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4009, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseRdrCrInstTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInstEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4010, 46, "WClientParseRdrCrInst", WClientParseRdrCrInstTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4010, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseRdrCrInstTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientParseRdrCrInFTypBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4011, 47, "WClientParseRdrCrInFTyp", WClientParseRdrCrInFTypTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseRdrCrInFTypTaskGuid);
            }
        }
        public event Action<TypeStringTemplateTraceData> WClientParseRdrCrInFTypEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TypeStringTemplateTraceData(value, 4012, 47, "WClientParseRdrCrInFTyp", WClientParseRdrCrInFTypTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseRdrCrInFTypTaskGuid);
            }
        }
        public event Action<KeyStringTemplateTraceData> WClientResourceFindBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new KeyStringTemplateTraceData(value, 4013, 86, "WClientResourceFind", WClientResourceFindTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4013, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientResourceFindTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceFindEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4014, 86, "WClientResourceFind", WClientResourceFindTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4014, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientResourceFindTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheValue
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4015, 87, "WClientResourceCacheValue", WClientResourceCacheValueTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4015, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientResourceCacheValueTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheNull
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4016, 88, "WClientResourceCacheNull", WClientResourceCacheNullTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4016, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientResourceCacheNullTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientResourceCacheMiss
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 4017, 89, "WClientResourceCacheMiss", WClientResourceCacheMissTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4017, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientResourceCacheMissTaskGuid);
            }
        }
        public event Action<KeyStringTemplateTraceData> WClientResourceStock
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new KeyStringTemplateTraceData(value, 4018, 90, "WClientResourceStock", WClientResourceStockTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4018, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientResourceStockTaskGuid);
            }
        }
        public event Action<AssemblyNameTemplateTraceData> WClientResourceBamlAssembly
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new AssemblyNameTemplateTraceData(value, 4019, 91, "WClientResourceBamlAssembly", WClientResourceBamlAssemblyTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4019, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientResourceBamlAssemblyTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseXamlBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4020, 42, "WClientParseXaml", WClientParseXamlTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4020, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientParseXamlTaskGuid);
            }
        }
        public event Action<WClientParseXamlBamlInfoTemplateTraceData> WClientParseXamlBamlInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new WClientParseXamlBamlInfoTemplateTraceData(value, 4021, 144, "WClientParseXamlBamlInfo", WClientParseXamlBamlInfoTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4021, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientParseXamlBamlInfoTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WClientParseXamlEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 4022, 42, "WClientParseXaml", WClientParseXamlTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4022, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientParseXamlTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFlushPageStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5001, 121, "WClientDRXFlushPage", WClientDRXFlushPageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXFlushPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFlushPageStop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5002, 121, "WClientDRXFlushPage", WClientDRXFlushPageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXFlushPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializeTreeStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5003, 123, "WClientDRXSerializeTree", WClientDRXSerializeTreeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5003, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXSerializeTreeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializeTreeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5004, 123, "WClientDRXSerializeTree", WClientDRXSerializeTreeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5004, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXSerializeTreeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetVisualStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5005, 122, "WClientDRXGetVisual", WClientDRXGetVisualTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5005, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXGetVisualTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetVisualEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5006, 122, "WClientDRXGetVisual", WClientDRXGetVisualTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5006, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXGetVisualTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXReleaseWriterStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5007, 124, "WClientDRXReleaseWriter", WClientDRXReleaseWriterTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5007, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXReleaseWriterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXReleaseWriterEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5008, 124, "WClientDRXReleaseWriter", WClientDRXReleaseWriterTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5008, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXReleaseWriterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPrintCapStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5009, 125, "WClientDRXGetPrintCap", WClientDRXGetPrintCapTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5009, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXGetPrintCapTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPrintCapEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5010, 125, "WClientDRXGetPrintCap", WClientDRXGetPrintCapTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5010, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXGetPrintCapTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXPTProviderStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5011, 126, "WClientDRXPTProvider", WClientDRXPTProviderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5011, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXPTProviderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXPTProviderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5012, 126, "WClientDRXPTProvider", WClientDRXPTProviderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXPTProviderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXRasterStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5013, 127, "WClientDRXRaster", WClientDRXRasterTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5013, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXRasterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXRasterEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5014, 127, "WClientDRXRaster", WClientDRXRasterTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5014, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXRasterTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXOpenPackageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5015, 53, "WClientDRXOpenPackage", WClientDRXOpenPackageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5015, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXOpenPackageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXOpenPackageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5016, 53, "WClientDRXOpenPackage", WClientDRXOpenPackageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5016, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXOpenPackageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetStreamBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5017, 55, "WClientDRXGetStream", WClientDRXGetStreamTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5017, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXGetStreamTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetStreamEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5018, 55, "WClientDRXGetStream", WClientDRXGetStreamTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5018, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXGetStreamTaskGuid);
            }
        }
        public event Action<Template31TraceData> WClientDRXPageVisible
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template31TraceData(value, 5019, 56, "WClientDRXPageVisible", WClientDRXPageVisibleTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5019, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXPageVisibleTaskGuid);
            }
        }
        public event Action<Template32TraceData> WClientDRXPageLoaded
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template32TraceData(value, 5020, 57, "WClientDRXPageLoaded", WClientDRXPageLoadedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5020, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXPageLoadedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXInvalidateView
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5021, 58, "WClientDRXInvalidateView", WClientDRXInvalidateViewTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5021, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXInvalidateViewTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStyleCreated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5022, 64, "WClientDRXStyleCreated", WClientDRXStyleCreatedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5022, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXStyleCreatedTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFindBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5023, 65, "WClientDRXFind", WClientDRXFindTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5023, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXFindTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXFindEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5024, 65, "WClientDRXFind", WClientDRXFindTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5024, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXFindTaskGuid);
            }
        }
        public event Action<Template35TraceData> WClientDRXZoom
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template35TraceData(value, 5025, 66, "WClientDRXZoom", WClientDRXZoomTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5025, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXZoomTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEnsureOMBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5026, 67, "WClientDRXEnsureOM", WClientDRXEnsureOMTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5026, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXEnsureOMTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEnsureOMEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5027, 67, "WClientDRXEnsureOM", WClientDRXEnsureOMTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5027, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXEnsureOMTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXTreeFlattenBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5028, 69, "WClientDRXTreeFlatten", WClientDRXTreeFlattenTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5028, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXTreeFlattenTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXTreeFlattenEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5029, 69, "WClientDRXTreeFlatten", WClientDRXTreeFlattenTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5029, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXTreeFlattenTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXAlphaFlattenBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5030, 70, "WClientDRXAlphaFlatten", WClientDRXAlphaFlattenTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5030, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXAlphaFlattenTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXAlphaFlattenEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5031, 70, "WClientDRXAlphaFlatten", WClientDRXAlphaFlattenTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5031, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXAlphaFlattenTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetDevModeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5032, 71, "WClientDRXGetDevMode", WClientDRXGetDevModeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5032, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXGetDevModeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetDevModeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5033, 71, "WClientDRXGetDevMode", WClientDRXGetDevModeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5033, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXGetDevModeTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartDocBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5034, 72, "WClientDRXStartDoc", WClientDRXStartDocTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5034, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXStartDocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartDocEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5035, 72, "WClientDRXStartDoc", WClientDRXStartDocTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5035, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXStartDocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndDocBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5036, 73, "WClientDRXEndDoc", WClientDRXEndDocTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5036, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXEndDocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndDocEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5037, 73, "WClientDRXEndDoc", WClientDRXEndDocTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5037, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXEndDocTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartPageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5038, 74, "WClientDRXStartPage", WClientDRXStartPageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5038, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXStartPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXStartPageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5039, 74, "WClientDRXStartPage", WClientDRXStartPageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5039, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXStartPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndPageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5040, 75, "WClientDRXEndPage", WClientDRXEndPageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5040, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXEndPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXEndPageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5041, 75, "WClientDRXEndPage", WClientDRXEndPageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5041, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXEndPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXCommitPageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5042, 76, "WClientDRXCommitPage", WClientDRXCommitPageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5042, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXCommitPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXCommitPageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5043, 76, "WClientDRXCommitPage", WClientDRXCommitPageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5043, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXCommitPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertFontBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5044, 77, "WClientDRXConvertFont", WClientDRXConvertFontTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5044, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXConvertFontTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertFontEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5045, 77, "WClientDRXConvertFont", WClientDRXConvertFontTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5045, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXConvertFontTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertImageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5046, 78, "WClientDRXConvertImage", WClientDRXConvertImageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5046, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXConvertImageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXConvertImageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5047, 78, "WClientDRXConvertImage", WClientDRXConvertImageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5047, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXConvertImageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSaveXpsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5048, 79, "WClientDRXSaveXps", WClientDRXSaveXpsTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5048, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXSaveXpsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSaveXpsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5049, 79, "WClientDRXSaveXps", WClientDRXSaveXpsTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5049, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXSaveXpsTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLoadPrimitiveBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5050, 80, "WClientDRXLoadPrimitive", WClientDRXLoadPrimitiveTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5050, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXLoadPrimitiveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLoadPrimitiveEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5051, 80, "WClientDRXLoadPrimitive", WClientDRXLoadPrimitiveTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5051, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXLoadPrimitiveTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSavePageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5052, 81, "WClientDRXSavePage", WClientDRXSavePageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5052, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXSavePageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSavePageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5053, 81, "WClientDRXSavePage", WClientDRXSavePageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5053, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXSavePageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializationBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5054, 82, "WClientDRXSerialization", WClientDRXSerializationTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5054, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXSerializationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXSerializationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5055, 82, "WClientDRXSerialization", WClientDRXSerializationTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5055, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXSerializationTaskGuid);
            }
        }
        public event Action<CounterTraceData> WClientDRXReadStreamBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CounterTraceData(value, 5056, 54, "WClientDRXReadStream", WClientDRXReadStreamTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5056, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXReadStreamTaskGuid);
            }
        }
        public event Action<Template30TraceData> WClientDRXReadStreamEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template30TraceData(value, 5057, 54, "WClientDRXReadStream", WClientDRXReadStreamTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5057, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXReadStreamTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPageBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5058, 68, "WClientDRXGetPage", WClientDRXGetPageTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5058, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXGetPageTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXGetPageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5059, 68, "WClientDRXGetPage", WClientDRXGetPageTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5059, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXGetPageTaskGuid);
            }
        }
        public event Action<Template33TraceData> WClientDRXLineDown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template33TraceData(value, 5060, 59, "WClientDRXLineDown", WClientDRXLineDownTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5060, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXLineDownTaskGuid);
            }
        }
        public event Action<Template33TraceData> WClientDRXPageDown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template33TraceData(value, 5061, 60, "WClientDRXPageDown", WClientDRXPageDownTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5061, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXPageDownTaskGuid);
            }
        }
        public event Action<Template34TraceData> WClientDRXPageJump
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template34TraceData(value, 5062, 61, "WClientDRXPageJump", WClientDRXPageJumpTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5062, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXPageJumpTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLayoutBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5063, 62, "WClientDRXLayout", WClientDRXLayoutTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5063, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientDRXLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXLayoutEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5064, 62, "WClientDRXLayout", WClientDRXLayoutTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5064, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientDRXLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientDRXInstantiated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 5065, 63, "WClientDRXInstantiated", WClientDRXInstantiatedTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5065, ProviderGuid);
                source.UnregisterEventTemplate(value, 0, WClientDRXInstantiatedTaskGuid);
            }
        }
        public event Action<TimeTickTraceData> WClientTimeManagerTickBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TimeTickTraceData(value, 6001, 50, "WClientTimeManagerTick", WClientTimeManagerTickTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientTimeManagerTickTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientTimeManagerTickEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 6002, 50, "WClientTimeManagerTick", WClientTimeManagerTickTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientTimeManagerTickTaskGuid);
            }
        }
        public event Action<LayoutSourceTemplateTraceData> WClientLayoutBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LayoutSourceTemplateTraceData(value, 7001, 25, "WClientLayout", WClientLayoutTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7001, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7002, 25, "WClientLayout", WClientLayoutTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7002, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientLayoutTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientMeasureBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 7005, 26, "WClientMeasure", WClientMeasureTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7005, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientMeasureTaskGuid);
            }
        }
        public event Action<LayoutAbortedTraceData> WClientMeasureAbort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LayoutAbortedTraceData(value, 7006, 26, "WClientMeasure", WClientMeasureTaskGuid, 10, "MeasureAbort", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7006, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, WClientMeasureTaskGuid);
            }
        }
        public event Action<CounterTraceData> WClientMeasureEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CounterTraceData(value, 7007, 26, "WClientMeasure", WClientMeasureTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7007, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientMeasureTaskGuid);
            }
        }
        public event Action<MeasureDataTraceData> WClientMeasureElementBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MeasureDataTraceData(value, 7008, 26, "WClientMeasure", WClientMeasureTaskGuid, 11, "MeasureElementBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7008, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, WClientMeasureTaskGuid);
            }
        }
        public event Action<MeasureDataTraceData> WClientMeasureElementEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new MeasureDataTraceData(value, 7009, 26, "WClientMeasure", WClientMeasureTaskGuid, 12, "MeasureElementEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7009, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, WClientMeasureTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientArrangeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 7010, 27, "WClientArrange", WClientArrangeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7010, ProviderGuid);
                source.UnregisterEventTemplate(value, 1, WClientArrangeTaskGuid);
            }
        }
        public event Action<LayoutAbortedTraceData> WClientArrangeAbort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LayoutAbortedTraceData(value, 7011, 27, "WClientArrange", WClientArrangeTaskGuid, 10, "ArrangeAbort", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7011, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, WClientArrangeTaskGuid);
            }
        }
        public event Action<CounterTraceData> WClientArrangeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CounterTraceData(value, 7012, 27, "WClientArrange", WClientArrangeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7012, ProviderGuid);
                source.UnregisterEventTemplate(value, 2, WClientArrangeTaskGuid);
            }
        }
        public event Action<ArrangeDataTraceData> WClientArrangeElementBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ArrangeDataTraceData(value, 7013, 27, "WClientArrange", WClientArrangeTaskGuid, 11, "ArrangeElementBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7013, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, WClientArrangeTaskGuid);
            }
        }
        public event Action<ArrangeDataTraceData> WClientArrangeElementEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ArrangeDataTraceData(value, 7014, 27, "WClientArrange", WClientArrangeTaskGuid, 12, "ArrangeElementEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7014, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, WClientArrangeTaskGuid);
            }
        }
        public event Action<LayoutAbortedTraceData> WClientLayoutAbort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new LayoutAbortedTraceData(value, 7015, 25, "WClientLayout", WClientLayoutTaskGuid, 10, "Abort", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7015, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireSizeChangedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7016, 25, "WClientLayout", WClientLayoutTaskGuid, 11, "FireSizeChangedBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7016, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireSizeChangedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7017, 25, "WClientLayout", WClientLayoutTaskGuid, 12, "FireSizeChangedEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7017, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireLayoutUpdatedBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7018, 25, "WClientLayout", WClientLayoutTaskGuid, 13, "FireLayoutUpdatedBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7018, ProviderGuid);
                source.UnregisterEventTemplate(value, 13, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireLayoutUpdatedEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7019, 25, "WClientLayout", WClientLayoutTaskGuid, 14, "FireLayoutUpdatedEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7019, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireAutomationEventsBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7020, 25, "WClientLayout", WClientLayoutTaskGuid, 15, "FireAutomationEventsBegin", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7020, ProviderGuid);
                source.UnregisterEventTemplate(value, 15, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientLayoutFireAutomationEventsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 7021, 25, "WClientLayout", WClientLayoutTaskGuid, 16, "FireAutomationEventsEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7021, ProviderGuid);
                source.UnregisterEventTemplate(value, 16, WClientLayoutTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientLayoutException
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 7022, 25, "WClientLayout", WClientLayoutTaskGuid, 17, "Exception", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7022, ProviderGuid);
                source.UnregisterEventTemplate(value, 17, WClientLayoutTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientLayoutInvalidated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 7023, 25, "WClientLayout", WClientLayoutTaskGuid, 18, "Invalidated", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7023, ProviderGuid);
                source.UnregisterEventTemplate(value, 18, WClientLayoutTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_WinMainStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9003, 116, "WpfHostUm", WpfHostUmTaskGuid, 30, "WinMainStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9003, ProviderGuid);
                source.UnregisterEventTemplate(value, 30, WpfHostUmTaskGuid);
            }
        }
        public event Action<TemplateHRTraceData> WpfHostUm_WinMainEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TemplateHRTraceData(value, 9004, 116, "WpfHostUm", WpfHostUmTaskGuid, 31, "WinMainEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9004, ProviderGuid);
                source.UnregisterEventTemplate(value, 31, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_InvokingBrowser
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9005, 116, "WpfHostUm", WpfHostUmTaskGuid, 32, "InvokingBrowser", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9005, ProviderGuid);
                source.UnregisterEventTemplate(value, 32, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_LaunchingRestrictedProcess
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9006, 116, "WpfHostUm", WpfHostUmTaskGuid, 33, "LaunchingRestrictedProcess", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9006, ProviderGuid);
                source.UnregisterEventTemplate(value, 33, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_EnteringMessageLoop
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9007, 116, "WpfHostUm", WpfHostUmTaskGuid, 34, "EnteringMessageLoop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9007, ProviderGuid);
                source.UnregisterEventTemplate(value, 34, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_ClassFactoryCreateInstance
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9008, 116, "WpfHostUm", WpfHostUmTaskGuid, 35, "ClassFactoryCreateInstance", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9008, ProviderGuid);
                source.UnregisterEventTemplate(value, 35, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_ReadingDeplManifestStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9009, 116, "WpfHostUm", WpfHostUmTaskGuid, 40, "ReadingDeplManifestStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9009, ProviderGuid);
                source.UnregisterEventTemplate(value, 40, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_ReadingDeplManifestEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9010, 116, "WpfHostUm", WpfHostUmTaskGuid, 41, "ReadingDeplManifestEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9010, ProviderGuid);
                source.UnregisterEventTemplate(value, 41, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_ReadingAppManifestStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9011, 116, "WpfHostUm", WpfHostUmTaskGuid, 42, "ReadingAppManifestStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9011, ProviderGuid);
                source.UnregisterEventTemplate(value, 42, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_ReadingAppManifestEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9012, 116, "WpfHostUm", WpfHostUmTaskGuid, 43, "ReadingAppManifestEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9012, ProviderGuid);
                source.UnregisterEventTemplate(value, 43, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_ParsingMarkupVersionStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9013, 116, "WpfHostUm", WpfHostUmTaskGuid, 44, "ParsingMarkupVersionStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9013, ProviderGuid);
                source.UnregisterEventTemplate(value, 44, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_ParsingMarkupVersionEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9014, 116, "WpfHostUm", WpfHostUmTaskGuid, 45, "ParsingMarkupVersionEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9014, ProviderGuid);
                source.UnregisterEventTemplate(value, 45, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_IPersistFileLoad
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9015, 116, "WpfHostUm", WpfHostUmTaskGuid, 50, "IPersistFileLoad", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9015, ProviderGuid);
                source.UnregisterEventTemplate(value, 50, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_IPersistMonikerLoadStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9016, 116, "WpfHostUm", WpfHostUmTaskGuid, 51, "IPersistMonikerLoadStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9016, ProviderGuid);
                source.UnregisterEventTemplate(value, 51, WpfHostUmTaskGuid);
            }
        }
        public event Action<TemplateHRTraceData> WpfHostUm_IPersistMonikerLoadEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TemplateHRTraceData(value, 9017, 116, "WpfHostUm", WpfHostUmTaskGuid, 52, "IPersistMonikerLoadEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9017, ProviderGuid);
                source.UnregisterEventTemplate(value, 52, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template44TraceData> WpfHostUm_BindProgress
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template44TraceData(value, 9018, 116, "WpfHostUm", WpfHostUmTaskGuid, 53, "BindProgress", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9018, ProviderGuid);
                source.UnregisterEventTemplate(value, 53, WpfHostUmTaskGuid);
            }
        }
        public event Action<TemplateHRTraceData> WpfHostUm_OnStopBinding
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TemplateHRTraceData(value, 9019, 116, "WpfHostUm", WpfHostUmTaskGuid, 54, "OnStopBinding", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9019, ProviderGuid);
                source.UnregisterEventTemplate(value, 54, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_VersionAttach
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9020, 116, "WpfHostUm", WpfHostUmTaskGuid, 60, "VersionAttach", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9020, ProviderGuid);
                source.UnregisterEventTemplate(value, 60, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_VersionActivateStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9021, 116, "WpfHostUm", WpfHostUmTaskGuid, 61, "VersionActivateStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9021, ProviderGuid);
                source.UnregisterEventTemplate(value, 61, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_VersionActivateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9022, 116, "WpfHostUm", WpfHostUmTaskGuid, 62, "VersionActivateEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9022, ProviderGuid);
                source.UnregisterEventTemplate(value, 62, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_StartingCLRStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9023, 116, "WpfHostUm", WpfHostUmTaskGuid, 90, "StartingCLRStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9023, ProviderGuid);
                source.UnregisterEventTemplate(value, 90, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_StartingCLREnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9024, 116, "WpfHostUm", WpfHostUmTaskGuid, 91, "StartingCLREnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9024, ProviderGuid);
                source.UnregisterEventTemplate(value, 91, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template45TraceData> WpfHostUm_IHlinkTargetNavigateStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template45TraceData(value, 9025, 116, "WpfHostUm", WpfHostUmTaskGuid, 95, "IHlinkTargetNavigateStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9025, ProviderGuid);
                source.UnregisterEventTemplate(value, 95, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_IHlinkTargetNavigateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9026, 116, "WpfHostUm", WpfHostUmTaskGuid, 96, "IHlinkTargetNavigateEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9026, ProviderGuid);
                source.UnregisterEventTemplate(value, 96, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template46TraceData> WpfHostUm_ReadyStateChanged
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template46TraceData(value, 9027, 116, "WpfHostUm", WpfHostUmTaskGuid, 97, "ReadyStateChanged", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9027, ProviderGuid);
                source.UnregisterEventTemplate(value, 97, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_InitDocHostStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9028, 116, "WpfHostUm", WpfHostUmTaskGuid, 98, "InitDocHostStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9028, ProviderGuid);
                source.UnregisterEventTemplate(value, 98, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_InitDocHostEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9029, 116, "WpfHostUm", WpfHostUmTaskGuid, 99, "InitDocHostEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9029, ProviderGuid);
                source.UnregisterEventTemplate(value, 99, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_MergingMenusStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9030, 116, "WpfHostUm", WpfHostUmTaskGuid, 100, "MergingMenusStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9030, ProviderGuid);
                source.UnregisterEventTemplate(value, 100, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_MergingMenusEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9031, 116, "WpfHostUm", WpfHostUmTaskGuid, 101, "MergingMenusEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9031, ProviderGuid);
                source.UnregisterEventTemplate(value, 101, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_UIActivationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9032, 116, "WpfHostUm", WpfHostUmTaskGuid, 102, "UIActivationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9032, ProviderGuid);
                source.UnregisterEventTemplate(value, 102, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_UIActivationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9033, 116, "WpfHostUm", WpfHostUmTaskGuid, 103, "UIActivationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9033, ProviderGuid);
                source.UnregisterEventTemplate(value, 103, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_LoadingResourceDLLStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9034, 116, "WpfHostUm", WpfHostUmTaskGuid, 104, "LoadingResourceDLLStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9034, ProviderGuid);
                source.UnregisterEventTemplate(value, 104, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template43TraceData> WpfHostUm_LoadingResourceDLLEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template43TraceData(value, 9035, 116, "WpfHostUm", WpfHostUmTaskGuid, 105, "LoadingResourceDLLEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9035, ProviderGuid);
                source.UnregisterEventTemplate(value, 105, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template47TraceData> WpfHostUm_OleCmdQueryStatusStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template47TraceData(value, 9036, 116, "WpfHostUm", WpfHostUmTaskGuid, 106, "OleCmdQueryStatusStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9036, ProviderGuid);
                source.UnregisterEventTemplate(value, 106, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template48TraceData> WpfHostUm_OleCmdQueryStatusEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template48TraceData(value, 9037, 116, "WpfHostUm", WpfHostUmTaskGuid, 107, "OleCmdQueryStatusEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9037, ProviderGuid);
                source.UnregisterEventTemplate(value, 107, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template47TraceData> WpfHostUm_OleCmdExecStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template47TraceData(value, 9038, 116, "WpfHostUm", WpfHostUmTaskGuid, 108, "OleCmdExecStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9038, ProviderGuid);
                source.UnregisterEventTemplate(value, 108, WpfHostUmTaskGuid);
            }
        }
        public event Action<TemplateHRTraceData> WpfHostUm_OleCmdExecEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new TemplateHRTraceData(value, 9039, 116, "WpfHostUm", WpfHostUmTaskGuid, 109, "OleCmdExecEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9039, ProviderGuid);
                source.UnregisterEventTemplate(value, 109, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_ProgressPageShown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9040, 116, "WpfHostUm", WpfHostUmTaskGuid, 110, "ProgressPageShown", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9040, ProviderGuid);
                source.UnregisterEventTemplate(value, 110, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_AdHocProfile1Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9041, 116, "WpfHostUm", WpfHostUmTaskGuid, 152, "AdHocProfile1Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9041, ProviderGuid);
                source.UnregisterEventTemplate(value, 152, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_AdHocProfile1End
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9042, 116, "WpfHostUm", WpfHostUmTaskGuid, 153, "AdHocProfile1End", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9042, ProviderGuid);
                source.UnregisterEventTemplate(value, 153, WpfHostUmTaskGuid);
            }
        }
        public event Action<Template45TraceData> WpfHostUm_AdHocProfile2Start
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template45TraceData(value, 9043, 116, "WpfHostUm", WpfHostUmTaskGuid, 154, "AdHocProfile2Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9043, ProviderGuid);
                source.UnregisterEventTemplate(value, 154, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHostUm_AdHocProfile2End
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9044, 116, "WpfHostUm", WpfHostUmTaskGuid, 155, "AdHocProfile2End", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9044, ProviderGuid);
                source.UnregisterEventTemplate(value, 155, WpfHostUmTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DocObjHostCreated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9045, 117, "WpfHost", WpfHostTaskGuid, 10, "DocObjHostCreated", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9045, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_XappLauncherAppStartup
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9046, 117, "WpfHost", WpfHostTaskGuid, 13, "XappLauncherAppStartup", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9046, ProviderGuid);
                source.UnregisterEventTemplate(value, 13, WpfHostTaskGuid);
            }
        }
        public event Action<Template53TraceData> WpfHost_XappLauncherAppExit
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template53TraceData(value, 9047, 117, "WpfHost", WpfHostTaskGuid, 14, "XappLauncherAppExit", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9047, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DocObjHostRunApplicationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9048, 117, "WpfHost", WpfHostTaskGuid, 15, "DocObjHostRunApplicationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9048, ProviderGuid);
                source.UnregisterEventTemplate(value, 15, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DocObjHostRunApplicationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9049, 117, "WpfHost", WpfHostTaskGuid, 16, "DocObjHostRunApplicationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9049, ProviderGuid);
                source.UnregisterEventTemplate(value, 16, WpfHostTaskGuid);
            }
        }
        public event Action<Template51TraceData> WpfHost_ClickOnceActivationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template51TraceData(value, 9050, 117, "WpfHost", WpfHostTaskGuid, 17, "ClickOnceActivationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9050, ProviderGuid);
                source.UnregisterEventTemplate(value, 17, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_ClickOnceActivationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9051, 117, "WpfHost", WpfHostTaskGuid, 18, "ClickOnceActivationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9051, ProviderGuid);
                source.UnregisterEventTemplate(value, 18, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_InitAppProxyStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9052, 117, "WpfHost", WpfHostTaskGuid, 19, "InitAppProxyStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9052, ProviderGuid);
                source.UnregisterEventTemplate(value, 19, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_InitAppProxyEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9053, 117, "WpfHost", WpfHostTaskGuid, 20, "InitAppProxyEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9053, ProviderGuid);
                source.UnregisterEventTemplate(value, 20, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AppProxyCtor
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9054, 117, "WpfHost", WpfHostTaskGuid, 30, "AppProxyCtor", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9054, ProviderGuid);
                source.UnregisterEventTemplate(value, 30, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_RootBrowserWindowSetupStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9055, 117, "WpfHost", WpfHostTaskGuid, 31, "RootBrowserWindowSetupStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9055, ProviderGuid);
                source.UnregisterEventTemplate(value, 31, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_RootBrowserWindowSetupEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9056, 117, "WpfHost", WpfHostTaskGuid, 32, "RootBrowserWindowSetupEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9056, ProviderGuid);
                source.UnregisterEventTemplate(value, 32, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AppProxyRunStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9057, 117, "WpfHost", WpfHostTaskGuid, 33, "AppProxyRunStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9057, ProviderGuid);
                source.UnregisterEventTemplate(value, 33, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AppProxyRunEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9058, 117, "WpfHost", WpfHostTaskGuid, 34, "AppProxyRunEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9058, ProviderGuid);
                source.UnregisterEventTemplate(value, 34, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AppDomainManagerCctor
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9059, 117, "WpfHost", WpfHostTaskGuid, 40, "AppDomainManagerCctor", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9059, ProviderGuid);
                source.UnregisterEventTemplate(value, 40, WpfHostTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> WpfHost_ApplicationActivatorCreateInstanceStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 9060, 117, "WpfHost", WpfHostTaskGuid, 41, "ApplicationActivatorCreateInstanceStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9060, ProviderGuid);
                source.UnregisterEventTemplate(value, 41, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_ApplicationActivatorCreateInstanceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9061, 117, "WpfHost", WpfHostTaskGuid, 42, "ApplicationActivatorCreateInstanceEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9061, ProviderGuid);
                source.UnregisterEventTemplate(value, 42, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DetermineApplicationTrustStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9062, 117, "WpfHost", WpfHostTaskGuid, 43, "DetermineApplicationTrustStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9062, ProviderGuid);
                source.UnregisterEventTemplate(value, 43, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DetermineApplicationTrustEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9063, 117, "WpfHost", WpfHostTaskGuid, 44, "DetermineApplicationTrustEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9063, ProviderGuid);
                source.UnregisterEventTemplate(value, 44, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_FirstTimeActivation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9064, 117, "WpfHost", WpfHostTaskGuid, 50, "FirstTimeActivation", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9064, ProviderGuid);
                source.UnregisterEventTemplate(value, 50, WpfHostTaskGuid);
            }
        }
        public event Action<Template54TraceData> WpfHost_GetDownloadPageStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template54TraceData(value, 9065, 117, "WpfHost", WpfHostTaskGuid, 51, "GetDownloadPageStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9065, ProviderGuid);
                source.UnregisterEventTemplate(value, 51, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_GetDownloadPageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9066, 117, "WpfHost", WpfHostTaskGuid, 52, "GetDownloadPageEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9066, ProviderGuid);
                source.UnregisterEventTemplate(value, 52, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DownloadDeplManifestStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9067, 117, "WpfHost", WpfHostTaskGuid, 53, "DownloadDeplManifestStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9067, ProviderGuid);
                source.UnregisterEventTemplate(value, 53, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DownloadDeplManifestEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9068, 117, "WpfHost", WpfHostTaskGuid, 54, "DownloadDeplManifestEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9068, ProviderGuid);
                source.UnregisterEventTemplate(value, 54, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AssertAppRequirementsStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9069, 117, "WpfHost", WpfHostTaskGuid, 55, "AssertAppRequirementsStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9069, ProviderGuid);
                source.UnregisterEventTemplate(value, 55, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AssertAppRequirementsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9070, 117, "WpfHost", WpfHostTaskGuid, 56, "AssertAppRequirementsEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9070, ProviderGuid);
                source.UnregisterEventTemplate(value, 56, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DownloadApplicationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9071, 117, "WpfHost", WpfHostTaskGuid, 57, "DownloadApplicationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9071, ProviderGuid);
                source.UnregisterEventTemplate(value, 57, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_DownloadApplicationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9072, 117, "WpfHost", WpfHostTaskGuid, 58, "DownloadApplicationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9072, ProviderGuid);
                source.UnregisterEventTemplate(value, 58, WpfHostTaskGuid);
            }
        }
        public event Action<Template55TraceData> WpfHost_DownloadProgressUpdate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template55TraceData(value, 9073, 117, "WpfHost", WpfHostTaskGuid, 59, "DownloadProgressUpdate", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9073, ProviderGuid);
                source.UnregisterEventTemplate(value, 59, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_XappLauncherAppNavigated
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9074, 117, "WpfHost", WpfHostTaskGuid, 60, "XappLauncherAppNavigated", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9074, ProviderGuid);
                source.UnregisterEventTemplate(value, 60, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_StartingFontCacheServiceStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9075, 117, "WpfHost", WpfHostTaskGuid, 61, "StartingFontCacheServiceStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9075, ProviderGuid);
                source.UnregisterEventTemplate(value, 61, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_StartingFontCacheServiceEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9076, 117, "WpfHost", WpfHostTaskGuid, 62, "StartingFontCacheServiceEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9076, ProviderGuid);
                source.UnregisterEventTemplate(value, 62, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_UpdateBrowserCommandsStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9077, 117, "WpfHost", WpfHostTaskGuid, 70, "UpdateBrowserCommandsStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9077, ProviderGuid);
                source.UnregisterEventTemplate(value, 70, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_UpdateBrowserCommandsEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9078, 117, "WpfHost", WpfHostTaskGuid, 71, "UpdateBrowserCommandsEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9078, ProviderGuid);
                source.UnregisterEventTemplate(value, 71, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_PostShutdown
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9079, 117, "WpfHost", WpfHostTaskGuid, 80, "PostShutdown", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9079, ProviderGuid);
                source.UnregisterEventTemplate(value, 80, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WpfHost_AbortingActivation
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9080, 117, "WpfHost", WpfHostTaskGuid, 81, "AbortingActivation", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9080, ProviderGuid);
                source.UnregisterEventTemplate(value, 81, WpfHostTaskGuid);
            }
        }
        public event Action<Template49TraceData> WpfHost_IBHSRunStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template49TraceData(value, 9081, 117, "WpfHost", WpfHostTaskGuid, 11, "IBHSRunStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9081, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, WpfHostTaskGuid);
            }
        }
        public event Action<Template50TraceData> WpfHost_IBHSRunEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template50TraceData(value, 9082, 117, "WpfHost", WpfHostTaskGuid, 12, "IBHSRunEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9082, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, WpfHostTaskGuid);
            }
        }
        public event Action<EmptyTraceData> Wpf_NavigationAsyncWorkItem
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9083, 118, "Navigation", NavigationTaskGuid, 11, "NavigationAsyncWorkItem", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9083, ProviderGuid);
                source.UnregisterEventTemplate(value, 11, NavigationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> Wpf_NavigationWebResponseReceived
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9084, 118, "Navigation", NavigationTaskGuid, 12, "NavigationWebResponseReceived", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9084, ProviderGuid);
                source.UnregisterEventTemplate(value, 12, NavigationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> Wpf_NavigationEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9085, 118, "Navigation", NavigationTaskGuid, 14, "NavigationEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9085, ProviderGuid);
                source.UnregisterEventTemplate(value, 14, NavigationTaskGuid);
            }
        }
        public event Action<EmptyTraceData> Wpf_NavigationContentRendered
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 9086, 118, "Navigation", NavigationTaskGuid, 15, "NavigationContentRendered", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9086, ProviderGuid);
                source.UnregisterEventTemplate(value, 15, NavigationTaskGuid);
            }
        }
        public event Action<Template56TraceData> Wpf_NavigationStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template56TraceData(value, 9087, 118, "Navigation", NavigationTaskGuid, 10, "NavigationStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9087, ProviderGuid);
                source.UnregisterEventTemplate(value, 10, NavigationTaskGuid);
            }
        }
        public event Action<URITemplateTraceData> Wpf_NavigationLaunchBrowser
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new URITemplateTraceData(value, 9088, 118, "Navigation", NavigationTaskGuid, 13, "NavigationLaunchBrowser", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9088, ProviderGuid);
                source.UnregisterEventTemplate(value, 13, NavigationTaskGuid);
            }
        }
        public event Action<Template57TraceData> Wpf_NavigationPageFunctionReturn
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template57TraceData(value, 9089, 118, "Navigation", NavigationTaskGuid, 16, "NavigationPageFunctionReturn", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9089, ProviderGuid);
                source.UnregisterEventTemplate(value, 16, NavigationTaskGuid);
            }
        }
        public event Action<Template1TraceData> DrawBitmapInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template1TraceData(value, 0xFFFF, 1, "DrawBitmap", DrawBitmapTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, DrawBitmapTaskGuid);
            }
        }
        public event Action<Template2TraceData> BitmapCopyInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template2TraceData(value, 0xFFFF, 2, "BitmapCopy", BitmapCopyTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, BitmapCopyTaskGuid);
            }
        }
        public event Action<IntBoundsTraceData> SetClipInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new IntBoundsTraceData(value, 0xFFFF, 3, "SetClip", SetClipTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, SetClipTaskGuid);
            }
        }
        public event Action<FloatBoundsTraceData> DWMDraw_ClearStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FloatBoundsTraceData(value, 0xFFFF, 5, "DWMDraw_Clear", DWMDraw_ClearTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, DWMDraw_ClearTaskGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_ClearEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 5, "DWMDraw_Clear", DWMDraw_ClearTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, DWMDraw_ClearTaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_BitmapStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 56, "BitmapStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_BitmapEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 57, "BitmapEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_RectangleStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 58, "RectangleStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_RectangleEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 59, "RectangleEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_GeometryStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 60, "GeometryStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_GeometryEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 61, "GeometryEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_ImageStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 62, "ImageStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_ImageEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 63, "ImageEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_GlyphRunStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 64, "GlyphRunStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_GlyphRunEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 65, "GlyphRunEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, DWMDraw_TaskGuid);
            }
        }
        public event Action<FloatBoundsTraceData> DWMDraw_BeginLayerStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FloatBoundsTraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 68, "BeginLayerStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 68, DWMDraw_TaskGuid);
            }
        }
        public event Action<FloatBoundsTraceData> DWMDraw_BeginLayerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FloatBoundsTraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 69, "BeginLayerEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 69, DWMDraw_TaskGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_EndLayerStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 70, "EndLayerStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, DWMDraw_TaskGuid);
            }
        }
        public event Action<EmptyTraceData> DWMDraw_EndLayerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 71, "EndLayerEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_ClippedBitmapStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 78, "ClippedBitmapStart", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, DWMDraw_TaskGuid);
            }
        }
        public event Action<Template6TraceData> DWMDraw_ClippedBitmapEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template6TraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 79, "ClippedBitmapEnd", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, DWMDraw_TaskGuid);
            }
        }
        public event Action<FloatBoundsTraceData> DWMDraw_Info
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new FloatBoundsTraceData(value, 0xFFFF, 8, "DWMDraw_", DWMDraw_TaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, DWMDraw_TaskGuid);
            }
        }
        public event Action<EmptyTraceData> LayerEventStart
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 9, "LayerEvent", LayerEventTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, LayerEventTaskGuid);
            }
        }
        public event Action<EmptyTraceData> LayerEventEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 9, "LayerEvent", LayerEventTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, LayerEventTaskGuid);
            }
        }
        public event Action<HwndTemplateTraceData> WClientDesktopRTCreateBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HwndTemplateTraceData(value, 0xFFFF, 12, "WClientDesktopRTCreate", WClientDesktopRTCreateTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientDesktopRTCreateTaskGuid);
            }
        }
        public event Action<HwndTemplateTraceData> WClientDesktopRTCreateEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new HwndTemplateTraceData(value, 0xFFFF, 12, "WClientDesktopRTCreate", WClientDesktopRTCreateTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientDesktopRTCreateTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUceProcessQueueBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 13, "WClientUceProcessQueue", WClientUceProcessQueueTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientUceProcessQueueTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUceProcessQueueEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 13, "WClientUceProcessQueue", WClientUceProcessQueueTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientUceProcessQueueTaskGuid);
            }
        }
        public event Action<Template11TraceData> WClientUceProcessQueueInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template11TraceData(value, 0xFFFF, 13, "WClientUceProcessQueue", WClientUceProcessQueueTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUceProcessQueueTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUcePrecomputeBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 14, "WClientUcePrecompute", WClientUcePrecomputeTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientUcePrecomputeTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUcePrecomputeEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 14, "WClientUcePrecompute", WClientUcePrecomputeTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientUcePrecomputeTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUceRenderBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 15, "WClientUceRender", WClientUceRenderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientUceRenderTaskGuid);
            }
        }
        public event Action<Template10TraceData> WClientUceRenderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template10TraceData(value, 0xFFFF, 15, "WClientUceRender", WClientUceRenderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientUceRenderTaskGuid);
            }
        }
        public event Action<Template12TraceData> WClientUcePresentBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template12TraceData(value, 0xFFFF, 16, "WClientUcePresent", WClientUcePresentTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientUcePresentTaskGuid);
            }
        }
        public event Action<Template12TraceData> WClientUcePresentEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template12TraceData(value, 0xFFFF, 16, "WClientUcePresent", WClientUcePresentTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientUcePresentTaskGuid);
            }
        }
        public event Action<Template13TraceData> WClientUceResponse
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template13TraceData(value, 0xFFFF, 17, "WClientUceResponse", WClientUceResponseTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUceResponseTaskGuid);
            }
        }
        public event Action<Template15TraceData> WClientUceCheckDeviceStateInfo
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template15TraceData(value, 0xFFFF, 19, "WClientUceCheckDeviceState", WClientUceCheckDeviceStateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUceCheckDeviceStateTaskGuid);
            }
        }
        public event Action<VisualCacheTemplateTraceData> VisualCacheAlloc
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new VisualCacheTemplateTraceData(value, 0xFFFF, 130, "VisualCacheAlloc", VisualCacheAllocTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, VisualCacheAllocTaskGuid);
            }
        }
        public event Action<VisualCacheTemplateTraceData> VisualCacheUpdate
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new VisualCacheTemplateTraceData(value, 0xFFFF, 131, "VisualCacheUpdate", VisualCacheUpdateTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, VisualCacheUpdateTaskGuid);
            }
        }
        public event Action<CreateChannelTraceData> CreateChannel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateChannelTraceData(value, 0xFFFF, 141, "CreateChannel", CreateChannelTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, CreateChannelTaskGuid);
            }
        }
        public event Action<CreateOrAddOnChnlTraceData> CreateOrAddResourceOnChannel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateOrAddOnChnlTraceData(value, 0xFFFF, 139, "CreateOrAddOnChnl", CreateOrAddOnChnlTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, CreateOrAddOnChnlTaskGuid);
            }
        }
        public event Action<CreateWpfGfxResourceTraceData> CreateWpfGfxResource
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateWpfGfxResourceTraceData(value, 0xFFFF, 140, "CreateWpfGfxResource", CreateWpfGfxResourceTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, CreateWpfGfxResourceTaskGuid);
            }
        }
        public event Action<ReleaseOnChannelTraceData> ReleaseOnChannel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ReleaseOnChannelTraceData(value, 0xFFFF, 142, "ReleaseOnChannel", ReleaseOnChannelTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ReleaseOnChannelTaskGuid);
            }
        }
        public event Action<GfxSoftwareFallbackTraceData> UnexpectedSoftwareFallback
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new GfxSoftwareFallbackTraceData(value, 0xFFFF, 128, "UnexpectedSoftwareFallback", UnexpectedSoftwareFallbackTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, UnexpectedSoftwareFallbackTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientInterlockedRenderBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 138, "WClientInterlockedRender", WClientInterlockedRenderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientInterlockedRenderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientInterlockedRenderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 138, "WClientInterlockedRender", WClientInterlockedRenderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientInterlockedRenderTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientRenderHandlerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 30, "WClientRenderHandler", WClientRenderHandlerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientRenderHandlerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientRenderHandlerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 30, "WClientRenderHandler", WClientRenderHandlerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientRenderHandlerTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientAnimRenderHandlerBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 31, "WClientAnimRenderHandler", WClientAnimRenderHandlerTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientAnimRenderHandlerTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientAnimRenderHandlerEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 31, "WClientAnimRenderHandler", WClientAnimRenderHandlerTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientAnimRenderHandlerTaskGuid);
            }
        }
        public event Action<Template20TraceData> WClientMediaRenderBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template20TraceData(value, 0xFFFF, 32, "WClientMediaRender", WClientMediaRenderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientMediaRenderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientMediaRenderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 32, "WClientMediaRender", WClientMediaRenderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientMediaRenderTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientPostRender
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 33, "WClientPostRender", WClientPostRenderTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientPostRenderTaskGuid);
            }
        }
        public event Action<Template21TraceData> WClientQPCFrequency
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template21TraceData(value, 0xFFFF, 34, "WClientQPCFrequency", WClientQPCFrequencyTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientQPCFrequencyTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientPrecomputeSceneBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 35, "WClientPrecomputeScene", WClientPrecomputeSceneTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientPrecomputeSceneTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientPrecomputeSceneEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 35, "WClientPrecomputeScene", WClientPrecomputeSceneTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientPrecomputeSceneTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientCompileSceneBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 36, "WClientCompileScene", WClientCompileSceneTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientCompileSceneTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientCompileSceneEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 36, "WClientCompileScene", WClientCompileSceneTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientCompileSceneTaskGuid);
            }
        }
        public event Action<Template22TraceData> WClientUIResponse
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template22TraceData(value, 0xFFFF, 37, "WClientUIResponse", WClientUIResponseTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUIResponseTaskGuid);
            }
        }
        public event Action<ID32TemplateTraceData> WClientUICommitChannel
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new ID32TemplateTraceData(value, 0xFFFF, 38, "WClientUICommitChannel", WClientUICommitChannelTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUICommitChannelTaskGuid);
            }
        }
        public event Action<Template23TraceData> WClientUceNotifyPresent
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template23TraceData(value, 0xFFFF, 39, "WClientUceNotifyPresent", WClientUceNotifyPresentTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUceNotifyPresentTaskGuid);
            }
        }
        public event Action<Template24TraceData> WClientScheduleRender
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new Template24TraceData(value, 0xFFFF, 40, "WClientScheduleRender", WClientScheduleRenderTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientScheduleRenderTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientOnRenderBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 120, "WClientOnRender", WClientOnRenderTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientOnRenderTaskGuid);
            }
        }
        public event Action<PerfElementIDTraceData> WClientOnRenderEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PerfElementIDTraceData(value, 0xFFFF, 120, "WClientOnRender", WClientOnRenderTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientOnRenderTaskGuid);
            }
        }
        public event Action<CreateIRTTraceData> WClientCreateIRT
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new CreateIRTTraceData(value, 0xFFFF, 145, "WClientCreateIRT", WClientCreateIRTTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientCreateIRTTaskGuid);
            }
        }
        public event Action<PtrTemplateTraceData> WClientPotentialIRTResource
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new PtrTemplateTraceData(value, 0xFFFF, 146, "WClientPotentialIRTResource", WClientPotentialIRTResourceTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientPotentialIRTResourceTaskGuid);
            }
        }
        public event Action<DispatcherMessageTraceData> WClientUIContextDispatchBegin
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DispatcherMessageTraceData(value, 0xFFFF, 20, "WClientUIContextDispatch", WClientUIContextDispatchTaskGuid, 1, "Start", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, WClientUIContextDispatchTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientUIContextDispatchEnd
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 20, "WClientUIContextDispatch", WClientUIContextDispatchTaskGuid, 2, "Stop", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, WClientUIContextDispatchTaskGuid);
            }
        }
        public event Action<DispatcherMessageTraceData> WClientUIContextPost
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DispatcherMessageTraceData(value, 0xFFFF, 21, "WClientUIContextPost", WClientUIContextPostTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUIContextPostTaskGuid);
            }
        }
        public event Action<DispatcherMessageTraceData> WClientUIContextAbort
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DispatcherMessageTraceData(value, 0xFFFF, 22, "WClientUIContextAbort", WClientUIContextAbortTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUIContextAbortTaskGuid);
            }
        }
        public event Action<DispatcherMessageTraceData> WClientUIContextPromote
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new DispatcherMessageTraceData(value, 0xFFFF, 23, "WClientUIContextPromote", WClientUIContextPromoteTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUIContextPromoteTaskGuid);
            }
        }
        public event Action<EmptyTraceData> WClientUIContextIdle
        {
            add
            {
                // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
                source.RegisterEventTemplate(new EmptyTraceData(value, 0xFFFF, 24, "WClientUIContextIdle", WClientUIContextIdleTaskGuid, 0, "Info", ProviderGuid, ProviderName));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, WClientUIContextIdleTaskGuid);
            }
        }

       #region Event ID Definitions
        public const TraceEventID WClientCreateVisualEventID = (TraceEventID) 1;
        public const TraceEventID WClientAppCtorEventID = (TraceEventID) 2;
        public const TraceEventID WClientAppRunEventID = (TraceEventID) 3;
        public const TraceEventID WClientStringEventID = (TraceEventID) 4;
        public const TraceEventID WClientStringBeginEventID = (TraceEventID) 5;
        public const TraceEventID WClientStringEndEventID = (TraceEventID) 6;
        public const TraceEventID WClientPropParentCheckEventID = (TraceEventID) 7;
        public const TraceEventID UpdateVisualStateStartEventID = (TraceEventID) 8;
        public const TraceEventID UpdateVisualStateEndEventID = (TraceEventID) 9;
        public const TraceEventID PerfElementIDNameEventID = (TraceEventID) 10;
        public const TraceEventID PerfElementIDAssignmentEventID = (TraceEventID) 11;
        public const TraceEventID WClientFontCacheEventID = (TraceEventID) 1001;
        public const TraceEventID WClientInputMessageEventID = (TraceEventID) 2001;
        public const TraceEventID StylusEventQueuedEventID = (TraceEventID) 2002;
        public const TraceEventID TouchDownReportedEventID = (TraceEventID) 2003;
        public const TraceEventID TouchMoveReportedEventID = (TraceEventID) 2004;
        public const TraceEventID TouchUpReportedEventID = (TraceEventID) 2005;
        public const TraceEventID ManipulationReportFrameEventID = (TraceEventID) 2006;
        public const TraceEventID ManipulationEventRaisedEventID = (TraceEventID) 2007;
        public const TraceEventID CreateStickyNoteBeginEventID = (TraceEventID) 3001;
        public const TraceEventID CreateStickyNoteEndEventID = (TraceEventID) 3002;
        public const TraceEventID DeleteTextNoteBeginEventID = (TraceEventID) 3003;
        public const TraceEventID DeleteTextNoteEndEventID = (TraceEventID) 3004;
        public const TraceEventID DeleteInkNoteBeginEventID = (TraceEventID) 3005;
        public const TraceEventID DeleteInkNoteEndEventID = (TraceEventID) 3006;
        public const TraceEventID CreateHighlightBeginEventID = (TraceEventID) 3007;
        public const TraceEventID CreateHighlightEndEventID = (TraceEventID) 3008;
        public const TraceEventID ClearHighlightBeginEventID = (TraceEventID) 3009;
        public const TraceEventID ClearHighlightEndEventID = (TraceEventID) 3010;
        public const TraceEventID LoadAnnotationsBeginEventID = (TraceEventID) 3011;
        public const TraceEventID LoadAnnotationsEndEventID = (TraceEventID) 3012;
        public const TraceEventID AddAnnotationBeginEventID = (TraceEventID) 3013;
        public const TraceEventID AddAnnotationEndEventID = (TraceEventID) 3014;
        public const TraceEventID DeleteAnnotationBeginEventID = (TraceEventID) 3015;
        public const TraceEventID DeleteAnnotationEndEventID = (TraceEventID) 3016;
        public const TraceEventID GetAnnotationByIdBeginEventID = (TraceEventID) 3017;
        public const TraceEventID GetAnnotationByIdEndEventID = (TraceEventID) 3018;
        public const TraceEventID GetAnnotationByLocBeginEventID = (TraceEventID) 3019;
        public const TraceEventID GetAnnotationByLocEndEventID = (TraceEventID) 3020;
        public const TraceEventID GetAnnotationsBeginEventID = (TraceEventID) 3021;
        public const TraceEventID GetAnnotationsEndEventID = (TraceEventID) 3022;
        public const TraceEventID SerializeAnnotationBeginEventID = (TraceEventID) 3023;
        public const TraceEventID SerializeAnnotationEndEventID = (TraceEventID) 3024;
        public const TraceEventID DeserializeAnnotationBeginEventID = (TraceEventID) 3025;
        public const TraceEventID DeserializeAnnotationEndEventID = (TraceEventID) 3026;
        public const TraceEventID UpdateAnnotationWithSNCBeginEventID = (TraceEventID) 3027;
        public const TraceEventID UpdateAnnotationWithSNCEndEventID = (TraceEventID) 3028;
        public const TraceEventID UpdateSNCWithAnnotationBeginEventID = (TraceEventID) 3029;
        public const TraceEventID UpdateSNCWithAnnotationEndEventID = (TraceEventID) 3030;
        public const TraceEventID AnnotationTextChangedBeginEventID = (TraceEventID) 3031;
        public const TraceEventID AnnotationTextChangedEndEventID = (TraceEventID) 3032;
        public const TraceEventID AnnotationInkChangedBeginEventID = (TraceEventID) 3033;
        public const TraceEventID AnnotationInkChangedEndEventID = (TraceEventID) 3034;
        public const TraceEventID AddAttachedSNBeginEventID = (TraceEventID) 3035;
        public const TraceEventID AddAttachedSNEndEventID = (TraceEventID) 3036;
        public const TraceEventID RemoveAttachedSNBeginEventID = (TraceEventID) 3037;
        public const TraceEventID RemoveAttachedSNEndEventID = (TraceEventID) 3038;
        public const TraceEventID AddAttachedHighlightBeginEventID = (TraceEventID) 3039;
        public const TraceEventID AddAttachedHighlightEndEventID = (TraceEventID) 3040;
        public const TraceEventID RemoveAttachedHighlightBeginEventID = (TraceEventID) 3041;
        public const TraceEventID RemoveAttachedHighlightEndEventID = (TraceEventID) 3042;
        public const TraceEventID AddAttachedMHBeginEventID = (TraceEventID) 3043;
        public const TraceEventID AddAttachedMHEndEventID = (TraceEventID) 3044;
        public const TraceEventID RemoveAttachedMHBeginEventID = (TraceEventID) 3045;
        public const TraceEventID RemoveAttachedMHEndEventID = (TraceEventID) 3046;
        public const TraceEventID WClientParseBamlBeginEventID = (TraceEventID) 4001;
        public const TraceEventID WClientParseBamlEndEventID = (TraceEventID) 4002;
        public const TraceEventID WClientParseXmlBeginEventID = (TraceEventID) 4003;
        public const TraceEventID WClientParseXmlEndEventID = (TraceEventID) 4004;
        public const TraceEventID WClientParseFefCrInstBeginEventID = (TraceEventID) 4005;
        public const TraceEventID WClientParseFefCrInstEndEventID = (TraceEventID) 4006;
        public const TraceEventID WClientParseInstVisTreeBeginEventID = (TraceEventID) 4007;
        public const TraceEventID WClientParseInstVisTreeEndEventID = (TraceEventID) 4008;
        public const TraceEventID WClientParseRdrCrInstBeginEventID = (TraceEventID) 4009;
        public const TraceEventID WClientParseRdrCrInstEndEventID = (TraceEventID) 4010;
        public const TraceEventID WClientParseRdrCrInFTypBeginEventID = (TraceEventID) 4011;
        public const TraceEventID WClientParseRdrCrInFTypEndEventID = (TraceEventID) 4012;
        public const TraceEventID WClientResourceFindBeginEventID = (TraceEventID) 4013;
        public const TraceEventID WClientResourceFindEndEventID = (TraceEventID) 4014;
        public const TraceEventID WClientResourceCacheValueEventID = (TraceEventID) 4015;
        public const TraceEventID WClientResourceCacheNullEventID = (TraceEventID) 4016;
        public const TraceEventID WClientResourceCacheMissEventID = (TraceEventID) 4017;
        public const TraceEventID WClientResourceStockEventID = (TraceEventID) 4018;
        public const TraceEventID WClientResourceBamlAssemblyEventID = (TraceEventID) 4019;
        public const TraceEventID WClientParseXamlBeginEventID = (TraceEventID) 4020;
        public const TraceEventID WClientParseXamlBamlInfoEventID = (TraceEventID) 4021;
        public const TraceEventID WClientParseXamlEndEventID = (TraceEventID) 4022;
        public const TraceEventID WClientDRXFlushPageStartEventID = (TraceEventID) 5001;
        public const TraceEventID WClientDRXFlushPageStopEventID = (TraceEventID) 5002;
        public const TraceEventID WClientDRXSerializeTreeStartEventID = (TraceEventID) 5003;
        public const TraceEventID WClientDRXSerializeTreeEndEventID = (TraceEventID) 5004;
        public const TraceEventID WClientDRXGetVisualStartEventID = (TraceEventID) 5005;
        public const TraceEventID WClientDRXGetVisualEndEventID = (TraceEventID) 5006;
        public const TraceEventID WClientDRXReleaseWriterStartEventID = (TraceEventID) 5007;
        public const TraceEventID WClientDRXReleaseWriterEndEventID = (TraceEventID) 5008;
        public const TraceEventID WClientDRXGetPrintCapStartEventID = (TraceEventID) 5009;
        public const TraceEventID WClientDRXGetPrintCapEndEventID = (TraceEventID) 5010;
        public const TraceEventID WClientDRXPTProviderStartEventID = (TraceEventID) 5011;
        public const TraceEventID WClientDRXPTProviderEndEventID = (TraceEventID) 5012;
        public const TraceEventID WClientDRXRasterStartEventID = (TraceEventID) 5013;
        public const TraceEventID WClientDRXRasterEndEventID = (TraceEventID) 5014;
        public const TraceEventID WClientDRXOpenPackageBeginEventID = (TraceEventID) 5015;
        public const TraceEventID WClientDRXOpenPackageEndEventID = (TraceEventID) 5016;
        public const TraceEventID WClientDRXGetStreamBeginEventID = (TraceEventID) 5017;
        public const TraceEventID WClientDRXGetStreamEndEventID = (TraceEventID) 5018;
        public const TraceEventID WClientDRXPageVisibleEventID = (TraceEventID) 5019;
        public const TraceEventID WClientDRXPageLoadedEventID = (TraceEventID) 5020;
        public const TraceEventID WClientDRXInvalidateViewEventID = (TraceEventID) 5021;
        public const TraceEventID WClientDRXStyleCreatedEventID = (TraceEventID) 5022;
        public const TraceEventID WClientDRXFindBeginEventID = (TraceEventID) 5023;
        public const TraceEventID WClientDRXFindEndEventID = (TraceEventID) 5024;
        public const TraceEventID WClientDRXZoomEventID = (TraceEventID) 5025;
        public const TraceEventID WClientDRXEnsureOMBeginEventID = (TraceEventID) 5026;
        public const TraceEventID WClientDRXEnsureOMEndEventID = (TraceEventID) 5027;
        public const TraceEventID WClientDRXTreeFlattenBeginEventID = (TraceEventID) 5028;
        public const TraceEventID WClientDRXTreeFlattenEndEventID = (TraceEventID) 5029;
        public const TraceEventID WClientDRXAlphaFlattenBeginEventID = (TraceEventID) 5030;
        public const TraceEventID WClientDRXAlphaFlattenEndEventID = (TraceEventID) 5031;
        public const TraceEventID WClientDRXGetDevModeBeginEventID = (TraceEventID) 5032;
        public const TraceEventID WClientDRXGetDevModeEndEventID = (TraceEventID) 5033;
        public const TraceEventID WClientDRXStartDocBeginEventID = (TraceEventID) 5034;
        public const TraceEventID WClientDRXStartDocEndEventID = (TraceEventID) 5035;
        public const TraceEventID WClientDRXEndDocBeginEventID = (TraceEventID) 5036;
        public const TraceEventID WClientDRXEndDocEndEventID = (TraceEventID) 5037;
        public const TraceEventID WClientDRXStartPageBeginEventID = (TraceEventID) 5038;
        public const TraceEventID WClientDRXStartPageEndEventID = (TraceEventID) 5039;
        public const TraceEventID WClientDRXEndPageBeginEventID = (TraceEventID) 5040;
        public const TraceEventID WClientDRXEndPageEndEventID = (TraceEventID) 5041;
        public const TraceEventID WClientDRXCommitPageBeginEventID = (TraceEventID) 5042;
        public const TraceEventID WClientDRXCommitPageEndEventID = (TraceEventID) 5043;
        public const TraceEventID WClientDRXConvertFontBeginEventID = (TraceEventID) 5044;
        public const TraceEventID WClientDRXConvertFontEndEventID = (TraceEventID) 5045;
        public const TraceEventID WClientDRXConvertImageBeginEventID = (TraceEventID) 5046;
        public const TraceEventID WClientDRXConvertImageEndEventID = (TraceEventID) 5047;
        public const TraceEventID WClientDRXSaveXpsBeginEventID = (TraceEventID) 5048;
        public const TraceEventID WClientDRXSaveXpsEndEventID = (TraceEventID) 5049;
        public const TraceEventID WClientDRXLoadPrimitiveBeginEventID = (TraceEventID) 5050;
        public const TraceEventID WClientDRXLoadPrimitiveEndEventID = (TraceEventID) 5051;
        public const TraceEventID WClientDRXSavePageBeginEventID = (TraceEventID) 5052;
        public const TraceEventID WClientDRXSavePageEndEventID = (TraceEventID) 5053;
        public const TraceEventID WClientDRXSerializationBeginEventID = (TraceEventID) 5054;
        public const TraceEventID WClientDRXSerializationEndEventID = (TraceEventID) 5055;
        public const TraceEventID WClientDRXReadStreamBeginEventID = (TraceEventID) 5056;
        public const TraceEventID WClientDRXReadStreamEndEventID = (TraceEventID) 5057;
        public const TraceEventID WClientDRXGetPageBeginEventID = (TraceEventID) 5058;
        public const TraceEventID WClientDRXGetPageEndEventID = (TraceEventID) 5059;
        public const TraceEventID WClientDRXLineDownEventID = (TraceEventID) 5060;
        public const TraceEventID WClientDRXPageDownEventID = (TraceEventID) 5061;
        public const TraceEventID WClientDRXPageJumpEventID = (TraceEventID) 5062;
        public const TraceEventID WClientDRXLayoutBeginEventID = (TraceEventID) 5063;
        public const TraceEventID WClientDRXLayoutEndEventID = (TraceEventID) 5064;
        public const TraceEventID WClientDRXInstantiatedEventID = (TraceEventID) 5065;
        public const TraceEventID WClientTimeManagerTickBeginEventID = (TraceEventID) 6001;
        public const TraceEventID WClientTimeManagerTickEndEventID = (TraceEventID) 6002;
        public const TraceEventID WClientLayoutBeginEventID = (TraceEventID) 7001;
        public const TraceEventID WClientLayoutEndEventID = (TraceEventID) 7002;
        public const TraceEventID WClientMeasureBeginEventID = (TraceEventID) 7005;
        public const TraceEventID WClientMeasureAbortEventID = (TraceEventID) 7006;
        public const TraceEventID WClientMeasureEndEventID = (TraceEventID) 7007;
        public const TraceEventID WClientMeasureElementBeginEventID = (TraceEventID) 7008;
        public const TraceEventID WClientMeasureElementEndEventID = (TraceEventID) 7009;
        public const TraceEventID WClientArrangeBeginEventID = (TraceEventID) 7010;
        public const TraceEventID WClientArrangeAbortEventID = (TraceEventID) 7011;
        public const TraceEventID WClientArrangeEndEventID = (TraceEventID) 7012;
        public const TraceEventID WClientArrangeElementBeginEventID = (TraceEventID) 7013;
        public const TraceEventID WClientArrangeElementEndEventID = (TraceEventID) 7014;
        public const TraceEventID WClientLayoutAbortEventID = (TraceEventID) 7015;
        public const TraceEventID WClientLayoutFireSizeChangedBeginEventID = (TraceEventID) 7016;
        public const TraceEventID WClientLayoutFireSizeChangedEndEventID = (TraceEventID) 7017;
        public const TraceEventID WClientLayoutFireLayoutUpdatedBeginEventID = (TraceEventID) 7018;
        public const TraceEventID WClientLayoutFireLayoutUpdatedEndEventID = (TraceEventID) 7019;
        public const TraceEventID WClientLayoutFireAutomationEventsBeginEventID = (TraceEventID) 7020;
        public const TraceEventID WClientLayoutFireAutomationEventsEndEventID = (TraceEventID) 7021;
        public const TraceEventID WClientLayoutExceptionEventID = (TraceEventID) 7022;
        public const TraceEventID WClientLayoutInvalidatedEventID = (TraceEventID) 7023;
        public const TraceEventID WpfHostUm_WinMainStartEventID = (TraceEventID) 9003;
        public const TraceEventID WpfHostUm_WinMainEndEventID = (TraceEventID) 9004;
        public const TraceEventID WpfHostUm_InvokingBrowserEventID = (TraceEventID) 9005;
        public const TraceEventID WpfHostUm_LaunchingRestrictedProcessEventID = (TraceEventID) 9006;
        public const TraceEventID WpfHostUm_EnteringMessageLoopEventID = (TraceEventID) 9007;
        public const TraceEventID WpfHostUm_ClassFactoryCreateInstanceEventID = (TraceEventID) 9008;
        public const TraceEventID WpfHostUm_ReadingDeplManifestStartEventID = (TraceEventID) 9009;
        public const TraceEventID WpfHostUm_ReadingDeplManifestEndEventID = (TraceEventID) 9010;
        public const TraceEventID WpfHostUm_ReadingAppManifestStartEventID = (TraceEventID) 9011;
        public const TraceEventID WpfHostUm_ReadingAppManifestEndEventID = (TraceEventID) 9012;
        public const TraceEventID WpfHostUm_ParsingMarkupVersionStartEventID = (TraceEventID) 9013;
        public const TraceEventID WpfHostUm_ParsingMarkupVersionEndEventID = (TraceEventID) 9014;
        public const TraceEventID WpfHostUm_IPersistFileLoadEventID = (TraceEventID) 9015;
        public const TraceEventID WpfHostUm_IPersistMonikerLoadStartEventID = (TraceEventID) 9016;
        public const TraceEventID WpfHostUm_IPersistMonikerLoadEndEventID = (TraceEventID) 9017;
        public const TraceEventID WpfHostUm_BindProgressEventID = (TraceEventID) 9018;
        public const TraceEventID WpfHostUm_OnStopBindingEventID = (TraceEventID) 9019;
        public const TraceEventID WpfHostUm_VersionAttachEventID = (TraceEventID) 9020;
        public const TraceEventID WpfHostUm_VersionActivateStartEventID = (TraceEventID) 9021;
        public const TraceEventID WpfHostUm_VersionActivateEndEventID = (TraceEventID) 9022;
        public const TraceEventID WpfHostUm_StartingCLRStartEventID = (TraceEventID) 9023;
        public const TraceEventID WpfHostUm_StartingCLREndEventID = (TraceEventID) 9024;
        public const TraceEventID WpfHostUm_IHlinkTargetNavigateStartEventID = (TraceEventID) 9025;
        public const TraceEventID WpfHostUm_IHlinkTargetNavigateEndEventID = (TraceEventID) 9026;
        public const TraceEventID WpfHostUm_ReadyStateChangedEventID = (TraceEventID) 9027;
        public const TraceEventID WpfHostUm_InitDocHostStartEventID = (TraceEventID) 9028;
        public const TraceEventID WpfHostUm_InitDocHostEndEventID = (TraceEventID) 9029;
        public const TraceEventID WpfHostUm_MergingMenusStartEventID = (TraceEventID) 9030;
        public const TraceEventID WpfHostUm_MergingMenusEndEventID = (TraceEventID) 9031;
        public const TraceEventID WpfHostUm_UIActivationStartEventID = (TraceEventID) 9032;
        public const TraceEventID WpfHostUm_UIActivationEndEventID = (TraceEventID) 9033;
        public const TraceEventID WpfHostUm_LoadingResourceDLLStartEventID = (TraceEventID) 9034;
        public const TraceEventID WpfHostUm_LoadingResourceDLLEndEventID = (TraceEventID) 9035;
        public const TraceEventID WpfHostUm_OleCmdQueryStatusStartEventID = (TraceEventID) 9036;
        public const TraceEventID WpfHostUm_OleCmdQueryStatusEndEventID = (TraceEventID) 9037;
        public const TraceEventID WpfHostUm_OleCmdExecStartEventID = (TraceEventID) 9038;
        public const TraceEventID WpfHostUm_OleCmdExecEndEventID = (TraceEventID) 9039;
        public const TraceEventID WpfHostUm_ProgressPageShownEventID = (TraceEventID) 9040;
        public const TraceEventID WpfHostUm_AdHocProfile1StartEventID = (TraceEventID) 9041;
        public const TraceEventID WpfHostUm_AdHocProfile1EndEventID = (TraceEventID) 9042;
        public const TraceEventID WpfHostUm_AdHocProfile2StartEventID = (TraceEventID) 9043;
        public const TraceEventID WpfHostUm_AdHocProfile2EndEventID = (TraceEventID) 9044;
        public const TraceEventID WpfHost_DocObjHostCreatedEventID = (TraceEventID) 9045;
        public const TraceEventID WpfHost_XappLauncherAppStartupEventID = (TraceEventID) 9046;
        public const TraceEventID WpfHost_XappLauncherAppExitEventID = (TraceEventID) 9047;
        public const TraceEventID WpfHost_DocObjHostRunApplicationStartEventID = (TraceEventID) 9048;
        public const TraceEventID WpfHost_DocObjHostRunApplicationEndEventID = (TraceEventID) 9049;
        public const TraceEventID WpfHost_ClickOnceActivationStartEventID = (TraceEventID) 9050;
        public const TraceEventID WpfHost_ClickOnceActivationEndEventID = (TraceEventID) 9051;
        public const TraceEventID WpfHost_InitAppProxyStartEventID = (TraceEventID) 9052;
        public const TraceEventID WpfHost_InitAppProxyEndEventID = (TraceEventID) 9053;
        public const TraceEventID WpfHost_AppProxyCtorEventID = (TraceEventID) 9054;
        public const TraceEventID WpfHost_RootBrowserWindowSetupStartEventID = (TraceEventID) 9055;
        public const TraceEventID WpfHost_RootBrowserWindowSetupEndEventID = (TraceEventID) 9056;
        public const TraceEventID WpfHost_AppProxyRunStartEventID = (TraceEventID) 9057;
        public const TraceEventID WpfHost_AppProxyRunEndEventID = (TraceEventID) 9058;
        public const TraceEventID WpfHost_AppDomainManagerCctorEventID = (TraceEventID) 9059;
        public const TraceEventID WpfHost_ApplicationActivatorCreateInstanceStartEventID = (TraceEventID) 9060;
        public const TraceEventID WpfHost_ApplicationActivatorCreateInstanceEndEventID = (TraceEventID) 9061;
        public const TraceEventID WpfHost_DetermineApplicationTrustStartEventID = (TraceEventID) 9062;
        public const TraceEventID WpfHost_DetermineApplicationTrustEndEventID = (TraceEventID) 9063;
        public const TraceEventID WpfHost_FirstTimeActivationEventID = (TraceEventID) 9064;
        public const TraceEventID WpfHost_GetDownloadPageStartEventID = (TraceEventID) 9065;
        public const TraceEventID WpfHost_GetDownloadPageEndEventID = (TraceEventID) 9066;
        public const TraceEventID WpfHost_DownloadDeplManifestStartEventID = (TraceEventID) 9067;
        public const TraceEventID WpfHost_DownloadDeplManifestEndEventID = (TraceEventID) 9068;
        public const TraceEventID WpfHost_AssertAppRequirementsStartEventID = (TraceEventID) 9069;
        public const TraceEventID WpfHost_AssertAppRequirementsEndEventID = (TraceEventID) 9070;
        public const TraceEventID WpfHost_DownloadApplicationStartEventID = (TraceEventID) 9071;
        public const TraceEventID WpfHost_DownloadApplicationEndEventID = (TraceEventID) 9072;
        public const TraceEventID WpfHost_DownloadProgressUpdateEventID = (TraceEventID) 9073;
        public const TraceEventID WpfHost_XappLauncherAppNavigatedEventID = (TraceEventID) 9074;
        public const TraceEventID WpfHost_StartingFontCacheServiceStartEventID = (TraceEventID) 9075;
        public const TraceEventID WpfHost_StartingFontCacheServiceEndEventID = (TraceEventID) 9076;
        public const TraceEventID WpfHost_UpdateBrowserCommandsStartEventID = (TraceEventID) 9077;
        public const TraceEventID WpfHost_UpdateBrowserCommandsEndEventID = (TraceEventID) 9078;
        public const TraceEventID WpfHost_PostShutdownEventID = (TraceEventID) 9079;
        public const TraceEventID WpfHost_AbortingActivationEventID = (TraceEventID) 9080;
        public const TraceEventID WpfHost_IBHSRunStartEventID = (TraceEventID) 9081;
        public const TraceEventID WpfHost_IBHSRunEndEventID = (TraceEventID) 9082;
        public const TraceEventID Wpf_NavigationAsyncWorkItemEventID = (TraceEventID) 9083;
        public const TraceEventID Wpf_NavigationWebResponseReceivedEventID = (TraceEventID) 9084;
        public const TraceEventID Wpf_NavigationEndEventID = (TraceEventID) 9085;
        public const TraceEventID Wpf_NavigationContentRenderedEventID = (TraceEventID) 9086;
        public const TraceEventID Wpf_NavigationStartEventID = (TraceEventID) 9087;
        public const TraceEventID Wpf_NavigationLaunchBrowserEventID = (TraceEventID) 9088;
        public const TraceEventID Wpf_NavigationPageFunctionReturnEventID = (TraceEventID) 9089;
        public const TraceEventID DrawBitmapInfoEventID = (TraceEventID) 11001;
        public const TraceEventID BitmapCopyInfoEventID = (TraceEventID) 11002;
        public const TraceEventID SetClipInfoEventID = (TraceEventID) 11003;
        public const TraceEventID DWMDraw_ClearStartEventID = (TraceEventID) 11004;
        public const TraceEventID DWMDraw_ClearEndEventID = (TraceEventID) 11005;
        public const TraceEventID DWMDraw_BitmapStartEventID = (TraceEventID) 11006;
        public const TraceEventID DWMDraw_BitmapEndEventID = (TraceEventID) 11007;
        public const TraceEventID DWMDraw_RectangleStartEventID = (TraceEventID) 11008;
        public const TraceEventID DWMDraw_RectangleEndEventID = (TraceEventID) 11009;
        public const TraceEventID DWMDraw_GeometryStartEventID = (TraceEventID) 11010;
        public const TraceEventID DWMDraw_GeometryEndEventID = (TraceEventID) 11011;
        public const TraceEventID DWMDraw_ImageStartEventID = (TraceEventID) 11012;
        public const TraceEventID DWMDraw_ImageEndEventID = (TraceEventID) 11013;
        public const TraceEventID DWMDraw_GlyphRunStartEventID = (TraceEventID) 11014;
        public const TraceEventID DWMDraw_GlyphRunEndEventID = (TraceEventID) 11015;
        public const TraceEventID DWMDraw_BeginLayerStartEventID = (TraceEventID) 11016;
        public const TraceEventID DWMDraw_BeginLayerEndEventID = (TraceEventID) 11017;
        public const TraceEventID DWMDraw_EndLayerStartEventID = (TraceEventID) 11018;
        public const TraceEventID DWMDraw_EndLayerEndEventID = (TraceEventID) 11019;
        public const TraceEventID DWMDraw_ClippedBitmapStartEventID = (TraceEventID) 11020;
        public const TraceEventID DWMDraw_ClippedBitmapEndEventID = (TraceEventID) 11021;
        public const TraceEventID DWMDraw_InfoEventID = (TraceEventID) 11022;
        public const TraceEventID LayerEventStartEventID = (TraceEventID) 11023;
        public const TraceEventID LayerEventEndEventID = (TraceEventID) 11024;
        public const TraceEventID WClientDesktopRTCreateBeginEventID = (TraceEventID) 11025;
        public const TraceEventID WClientDesktopRTCreateEndEventID = (TraceEventID) 11026;
        public const TraceEventID WClientUceProcessQueueBeginEventID = (TraceEventID) 11027;
        public const TraceEventID WClientUceProcessQueueEndEventID = (TraceEventID) 11028;
        public const TraceEventID WClientUceProcessQueueInfoEventID = (TraceEventID) 11029;
        public const TraceEventID WClientUcePrecomputeBeginEventID = (TraceEventID) 11030;
        public const TraceEventID WClientUcePrecomputeEndEventID = (TraceEventID) 11031;
        public const TraceEventID WClientUceRenderBeginEventID = (TraceEventID) 11032;
        public const TraceEventID WClientUceRenderEndEventID = (TraceEventID) 11033;
        public const TraceEventID WClientUcePresentBeginEventID = (TraceEventID) 11034;
        public const TraceEventID WClientUcePresentEndEventID = (TraceEventID) 11035;
        public const TraceEventID WClientUceResponseEventID = (TraceEventID) 11036;
        public const TraceEventID WClientUceCheckDeviceStateInfoEventID = (TraceEventID) 11037;
        public const TraceEventID VisualCacheAllocEventID = (TraceEventID) 11038;
        public const TraceEventID VisualCacheUpdateEventID = (TraceEventID) 11039;
        public const TraceEventID CreateChannelEventID = (TraceEventID) 11040;
        public const TraceEventID CreateOrAddResourceOnChannelEventID = (TraceEventID) 11041;
        public const TraceEventID CreateWpfGfxResourceEventID = (TraceEventID) 11042;
        public const TraceEventID ReleaseOnChannelEventID = (TraceEventID) 11043;
        public const TraceEventID UnexpectedSoftwareFallbackEventID = (TraceEventID) 11044;
        public const TraceEventID WClientInterlockedRenderBeginEventID = (TraceEventID) 11045;
        public const TraceEventID WClientInterlockedRenderEndEventID = (TraceEventID) 11046;
        public const TraceEventID WClientRenderHandlerBeginEventID = (TraceEventID) 11047;
        public const TraceEventID WClientRenderHandlerEndEventID = (TraceEventID) 11048;
        public const TraceEventID WClientAnimRenderHandlerBeginEventID = (TraceEventID) 11049;
        public const TraceEventID WClientAnimRenderHandlerEndEventID = (TraceEventID) 11050;
        public const TraceEventID WClientMediaRenderBeginEventID = (TraceEventID) 11051;
        public const TraceEventID WClientMediaRenderEndEventID = (TraceEventID) 11052;
        public const TraceEventID WClientPostRenderEventID = (TraceEventID) 11053;
        public const TraceEventID WClientQPCFrequencyEventID = (TraceEventID) 11054;
        public const TraceEventID WClientPrecomputeSceneBeginEventID = (TraceEventID) 11055;
        public const TraceEventID WClientPrecomputeSceneEndEventID = (TraceEventID) 11056;
        public const TraceEventID WClientCompileSceneBeginEventID = (TraceEventID) 11057;
        public const TraceEventID WClientCompileSceneEndEventID = (TraceEventID) 11058;
        public const TraceEventID WClientUIResponseEventID = (TraceEventID) 11059;
        public const TraceEventID WClientUICommitChannelEventID = (TraceEventID) 11060;
        public const TraceEventID WClientUceNotifyPresentEventID = (TraceEventID) 11061;
        public const TraceEventID WClientScheduleRenderEventID = (TraceEventID) 11062;
        public const TraceEventID WClientOnRenderBeginEventID = (TraceEventID) 11063;
        public const TraceEventID WClientOnRenderEndEventID = (TraceEventID) 11064;
        public const TraceEventID WClientCreateIRTEventID = (TraceEventID) 11065;
        public const TraceEventID WClientPotentialIRTResourceEventID = (TraceEventID) 11066;
        public const TraceEventID WClientUIContextDispatchBeginEventID = (TraceEventID) 12001;
        public const TraceEventID WClientUIContextDispatchEndEventID = (TraceEventID) 12002;
        public const TraceEventID WClientUIContextPostEventID = (TraceEventID) 12003;
        public const TraceEventID WClientUIContextAbortEventID = (TraceEventID) 12004;
        public const TraceEventID WClientUIContextPromoteEventID = (TraceEventID) 12005;
        public const TraceEventID WClientUIContextIdleEventID = (TraceEventID) 12006;
       #endregion

    #region private
        private static Guid DrawBitmapTaskGuid = new Guid(unchecked((int) 0xa7f1ef9d), unchecked((short) 0x9bb9), unchecked((short) 0x4c7d), 0x93, 0xad, 0x11, 0x91, 0x9b, 0x12, 0x2f, 0xa2);
        private static Guid BitmapCopyTaskGuid = new Guid(unchecked((int) 0x5c02c62f), unchecked((short) 0xaec1), unchecked((short) 0x4f0c), 0xb4, 0xa7, 0x51, 0x1d, 0x28, 0x01, 0x84, 0xfd);
        private static Guid SetClipTaskGuid = new Guid(unchecked((int) 0x6acaf5f0), unchecked((short) 0xd340), unchecked((short) 0x4373), 0xa8, 0x51, 0xfe, 0xa1, 0x26, 0x7a, 0xa2, 0x10);
        private static Guid DWMDraw_ClearTaskGuid = new Guid(unchecked((int) 0xc8960930), unchecked((short) 0xbf29), unchecked((short) 0x4c06), 0x85, 0x74, 0xd4, 0xbe, 0x80, 0x3f, 0x13, 0xf9);
        private static Guid DWMDraw_TaskGuid = new Guid(unchecked((int) 0xc4e8f367), unchecked((short) 0x3ba1), unchecked((short) 0x4c75), 0xb9, 0x85, 0xfa, 0xcb, 0xb4, 0x27, 0x4d, 0xd7);
        private static Guid LayerEventTaskGuid = new Guid(unchecked((int) 0xead9a51b), unchecked((short) 0xd3d3), unchecked((short) 0x4b0b), 0x8d, 0x25, 0xe4, 0x91, 0x4e, 0xd4, 0xc1, 0xed);
        private static Guid WClientDesktopRTCreateTaskGuid = new Guid(unchecked((int) 0x2e62c3bf), unchecked((short) 0x7c51), unchecked((short) 0x43fb), 0x8c, 0xdc, 0x91, 0x5d, 0x4a, 0xbc, 0x09, 0xdd);
        private static Guid WClientUceProcessQueueTaskGuid = new Guid(unchecked((int) 0xb7c7f692), unchecked((short) 0xf2b4), unchecked((short) 0x447a), 0xb5, 0xdf, 0xfa, 0x6c, 0x31, 0x48, 0x89, 0xae);
        private static Guid WClientUcePrecomputeTaskGuid = new Guid(unchecked((int) 0xde51ae60), unchecked((short) 0x46ad), unchecked((short) 0x4cc0), 0x9a, 0x29, 0x42, 0x6a, 0x87, 0xe8, 0x8e, 0x9f);
        private static Guid WClientUceRenderTaskGuid = new Guid(unchecked((int) 0x92ca500c), unchecked((short) 0x67b1), unchecked((short) 0x447f), 0x94, 0x97, 0xcf, 0xd6, 0xd5, 0x2a, 0x5b, 0x0e);
        private static Guid WClientUcePresentTaskGuid = new Guid(unchecked((int) 0x4c48d6ef), unchecked((short) 0xac14), unchecked((short) 0x4d84), 0xba, 0x37, 0x49, 0xa9, 0x4b, 0xa8, 0xd2, 0xaf);
        private static Guid WClientUceResponseTaskGuid = new Guid(unchecked((int) 0x4c253b24), unchecked((short) 0x7230), unchecked((short) 0x4fa1), 0x97, 0x48, 0xac, 0x4c, 0x59, 0xcf, 0x28, 0x8c);
        private static Guid WClientUceCheckDeviceStateTaskGuid = new Guid(unchecked((int) 0x76601d6d), unchecked((short) 0xc6d4), unchecked((short) 0x4e8d), 0xac, 0x6e, 0x3f, 0x9b, 0x4f, 0x17, 0x45, 0xe0);
        private static Guid WClientUIContextDispatchTaskGuid = new Guid(unchecked((int) 0x2481a374), unchecked((short) 0x999f), unchecked((short) 0x4ad2), 0x9f, 0x22, 0x6b, 0x7c, 0x8e, 0x2a, 0x5d, 0xb0);
        private static Guid WClientUIContextPostTaskGuid = new Guid(unchecked((int) 0x76287aef), unchecked((short) 0xf674), unchecked((short) 0x4061), 0xa6, 0x0a, 0x76, 0xf9, 0x55, 0x50, 0xef, 0xeb);
        private static Guid WClientUIContextAbortTaskGuid = new Guid(unchecked((int) 0x39404da9), unchecked((short) 0x413f), unchecked((short) 0x4581), 0xa0, 0xa1, 0x47, 0x15, 0x16, 0x8b, 0x5a, 0xd8);
        private static Guid WClientUIContextPromoteTaskGuid = new Guid(unchecked((int) 0x632d4e9e), unchecked((short) 0xb988), unchecked((short) 0x4b32), 0xab, 0x2a, 0xb3, 0x7a, 0xa3, 0x49, 0x27, 0xee);
        private static Guid WClientUIContextIdleTaskGuid = new Guid(unchecked((int) 0xc626ebef), unchecked((short) 0x0780), unchecked((short) 0x487f), 0x81, 0xd7, 0x38, 0xd3, 0xf0, 0xa6, 0xf0, 0x5e);
        private static Guid WClientLayoutTaskGuid = new Guid(unchecked((int) 0xa3edb710), unchecked((short) 0x21fc), unchecked((short) 0x4f91), 0x97, 0xf4, 0xac, 0x2b, 0x0d, 0xf1, 0xc2, 0x0f);
        private static Guid WClientMeasureTaskGuid = new Guid(unchecked((int) 0x3005e67b), unchecked((short) 0x129c), unchecked((short) 0x4ced), 0xbc, 0xaa, 0x91, 0xd7, 0xd7, 0x3b, 0x15, 0x44);
        private static Guid WClientArrangeTaskGuid = new Guid(unchecked((int) 0x4b0ef3d1), unchecked((short) 0x0cbb), unchecked((short) 0x4847), 0xb9, 0x8f, 0x16, 0x40, 0x8e, 0x7e, 0x83, 0xf3);
        private static Guid WClientCreateVisualTaskGuid = new Guid(unchecked((int) 0x2dbecf62), unchecked((short) 0x51ea), unchecked((short) 0x493a), 0x8d, 0xd0, 0x4b, 0xee, 0x1c, 0xcb, 0xe8, 0xaa);
        private static Guid WClientInputMessageTaskGuid = new Guid(unchecked((int) 0x4ac79bac), unchecked((short) 0x7dfb), unchecked((short) 0x4402), 0xa9, 0x10, 0xfd, 0xaf, 0xe1, 0x6f, 0x29, 0xb2);
        private static Guid WClientRenderHandlerTaskGuid = new Guid(unchecked((int) 0x7723d8b7), unchecked((short) 0x488b), unchecked((short) 0x4f80), 0xb0, 0x89, 0x46, 0xa4, 0xc6, 0xac, 0xa1, 0xc4);
        private static Guid WClientAnimRenderHandlerTaskGuid = new Guid(unchecked((int) 0x521c1c8d), unchecked((short) 0xfaaa), unchecked((short) 0x435b), 0xad, 0x8c, 0x1d, 0x64, 0x44, 0x2b, 0xfd, 0x70);
        private static Guid WClientMediaRenderTaskGuid = new Guid(unchecked((int) 0x6827e447), unchecked((short) 0x0e0e), unchecked((short) 0x4b5e), 0xae, 0x81, 0xb7, 0x9a, 0x00, 0xec, 0x83, 0x49);
        private static Guid WClientPostRenderTaskGuid = new Guid(unchecked((int) 0xfb69cd45), unchecked((short) 0xc00d), unchecked((short) 0x4c23), 0x97, 0x65, 0x69, 0xc0, 0x03, 0x44, 0xb2, 0xc5);
        private static Guid WClientQPCFrequencyTaskGuid = new Guid(unchecked((int) 0x30ee0097), unchecked((short) 0x084c), unchecked((short) 0x408b), 0x90, 0x38, 0x73, 0xbe, 0xd0, 0x47, 0x98, 0x73);
        private static Guid WClientPrecomputeSceneTaskGuid = new Guid(unchecked((int) 0x3331420f), unchecked((short) 0x7a3b), unchecked((short) 0x42b6), 0x8d, 0xfe, 0xaa, 0xbf, 0x47, 0x28, 0x01, 0xda);
        private static Guid WClientCompileSceneTaskGuid = new Guid(unchecked((int) 0xaf36fcb5), unchecked((short) 0x58e5), unchecked((short) 0x48d0), 0x88, 0xd0, 0xd8, 0xf4, 0xdc, 0xb5, 0x6a, 0x12);
        private static Guid WClientUIResponseTaskGuid = new Guid(unchecked((int) 0xab29585b), unchecked((short) 0x4794), unchecked((short) 0x4465), 0x91, 0xe6, 0x9d, 0xf5, 0x86, 0x1c, 0x88, 0xc5);
        private static Guid WClientUICommitChannelTaskGuid = new Guid(unchecked((int) 0xf9c0372e), unchecked((short) 0x60bd), unchecked((short) 0x46c9), 0xbc, 0x64, 0x94, 0xfe, 0x5f, 0xd3, 0x1f, 0xe4);
        private static Guid WClientUceNotifyPresentTaskGuid = new Guid(unchecked((int) 0x24cd1476), unchecked((short) 0xe145), unchecked((short) 0x4e5a), 0x8b, 0xfc, 0x50, 0xc3, 0x6b, 0xbd, 0xf9, 0xcc);
        private static Guid WClientScheduleRenderTaskGuid = new Guid(unchecked((int) 0x6d5aeaf3), unchecked((short) 0xa433), unchecked((short) 0x4daa), 0x8b, 0x31, 0xd8, 0xae, 0x49, 0xcf, 0x6b, 0xd1);
        private static Guid WClientParseBamlTaskGuid = new Guid(unchecked((int) 0x8a1e3af5), unchecked((short) 0x3a6d), unchecked((short) 0x4582), 0x86, 0xd1, 0x59, 0x01, 0x47, 0x1e, 0xbb, 0xde);
        private static Guid WClientParseXamlTaskGuid = new Guid(unchecked((int) 0x3164257a), unchecked((short) 0xc9be), unchecked((short) 0x4c36), 0x9d, 0x8f, 0x09, 0xb1, 0x8a, 0xc8, 0x80, 0xa6);
        private static Guid WClientParseXmlTaskGuid = new Guid(unchecked((int) 0xbf86e5bf), unchecked((short) 0x3fb4), unchecked((short) 0x442f), 0xa3, 0x4a, 0xb2, 0x07, 0xa3, 0xb1, 0x9c, 0x3b);
        private static Guid WClientParseFefCrInstTaskGuid = new Guid(unchecked((int) 0xf7555161), unchecked((short) 0x6c1a), unchecked((short) 0x4a12), 0x82, 0x8d, 0x84, 0x92, 0xa7, 0x69, 0x9a, 0x49);
        private static Guid WClientParseInstVisTreeTaskGuid = new Guid(unchecked((int) 0xa8c3b9c0), unchecked((short) 0x562b), unchecked((short) 0x4509), 0xbe, 0xcb, 0xa0, 0x8e, 0x48, 0x1a, 0x72, 0x73);
        private static Guid WClientParseRdrCrInstTaskGuid = new Guid(unchecked((int) 0x8ba8f51c), unchecked((short) 0x0775), unchecked((short) 0x4adf), 0x9e, 0xed, 0xb1, 0x65, 0x4c, 0xa0, 0x88, 0xf5);
        private static Guid WClientParseRdrCrInFTypTaskGuid = new Guid(unchecked((int) 0x0da15d58), unchecked((short) 0xc3a7), unchecked((short) 0x40de), 0x91, 0x13, 0x72, 0xdb, 0x0c, 0x4a, 0x93, 0x51);
        private static Guid WClientAppCtorTaskGuid = new Guid(unchecked((int) 0xf9f048c6), unchecked((short) 0x2011), unchecked((short) 0x4d0a), 0x81, 0x2a, 0x23, 0xa4, 0xa4, 0xd8, 0x01, 0xf5);
        private static Guid WClientAppRunTaskGuid = new Guid(unchecked((int) 0x08a719d6), unchecked((short) 0xea79), unchecked((short) 0x4abc), 0x97, 0x99, 0x38, 0xed, 0xed, 0x60, 0x21, 0x33);
        private static Guid WClientTimeManagerTickTaskGuid = new Guid(unchecked((int) 0xea3b4b66), unchecked((short) 0xb25f), unchecked((short) 0x4e5d), 0x8b, 0xd4, 0xec, 0x62, 0xbb, 0x44, 0x58, 0x3e);
        private static Guid WClientStringTaskGuid = new Guid(unchecked((int) 0x6b3c0258), unchecked((short) 0x9ddb), unchecked((short) 0x4579), 0x86, 0x60, 0x41, 0xc3, 0xad, 0xa2, 0x5c, 0x34);
        private static Guid WClientFontCacheTaskGuid = new Guid(unchecked((int) 0xf3362106), unchecked((short) 0xb861), unchecked((short) 0x4980), 0x9a, 0xac, 0xb1, 0xef, 0x0b, 0xab, 0x75, 0xaa);
        private static Guid WClientDRXOpenPackageTaskGuid = new Guid(unchecked((int) 0x2b8f75f3), unchecked((short) 0xf8f9), unchecked((short) 0x4075), 0xb9, 0x14, 0x5a, 0xe8, 0x53, 0xc7, 0x62, 0x76);
        private static Guid WClientDRXReadStreamTaskGuid = new Guid(unchecked((int) 0xc2b15025), unchecked((short) 0x7812), unchecked((short) 0x4e44), 0x8b, 0x68, 0x7d, 0x73, 0x43, 0x03, 0x43, 0x8a);
        private static Guid WClientDRXGetStreamTaskGuid = new Guid(unchecked((int) 0x3f4510eb), unchecked((short) 0x9ee8), unchecked((short) 0x4b80), 0x9e, 0xc7, 0x77, 0x5e, 0xfe, 0xb1, 0xba, 0x72);
        private static Guid WClientDRXPageVisibleTaskGuid = new Guid(unchecked((int) 0x2ae7c601), unchecked((short) 0x0aec), unchecked((short) 0x4c99), 0xba, 0x80, 0x2e, 0xca, 0x71, 0x2d, 0x1b, 0x97);
        private static Guid WClientDRXPageLoadedTaskGuid = new Guid(unchecked((int) 0x66028645), unchecked((short) 0xe022), unchecked((short) 0x4d90), 0xa7, 0xbd, 0xa8, 0xcc, 0xda, 0xcd, 0xb2, 0xe1);
        private static Guid WClientDRXInvalidateViewTaskGuid = new Guid(unchecked((int) 0x3be3740f), unchecked((short) 0x0a31), unchecked((short) 0x4d22), 0xa2, 0xa3, 0x4d, 0x4b, 0x6d, 0x3a, 0xb8, 0x99);
        private static Guid WClientDRXLineDownTaskGuid = new Guid(unchecked((int) 0xb67ab12c), unchecked((short) 0x29bf), unchecked((short) 0x4020), 0xb6, 0x78, 0xf0, 0x43, 0x92, 0x5b, 0x82, 0x35);
        private static Guid WClientDRXPageDownTaskGuid = new Guid(unchecked((int) 0xd7cdeb52), unchecked((short) 0x5ba3), unchecked((short) 0x4e02), 0xb1, 0x14, 0x38, 0x5a, 0x61, 0xe7, 0xba, 0x9d);
        private static Guid WClientDRXPageJumpTaskGuid = new Guid(unchecked((int) 0xf068b137), unchecked((short) 0x7b09), unchecked((short) 0x44a1), 0x84, 0xd0, 0x4f, 0xf1, 0x59, 0x2e, 0x0a, 0xc1);
        private static Guid WClientDRXLayoutTaskGuid = new Guid(unchecked((int) 0x34fbea40), unchecked((short) 0x0238), unchecked((short) 0x498f), 0xb1, 0x2a, 0x63, 0x1f, 0x5a, 0x8e, 0xf9, 0xa5);
        private static Guid WClientDRXInstantiatedTaskGuid = new Guid(unchecked((int) 0x9de677e1), unchecked((short) 0x914a), unchecked((short) 0x426c), 0xbc, 0xd9, 0x2c, 0xcd, 0xea, 0x36, 0x48, 0xdf);
        private static Guid WClientDRXStyleCreatedTaskGuid = new Guid(unchecked((int) 0x69737c35), unchecked((short) 0x1636), unchecked((short) 0x43be), 0xa3, 0x52, 0x42, 0x8c, 0xa3, 0x6d, 0x1b, 0x2c);
        private static Guid WClientDRXFindTaskGuid = new Guid(unchecked((int) 0xff8efb74), unchecked((short) 0xefaa), unchecked((short) 0x424d), 0x90, 0x22, 0xee, 0x8d, 0x21, 0xad, 0x80, 0x4e);
        private static Guid WClientDRXZoomTaskGuid = new Guid(unchecked((int) 0x2e5045a1), unchecked((short) 0x8dac), unchecked((short) 0x4c90), 0x99, 0x95, 0x32, 0x60, 0xde, 0x16, 0x6c, 0x8f);
        private static Guid WClientDRXEnsureOMTaskGuid = new Guid(unchecked((int) 0x28e3a8bb), unchecked((short) 0xaebb), unchecked((short) 0x48e8), 0x86, 0xb6, 0x32, 0x75, 0x9b, 0x47, 0xfc, 0xbe);
        private static Guid WClientDRXGetPageTaskGuid = new Guid(unchecked((int) 0xa0c17259), unchecked((short) 0xc6b1), unchecked((short) 0x4850), 0xa9, 0xab, 0x13, 0x65, 0x9f, 0xe6, 0xdc, 0x58);
        private static Guid WClientDRXTreeFlattenTaskGuid = new Guid(unchecked((int) 0xb4557454), unchecked((short) 0x212b), unchecked((short) 0x4f57), 0xb9, 0xca, 0x2b, 0xa9, 0xd5, 0x82, 0x73, 0xb3);
        private static Guid WClientDRXAlphaFlattenTaskGuid = new Guid(unchecked((int) 0x302f02e9), unchecked((short) 0xf025), unchecked((short) 0x4083), 0xab, 0xd5, 0x2c, 0xe3, 0xaa, 0xa9, 0xa3, 0xcf);
        private static Guid WClientDRXGetDevModeTaskGuid = new Guid(unchecked((int) 0x573ea8dc), unchecked((short) 0xdb6c), unchecked((short) 0x42c0), 0x91, 0xf8, 0x96, 0x4e, 0x39, 0xcb, 0x6a, 0x70);
        private static Guid WClientDRXStartDocTaskGuid = new Guid(unchecked((int) 0xf3fba666), unchecked((short) 0xfa0f), unchecked((short) 0x4487), 0xb8, 0x46, 0x9f, 0x20, 0x48, 0x11, 0xbf, 0x3d);
        private static Guid WClientDRXEndDocTaskGuid = new Guid(unchecked((int) 0x743dd3cf), unchecked((short) 0xbbce), unchecked((short) 0x4e69), 0xa4, 0xdb, 0x85, 0x22, 0x6e, 0xc6, 0xa4, 0x45);
        private static Guid WClientDRXStartPageTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x57);
        private static Guid WClientDRXEndPageTaskGuid = new Guid(unchecked((int) 0xe20fddf4), unchecked((short) 0x17a6), unchecked((short) 0x4e5f), 0x86, 0x93, 0x3d, 0xd7, 0xcb, 0x04, 0x94, 0x22);
        private static Guid WClientDRXCommitPageTaskGuid = new Guid(unchecked((int) 0x7d7ee18d), unchecked((short) 0xaea5), unchecked((short) 0x493f), 0x9e, 0xf2, 0xbb, 0xdb, 0x36, 0xfc, 0xaa, 0x78);
        private static Guid WClientDRXConvertFontTaskGuid = new Guid(unchecked((int) 0x88fc2d42), unchecked((short) 0xb1de), unchecked((short) 0x4588), 0x8c, 0x3b, 0xdc, 0x5b, 0xec, 0x03, 0xa9, 0xac);
        private static Guid WClientDRXConvertImageTaskGuid = new Guid(unchecked((int) 0x17fddfdc), unchecked((short) 0xa1be), unchecked((short) 0x43b3), 0xb2, 0xee, 0xf5, 0xe8, 0x9b, 0x7b, 0x1b, 0x26);
        private static Guid WClientDRXSaveXpsTaskGuid = new Guid(unchecked((int) 0xba0320d5), unchecked((short) 0x2294), unchecked((short) 0x4067), 0x8b, 0x19, 0xef, 0x9c, 0xdd, 0xad, 0x4b, 0x1a);
        private static Guid WClientDRXLoadPrimitiveTaskGuid = new Guid(unchecked((int) 0xd0b70c99), unchecked((short) 0x450e), unchecked((short) 0x4872), 0xa2, 0xd4, 0xfb, 0xfb, 0x1d, 0xc7, 0x97, 0xfa);
        private static Guid WClientDRXSavePageTaskGuid = new Guid(unchecked((int) 0xb0e3e78b), unchecked((short) 0x9ac7), unchecked((short) 0x473c), 0x89, 0x03, 0xb5, 0xd2, 0x12, 0x39, 0x9e, 0x3b);
        private static Guid WClientDRXSerializationTaskGuid = new Guid(unchecked((int) 0x0527276c), unchecked((short) 0xd3f4), unchecked((short) 0x4293), 0xb8, 0x8c, 0xec, 0xdf, 0x7c, 0xac, 0x44, 0x30);
        private static Guid WClientPropParentCheckTaskGuid = new Guid(unchecked((int) 0x831bea07), unchecked((short) 0x5a2c), unchecked((short) 0x434c), 0x8e, 0xf8, 0x7e, 0xba, 0x41, 0xc8, 0x81, 0xfb);
        private static Guid WClientResourceFindTaskGuid = new Guid(unchecked((int) 0x228d90d5), unchecked((short) 0x7e19), unchecked((short) 0x4480), 0x9e, 0x56, 0x3a, 0xf2, 0xe9, 0x0f, 0x8d, 0xa6);
        private static Guid WClientResourceCacheValueTaskGuid = new Guid(unchecked((int) 0x3b253e2d), unchecked((short) 0x72a5), unchecked((short) 0x489e), 0x8c, 0x65, 0x56, 0xc1, 0xe6, 0xc8, 0x59, 0xb5);
        private static Guid WClientResourceCacheNullTaskGuid = new Guid(unchecked((int) 0x7866a65b), unchecked((short) 0x2f38), unchecked((short) 0x43b6), 0xab, 0xd2, 0xdf, 0x43, 0x3b, 0xbc, 0xa0, 0x73);
        private static Guid WClientResourceCacheMissTaskGuid = new Guid(unchecked((int) 0x0420755f), unchecked((short) 0xd416), unchecked((short) 0x4f15), 0x93, 0x9f, 0x3e, 0x2c, 0xd3, 0xfc, 0xea, 0x23);
        private static Guid WClientResourceStockTaskGuid = new Guid(unchecked((int) 0x06f0fee4), unchecked((short) 0x72dd), unchecked((short) 0x4802), 0xbd, 0x3d, 0x09, 0x85, 0x13, 0x9f, 0xa9, 0x1a);
        private static Guid WClientResourceBamlAssemblyTaskGuid = new Guid(unchecked((int) 0x19df4373), unchecked((short) 0x6680), unchecked((short) 0x4a04), 0x8c, 0x77, 0xd2, 0xf6, 0x80, 0x9c, 0xa7, 0x03);
        private static Guid CreateStickyNoteTaskGuid = new Guid(unchecked((int) 0xe3dbffac), unchecked((short) 0x1e92), unchecked((short) 0x4f48), 0xa6, 0x5a, 0xc2, 0x90, 0xbd, 0x5f, 0x5f, 0x15);
        private static Guid DeleteTextNoteTaskGuid = new Guid(unchecked((int) 0x7626a2f9), unchecked((short) 0x9a61), unchecked((short) 0x43a3), 0xb7, 0xcc, 0xbb, 0x84, 0xc2, 0x49, 0x3a, 0xa7);
        private static Guid DeleteInkNoteTaskGuid = new Guid(unchecked((int) 0xbf7e2a93), unchecked((short) 0x9d6a), unchecked((short) 0x453e), 0xba, 0xdb, 0x3f, 0x8f, 0x60, 0x07, 0x5c, 0xf2);
        private static Guid CreateHighlightTaskGuid = new Guid(unchecked((int) 0xc2a5edb8), unchecked((short) 0xac73), unchecked((short) 0x41ef), 0xa9, 0x43, 0xa8, 0xa4, 0x9f, 0xa2, 0x84, 0xb1);
        private static Guid ClearHighlightTaskGuid = new Guid(unchecked((int) 0xe1a59147), unchecked((short) 0xd28d), unchecked((short) 0x4c5f), 0xb9, 0x80, 0x69, 0x1b, 0xe2, 0xfd, 0x42, 0x08);
        private static Guid LoadAnnotationsTaskGuid = new Guid(unchecked((int) 0xcf3a283e), unchecked((short) 0xc004), unchecked((short) 0x4e7d), 0xb3, 0xb9, 0xcc, 0x9b, 0x58, 0x2a, 0x4a, 0x5f);
        private static Guid AddAnnotationTaskGuid = new Guid(unchecked((int) 0x8f4b2faa), unchecked((short) 0x24d6), unchecked((short) 0x4ee2), 0x99, 0x35, 0xbb, 0xf8, 0x45, 0xf7, 0x58, 0xa2);
        private static Guid DeleteAnnotationTaskGuid = new Guid(unchecked((int) 0x4d832230), unchecked((short) 0x952a), unchecked((short) 0x4464), 0x80, 0xaf, 0xaa, 0xb2, 0xac, 0x86, 0x17, 0x03);
        private static Guid GetAnnotationByIdTaskGuid = new Guid(unchecked((int) 0x3d27753f), unchecked((short) 0xeb8a), unchecked((short) 0x4e75), 0x9d, 0x5b, 0x82, 0xfb, 0xa5, 0x5c, 0xde, 0xd1);
        private static Guid GetAnnotationByLocTaskGuid = new Guid(unchecked((int) 0x741a41bc), unchecked((short) 0x8ecd), unchecked((short) 0x43d1), 0xa7, 0xf1, 0xd2, 0xfa, 0xca, 0x73, 0x62, 0xef);
        private static Guid GetAnnotationsTaskGuid = new Guid(unchecked((int) 0xcd9f6017), unchecked((short) 0x7e64), unchecked((short) 0x4c61), 0xb9, 0xed, 0x5c, 0x2f, 0xc8, 0xc4, 0xd8, 0x49);
        private static Guid SerializeAnnotationTaskGuid = new Guid(unchecked((int) 0x0148924b), unchecked((short) 0x5bea), unchecked((short) 0x43e9), 0xb3, 0xed, 0x39, 0x9c, 0xa1, 0x3b, 0x35, 0xeb);
        private static Guid DeserializeAnnotationTaskGuid = new Guid(unchecked((int) 0x2e32c255), unchecked((short) 0xd6db), unchecked((short) 0x4de7), 0x9e, 0x62, 0x95, 0x86, 0x37, 0x77, 0x78, 0xd5);
        private static Guid UpdateAnnotationWithSNCTaskGuid = new Guid(unchecked((int) 0x205e0a58), unchecked((short) 0x3c7d), unchecked((short) 0x495d), 0xb3, 0xed, 0x18, 0xc3, 0xfb, 0x38, 0x92, 0x3f);
        private static Guid UpdateSNCWithAnnotationTaskGuid = new Guid(unchecked((int) 0x59c337ce), unchecked((short) 0x9cc2), unchecked((short) 0x4a86), 0x9b, 0xfa, 0x06, 0x1f, 0xe9, 0x54, 0x08, 0x6b);
        private static Guid AnnotationTextChangedTaskGuid = new Guid(unchecked((int) 0x8bb912b9), unchecked((short) 0x39dd), unchecked((short) 0x4208), 0xad, 0x62, 0xbe, 0x66, 0xfe, 0x5b, 0x7b, 0xa5);
        private static Guid AnnotationInkChangedTaskGuid = new Guid(unchecked((int) 0x1228e154), unchecked((short) 0xf171), unchecked((short) 0x426e), 0xb6, 0x72, 0x5e, 0xe1, 0x9b, 0x75, 0x5e, 0xdf);
        private static Guid AddAttachedSNTaskGuid = new Guid(unchecked((int) 0x9ca660f6), unchecked((short) 0x8d7c), unchecked((short) 0x4a90), 0xa9, 0x2f, 0x74, 0x48, 0x2d, 0x9c, 0xc1, 0xcf);
        private static Guid RemoveAttachedSNTaskGuid = new Guid(unchecked((int) 0x8c4c69f7), unchecked((short) 0x1185), unchecked((short) 0x46df), 0xa5, 0xf5, 0xe3, 0x1a, 0xc7, 0xe9, 0x6c, 0x07);
        private static Guid AddAttachedHighlightTaskGuid = new Guid(unchecked((int) 0x56d2cae5), unchecked((short) 0x5ec0), unchecked((short) 0x44fb), 0x98, 0xc2, 0x45, 0x3e, 0x87, 0xa0, 0x87, 0x7b);
        private static Guid RemoveAttachedHighlightTaskGuid = new Guid(unchecked((int) 0x4c81d490), unchecked((short) 0x9004), unchecked((short) 0x49d1), 0x87, 0xd7, 0x28, 0x9d, 0x53, 0xa3, 0x14, 0xef);
        private static Guid AddAttachedMHTaskGuid = new Guid(unchecked((int) 0x7ea1d548), unchecked((short) 0xca17), unchecked((short) 0xca17), 0xa1, 0xa8, 0xf1, 0x85, 0x7d, 0xb6, 0x30, 0x2e);
        private static Guid RemoveAttachedMHTaskGuid = new Guid(unchecked((int) 0x296c7961), unchecked((short) 0xb975), unchecked((short) 0x450b), 0x89, 0x75, 0xbf, 0x86, 0x2b, 0x6c, 0x71, 0x59);
        private static Guid WpfHostUmTaskGuid = new Guid(unchecked((int) 0xed251760), unchecked((short) 0x7bbc), unchecked((short) 0x4b25), 0x83, 0x28, 0xcd, 0x7f, 0x27, 0x1f, 0xee, 0x89);
        private static Guid WpfHostTaskGuid = new Guid(unchecked((int) 0x5ff6b585), unchecked((short) 0x7fb9), unchecked((short) 0x4189), 0xbe, 0xb3, 0x54, 0xc8, 0x2c, 0xe4, 0xd7, 0xd1);
        private static Guid NavigationTaskGuid = new Guid(unchecked((int) 0x6ffb9c25), unchecked((short) 0x5c8a), unchecked((short) 0x4091), 0x98, 0x9c, 0x5b, 0x59, 0x6a, 0xb2, 0x86, 0xa0);
        private static Guid WClientOnRenderTaskGuid = new Guid(unchecked((int) 0x3a475cef), unchecked((short) 0x0e2a), unchecked((short) 0x449b), 0x98, 0x6e, 0xef, 0xff, 0x5d, 0x62, 0x60, 0xe7);
        private static Guid WClientDRXFlushPageTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x58);
        private static Guid WClientDRXGetVisualTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x59);
        private static Guid WClientDRXSerializeTreeTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x5a);
        private static Guid WClientDRXReleaseWriterTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x5b);
        private static Guid WClientDRXGetPrintCapTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x5c);
        private static Guid WClientDRXPTProviderTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x5d);
        private static Guid WClientDRXRasterTaskGuid = new Guid(unchecked((int) 0x5303d552), unchecked((short) 0x28ab), unchecked((short) 0x4dac), 0x8b, 0xcd, 0x0f, 0x7d, 0x56, 0x75, 0xa1, 0x5e);
        private static Guid UnexpectedSoftwareFallbackTaskGuid = new Guid(unchecked((int) 0x7d2c8338), unchecked((short) 0xc13c), unchecked((short) 0x4c5c), 0x86, 0x7a, 0xc5, 0x6c, 0x98, 0x03, 0x54, 0xe4);
        private static Guid UpdateVisualStateTaskGuid = new Guid(unchecked((int) 0x07a7dd63), unchecked((short) 0xb52d), unchecked((short) 0x4eff), 0xac, 0x3f, 0x24, 0x48, 0xda, 0xf9, 0x74, 0x99);
        private static Guid VisualCacheAllocTaskGuid = new Guid(unchecked((int) 0x85eb64f6), unchecked((short) 0xdc84), unchecked((short) 0x43c6), 0xb1, 0x4c, 0x3b, 0xd6, 0x07, 0xf4, 0x2c, 0x0d);
        private static Guid VisualCacheUpdateTaskGuid = new Guid(unchecked((int) 0xa4fdb257), unchecked((short) 0xf156), unchecked((short) 0x48f6), 0xb0, 0xf5, 0xc4, 0xa9, 0x44, 0xb5, 0x53, 0xfb);
        private static Guid StylusEventQueuedTaskGuid = new Guid(unchecked((int) 0x41ecd0f8), unchecked((short) 0xf5a6), unchecked((short) 0x4aae), 0x9e, 0x85, 0xca, 0xec, 0xe1, 0x19, 0xb8, 0x53);
        private static Guid TouchDownReportedTaskGuid = new Guid(unchecked((int) 0x837ad37a), unchecked((short) 0x8cef), unchecked((short) 0x4c0c), 0x94, 0x4a, 0xae, 0x3b, 0x1f, 0x1c, 0x25, 0x57);
        private static Guid TouchMoveReportedTaskGuid = new Guid(unchecked((int) 0xfd718e3f), unchecked((short) 0x5462), unchecked((short) 0x4227), 0xa6, 0x10, 0x75, 0xd5, 0xbf, 0x89, 0x67, 0xa2);
        private static Guid TouchUpReportedTaskGuid = new Guid(unchecked((int) 0xc2ac85a3), unchecked((short) 0xe16b), unchecked((short) 0x4d07), 0x90, 0xde, 0x1e, 0x68, 0x63, 0x94, 0xb8, 0x31);
        private static Guid ManipulationReportFrameTaskGuid = new Guid(unchecked((int) 0xe185d096), unchecked((short) 0x6eb9), unchecked((short) 0x41be), 0x81, 0xf4, 0x75, 0xd9, 0x24, 0x42, 0x58, 0x72);
        private static Guid ManipulationEventRaisedTaskGuid = new Guid(unchecked((int) 0x51f685eb), unchecked((short) 0xb111), unchecked((short) 0x400d), 0xb3, 0xe3, 0x46, 0x02, 0x2f, 0x66, 0xa8, 0x94);
        private static Guid WClientInterlockedRenderTaskGuid = new Guid(unchecked((int) 0x7fe9630d), unchecked((short) 0x93dd), unchecked((short) 0x45b1), 0x94, 0x59, 0x21, 0xc7, 0xa4, 0x11, 0x31, 0x74);
        private static Guid CreateOrAddOnChnlTaskGuid = new Guid(unchecked((int) 0xa9ee6bda), unchecked((short) 0xf0df), unchecked((short) 0x4e2d), 0xa3, 0xdd, 0x25, 0xca, 0x8f, 0xb3, 0x9f, 0x1f);
        private static Guid CreateWpfGfxResourceTaskGuid = new Guid(unchecked((int) 0x9de2b56b), unchecked((short) 0x79a4), unchecked((short) 0x497c), 0x88, 0xf2, 0xd5, 0xbe, 0xdc, 0x04, 0x2a, 0x9d);
        private static Guid CreateChannelTaskGuid = new Guid(unchecked((int) 0x1c415c02), unchecked((short) 0x1446), unchecked((short) 0x480c), 0xa8, 0x1e, 0xb2, 0x96, 0x7e, 0xe7, 0xe2, 0x0a);
        private static Guid ReleaseOnChannelTaskGuid = new Guid(unchecked((int) 0x8a61870b), unchecked((short) 0xa794), unchecked((short) 0x477e), 0x90, 0x93, 0x28, 0x2e, 0x09, 0xea, 0xbe, 0x59);
        private static Guid WPFElementIDTaskGuid = new Guid(unchecked((int) 0xa060d980), unchecked((short) 0x4c18), unchecked((short) 0x4953), 0x81, 0xdf, 0xcf, 0xdf, 0xd3, 0x45, 0xc5, 0xca);
        private static Guid WClientParseXamlBamlInfoTaskGuid = new Guid(unchecked((int) 0x00c117d0), unchecked((short) 0x8234), unchecked((short) 0x4efa), 0xac, 0xe3, 0x73, 0xba, 0x1c, 0x65, 0x5f, 0x28);
        private static Guid WClientCreateIRTTaskGuid = new Guid(unchecked((int) 0xd56e7b1e), unchecked((short) 0xe24c), unchecked((short) 0x4b0b), 0x9c, 0x4a, 0x88, 0x81, 0xf7, 0x00, 0x56, 0x33);
        private static Guid WClientPotentialIRTResourceTaskGuid = new Guid(unchecked((int) 0x4055bbd6), unchecked((short) 0xba41), unchecked((short) 0x4bd0), 0xbc, 0x0d, 0x6b, 0x67, 0x96, 0x52, 0x29, 0xbe);
    #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.Wpf
{
    public sealed class Template18TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long HWND { get { return GetInt64At(4); } }

        #region Private
        internal Template18TraceData(Action<Template18TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "HWND", HWND);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "HWND"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return HWND;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template18TraceData> Action;
        #endregion
    }
    public sealed class InfoStringTemplateTraceData : TraceEvent
    {
        public string Info { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal InfoStringTemplateTraceData(Action<InfoStringTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Info", Info);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Info"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Info;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<InfoStringTemplateTraceData> Action;
        #endregion
    }
    public sealed class Template37TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public string TypeAndName { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal Template37TraceData(Action<Template37TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "TypeAndName", TypeAndName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "TypeAndName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return TypeAndName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template37TraceData> Action;
        #endregion
    }
    public sealed class PerfElementNameTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public string Type { get { return GetUnicodeStringAt(8); } }
        public string Name { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }

        #region Private
        internal PerfElementNameTraceData(Action<PerfElementNameTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Name", Name);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Type", "Name"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Type;
                case 2:
                    return Name;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfElementNameTraceData> Action;
        #endregion
    }
    public sealed class PerfElementInfoTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public string Type { get { return GetUnicodeStringAt(8); } }
        public string Data { get { return GetUnicodeStringAt(SkipUnicodeString(8)); } }
        public long AssemblyID { get { return GetInt64At(SkipUnicodeString(SkipUnicodeString(8))); } }

        #region Private
        internal PerfElementInfoTraceData(Action<PerfElementInfoTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(8))+8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(8))+8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Type", Type);
             XmlAttrib(sb, "Data", Data);
             XmlAttrib(sb, "AssemblyID", AssemblyID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Type", "Data", "AssemblyID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Type;
                case 2:
                    return Data;
                case 3:
                    return AssemblyID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfElementInfoTraceData> Action;
        #endregion
    }
    public sealed class Template19TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long HWND { get { return GetInt64At(4); } }
        public int Msg { get { return GetInt32At(12); } }
        public int WParam { get { return GetInt32At(16); } }
        public int LParam { get { return GetInt32At(20); } }

        #region Private
        internal Template19TraceData(Action<Template19TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 24));
            Debug.Assert(!(Version > 2 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "HWND", HWND);
             XmlAttrib(sb, "Msg", Msg);
             XmlAttrib(sb, "WParam", WParam);
             XmlAttrib(sb, "LParam", LParam);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "HWND", "Msg", "WParam", "LParam"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return HWND;
                case 2:
                    return Msg;
                case 3:
                    return WParam;
                case 4:
                    return LParam;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template19TraceData> Action;
        #endregion
    }
    public sealed class ID32TemplateTraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }

        #region Private
        internal ID32TemplateTraceData(Action<ID32TemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ID32TemplateTraceData> Action;
        #endregion
    }
    public sealed class URITemplateTraceData : TraceEvent
    {
        public string URI { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal URITemplateTraceData(Action<URITemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "URI", URI);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "URI"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return URI;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<URITemplateTraceData> Action;
        #endregion
    }
    public sealed class MessageStringTemplateTraceData : TraceEvent
    {
        public string Message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal MessageStringTemplateTraceData(Action<MessageStringTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Message", Message);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Message"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MessageStringTemplateTraceData> Action;
        #endregion
    }
    public sealed class TypeStringTemplateTraceData : TraceEvent
    {
        public string Type { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal TypeStringTemplateTraceData(Action<TypeStringTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Type", Type);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Type"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Type;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TypeStringTemplateTraceData> Action;
        #endregion
    }
    public sealed class KeyStringTemplateTraceData : TraceEvent
    {
        public string Key { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal KeyStringTemplateTraceData(Action<KeyStringTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Key", Key);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Key"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Key;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<KeyStringTemplateTraceData> Action;
        #endregion
    }
    public sealed class AssemblyNameTemplateTraceData : TraceEvent
    {
        public string AssemblyName { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal AssemblyNameTemplateTraceData(Action<AssemblyNameTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AssemblyName", AssemblyName);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AssemblyName"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AssemblyName;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<AssemblyNameTemplateTraceData> Action;
        #endregion
    }
    public sealed class WClientParseXamlBamlInfoTemplateTraceData : TraceEvent
    {
        public long PerfElementID { get { return GetInt64At(0); } }
        public int LineNumber { get { return GetInt32At(8); } }
        public int LinePosition { get { return GetInt32At(12); } }

        #region Private
        internal WClientParseXamlBamlInfoTemplateTraceData(Action<WClientParseXamlBamlInfoTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PerfElementID", PerfElementID);
             XmlAttrib(sb, "LineNumber", LineNumber);
             XmlAttrib(sb, "LinePosition", LinePosition);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PerfElementID", "LineNumber", "LinePosition"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PerfElementID;
                case 1:
                    return LineNumber;
                case 2:
                    return LinePosition;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<WClientParseXamlBamlInfoTemplateTraceData> Action;
        #endregion
    }
    public sealed class Template31TraceData : TraceEvent
    {
        public int FirstVisiblePage { get { return GetInt32At(0); } }
        public int LastVisiblePage { get { return GetInt32At(4); } }

        #region Private
        internal Template31TraceData(Action<Template31TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "FirstVisiblePage", FirstVisiblePage);
             XmlAttrib(sb, "LastVisiblePage", LastVisiblePage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "FirstVisiblePage", "LastVisiblePage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return FirstVisiblePage;
                case 1:
                    return LastVisiblePage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template31TraceData> Action;
        #endregion
    }
    public sealed class Template32TraceData : TraceEvent
    {
        public int PageNumber { get { return GetInt32At(0); } }

        #region Private
        internal Template32TraceData(Action<Template32TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PageNumber", PageNumber);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PageNumber"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PageNumber;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template32TraceData> Action;
        #endregion
    }
    public sealed class Template35TraceData : TraceEvent
    {
        public int Zoom { get { return GetInt32At(0); } }

        #region Private
        internal Template35TraceData(Action<Template35TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Zoom", Zoom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Zoom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Zoom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template35TraceData> Action;
        #endregion
    }
    public sealed class CounterTraceData : TraceEvent
    {
        public int Count { get { return GetInt32At(0); } }

        #region Private
        internal CounterTraceData(Action<CounterTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Count", Count);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Count"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Count;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CounterTraceData> Action;
        #endregion
    }
    public sealed class Template30TraceData : TraceEvent
    {
        public int Result { get { return GetInt32At(0); } }

        #region Private
        internal Template30TraceData(Action<Template30TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Result", Result);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Result"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Result;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template30TraceData> Action;
        #endregion
    }
    public sealed class Template33TraceData : TraceEvent
    {
        public int VerticalOffset { get { return GetInt32At(0); } }

        #region Private
        internal Template33TraceData(Action<Template33TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "VerticalOffset", VerticalOffset);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "VerticalOffset"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return VerticalOffset;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template33TraceData> Action;
        #endregion
    }
    public sealed class Template34TraceData : TraceEvent
    {
        public int PageNumber { get { return GetInt32At(0); } }
        public int FirstVisiblePage { get { return GetInt32At(4); } }

        #region Private
        internal Template34TraceData(Action<Template34TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PageNumber", PageNumber);
             XmlAttrib(sb, "FirstVisiblePage", FirstVisiblePage);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PageNumber", "FirstVisiblePage"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PageNumber;
                case 1:
                    return FirstVisiblePage;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template34TraceData> Action;
        #endregion
    }
    public sealed class TimeTickTraceData : TraceEvent
    {
        public long TickTime { get { return GetInt64At(0); } }

        #region Private
        internal TimeTickTraceData(Action<TimeTickTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "TickTime", TickTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "TickTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return TickTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TimeTickTraceData> Action;
        #endregion
    }
    public sealed class LayoutSourceTemplateTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        new public LayoutSource source { get { return (LayoutSource)GetByteAt(8); } }

        #region Private
        internal LayoutSourceTemplateTraceData(Action<LayoutSourceTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 3 && EventDataLength != 9));
            Debug.Assert(!(Version > 3 && EventDataLength < 9));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "source", source);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "source"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return source;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LayoutSourceTemplateTraceData> Action;
        #endregion
    }
    public sealed class PerfElementIDTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }

        #region Private
        internal PerfElementIDTraceData(Action<PerfElementIDTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PerfElementIDTraceData> Action;
        #endregion
    }
    public sealed class LayoutAbortedTraceData : TraceEvent
    {
        public int LoopDurationMS { get { return GetInt32At(0); } }
        public int loopCounter { get { return GetInt32At(4); } }

        #region Private
        internal LayoutAbortedTraceData(Action<LayoutAbortedTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "LoopDurationMS", LoopDurationMS);
             XmlAttrib(sb, "loopCounter", loopCounter);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "LoopDurationMS", "loopCounter"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return LoopDurationMS;
                case 1:
                    return loopCounter;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<LayoutAbortedTraceData> Action;
        #endregion
    }
    public sealed class MeasureDataTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public double Width { get { return GetDoubleAt(8); } }
        public double Height { get { return GetDoubleAt(16); } }

        #region Private
        internal MeasureDataTraceData(Action<MeasureDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 24));
            Debug.Assert(!(Version > 0 && EventDataLength < 24));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Width", "Height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Width;
                case 2:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<MeasureDataTraceData> Action;
        #endregion
    }
    public sealed class ArrangeDataTraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public double Top { get { return GetDoubleAt(8); } }
        public double Left { get { return GetDoubleAt(16); } }
        public double Width { get { return GetDoubleAt(24); } }
        public double Height { get { return GetDoubleAt(32); } }

        #region Private
        internal ArrangeDataTraceData(Action<ArrangeDataTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 40));
            Debug.Assert(!(Version > 0 && EventDataLength < 40));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "Top", Top);
             XmlAttrib(sb, "Left", Left);
             XmlAttrib(sb, "Width", Width);
             XmlAttrib(sb, "Height", Height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "Top", "Left", "Width", "Height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return Top;
                case 2:
                    return Left;
                case 3:
                    return Width;
                case 4:
                    return Height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ArrangeDataTraceData> Action;
        #endregion
    }
    public sealed class TemplateHRTraceData : TraceEvent
    {
        public int ReturnCode { get { return GetInt32At(0); } }

        #region Private
        internal TemplateHRTraceData(Action<TemplateHRTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ReturnCode", ReturnCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ReturnCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ReturnCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<TemplateHRTraceData> Action;
        #endregion
    }
    public sealed class Template43TraceData : TraceEvent
    {
        public string URL { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template43TraceData(Action<Template43TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "URL", URL);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "URL"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return URL;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template43TraceData> Action;
        #endregion
    }
    public sealed class Template44TraceData : TraceEvent
    {
        public int Code { get { return GetInt32At(0); } }
        public string Text { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal Template44TraceData(Action<Template44TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Code", Code);
             XmlAttrib(sb, "Text", Text);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Code", "Text"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Code;
                case 1:
                    return Text;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template44TraceData> Action;
        #endregion
    }
    public sealed class Template45TraceData : TraceEvent
    {
        public string Location { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template45TraceData(Action<Template45TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Location", Location);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Location"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Location;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template45TraceData> Action;
        #endregion
    }
    public sealed class Template46TraceData : TraceEvent
    {
        public int State { get { return GetInt32At(0); } }

        #region Private
        internal Template46TraceData(Action<Template46TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "State", State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template46TraceData> Action;
        #endregion
    }
    public sealed class Template47TraceData : TraceEvent
    {
        public int GUID_Data1 { get { return GetInt32At(0); } }
        public int CmdId { get { return GetInt32At(4); } }

        #region Private
        internal Template47TraceData(Action<Template47TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "GUID_Data1", GUID_Data1);
             XmlAttrib(sb, "CmdId", CmdId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "GUID_Data1", "CmdId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return GUID_Data1;
                case 1:
                    return CmdId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template47TraceData> Action;
        #endregion
    }
    public sealed class Template48TraceData : TraceEvent
    {
        public int CmdFlags { get { return GetInt32At(0); } }
        public int HResult { get { return GetInt32At(4); } }

        #region Private
        internal Template48TraceData(Action<Template48TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "CmdFlags", CmdFlags);
             XmlAttrib(sb, "HResult", HResult);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "CmdFlags", "HResult"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return CmdFlags;
                case 1:
                    return HResult;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template48TraceData> Action;
        #endregion
    }
    public sealed class Template53TraceData : TraceEvent
    {
        public int AttemptDownload { get { return GetByteAt(0); } }

        #region Private
        internal Template53TraceData(Action<Template53TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 1));
            Debug.Assert(!(Version > 2 && EventDataLength < 1));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "AttemptDownload", AttemptDownload);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "AttemptDownload"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return AttemptDownload;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template53TraceData> Action;
        #endregion
    }
    public sealed class Template51TraceData : TraceEvent
    {
        public int Direct { get { return GetByteAt(0); } }

        #region Private
        internal Template51TraceData(Action<Template51TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 1));
            Debug.Assert(!(Version > 2 && EventDataLength < 1));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Direct", Direct);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Direct"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Direct;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template51TraceData> Action;
        #endregion
    }
    public sealed class Template54TraceData : TraceEvent
    {
        public string Page { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template54TraceData(Action<Template54TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Page", Page);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Page"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Page;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template54TraceData> Action;
        #endregion
    }
    public sealed class Template55TraceData : TraceEvent
    {
        public int Bytes { get { return GetInt32At(0); } }
        public int Total { get { return GetInt32At(4); } }

        #region Private
        internal Template55TraceData(Action<Template55TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Bytes", Bytes);
             XmlAttrib(sb, "Total", Total);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Bytes", "Total"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Bytes;
                case 1:
                    return Total;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template55TraceData> Action;
        #endregion
    }
    public sealed class Template49TraceData : TraceEvent
    {
        public string Path { get { return GetUnicodeStringAt(0); } }
        public string AppId { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal Template49TraceData(Action<Template49TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Path", Path);
             XmlAttrib(sb, "AppId", AppId);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Path", "AppId"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Path;
                case 1:
                    return AppId;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template49TraceData> Action;
        #endregion
    }
    public sealed class Template50TraceData : TraceEvent
    {
        public int ExitCode { get { return GetInt32At(0); } }

        #region Private
        internal Template50TraceData(Action<Template50TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ExitCode", ExitCode);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ExitCode"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ExitCode;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template50TraceData> Action;
        #endregion
    }
    public sealed class Template56TraceData : TraceEvent
    {
        public string NavigationMode { get { return GetUnicodeStringAt(0); } }
        public string UriOrObject { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }

        #region Private
        internal Template56TraceData(Action<Template56TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0))));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0))));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "NavigationMode", NavigationMode);
             XmlAttrib(sb, "UriOrObject", UriOrObject);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "NavigationMode", "UriOrObject"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return NavigationMode;
                case 1:
                    return UriOrObject;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template56TraceData> Action;
        #endregion
    }
    public sealed class Template57TraceData : TraceEvent
    {
        public string PF { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal Template57TraceData(Action<Template57TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(0)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PF", PF);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PF"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PF;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template57TraceData> Action;
        #endregion
    }
    public sealed class Template1TraceData : TraceEvent
    {
        public Address Bitmap { get { return GetHostPointer(0); } }
        public int width { get { return GetInt32At(HostOffset(4, 1)); } }
        public int height { get { return GetInt32At(HostOffset(8, 1)); } }

        #region Private
        internal Template1TraceData(Action<Template1TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Bitmap", Bitmap);
             XmlAttrib(sb, "width", width);
             XmlAttrib(sb, "height", height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Bitmap", "width", "height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Bitmap;
                case 1:
                    return width;
                case 2:
                    return height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template1TraceData> Action;
        #endregion
    }
    public sealed class Template2TraceData : TraceEvent
    {
        public int width { get { return GetInt32At(0); } }
        public int height { get { return GetInt32At(4); } }

        #region Private
        internal Template2TraceData(Action<Template2TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 8));
            Debug.Assert(!(Version > 0 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "width", width);
             XmlAttrib(sb, "height", height);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "width", "height"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return width;
                case 1:
                    return height;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template2TraceData> Action;
        #endregion
    }
    public sealed class IntBoundsTraceData : TraceEvent
    {
        public int left { get { return GetInt32At(0); } }
        public int top { get { return GetInt32At(4); } }
        public int right { get { return GetInt32At(8); } }
        public int bottom { get { return GetInt32At(12); } }

        #region Private
        internal IntBoundsTraceData(Action<IntBoundsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "left", left);
             XmlAttrib(sb, "top", top);
             XmlAttrib(sb, "right", right);
             XmlAttrib(sb, "bottom", bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "left", "top", "right", "bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return left;
                case 1:
                    return top;
                case 2:
                    return right;
                case 3:
                    return bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<IntBoundsTraceData> Action;
        #endregion
    }
    public sealed class FloatBoundsTraceData : TraceEvent
    {
        public float left { get { return GetSingleAt(0); } }
        public float top { get { return GetSingleAt(4); } }
        public float right { get { return GetSingleAt(8); } }
        public float bottom { get { return GetSingleAt(12); } }

        #region Private
        internal FloatBoundsTraceData(Action<FloatBoundsTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "left", left);
             XmlAttrib(sb, "top", top);
             XmlAttrib(sb, "right", right);
             XmlAttrib(sb, "bottom", bottom);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "left", "top", "right", "bottom"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return left;
                case 1:
                    return top;
                case 2:
                    return right;
                case 3:
                    return bottom;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<FloatBoundsTraceData> Action;
        #endregion
    }
    public sealed class Template6TraceData : TraceEvent
    {
        public int Z { get { return GetInt32At(0); } }

        #region Private
        internal Template6TraceData(Action<Template6TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Z", Z);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Z"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Z;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template6TraceData> Action;
        #endregion
    }
    public sealed class HwndTemplateTraceData : TraceEvent
    {
        public long Hwnd { get { return GetInt64At(0); } }

        #region Private
        internal HwndTemplateTraceData(Action<HwndTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Hwnd", Hwnd);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Hwnd"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Hwnd;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<HwndTemplateTraceData> Action;
        #endregion
    }
    public sealed class Template10TraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }

        #region Private
        internal Template10TraceData(Action<Template10TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template10TraceData> Action;
        #endregion
    }
    public sealed class Template11TraceData : TraceEvent
    {
        public long BatchSize { get { return GetInt64At(0); } }

        #region Private
        internal Template11TraceData(Action<Template11TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "BatchSize", BatchSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "BatchSize"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return BatchSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template11TraceData> Action;
        #endregion
    }
    public sealed class Template12TraceData : TraceEvent
    {
        public long Id { get { return GetInt64At(0); } }
        public long QPCCurrentTime { get { return GetInt64At(8); } }

        #region Private
        internal Template12TraceData(Action<Template12TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "QPCCurrentTime", QPCCurrentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "QPCCurrentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return QPCCurrentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template12TraceData> Action;
        #endregion
    }
    public sealed class Template13TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }

        #region Private
        internal Template13TraceData(Action<Template13TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template13TraceData> Action;
        #endregion
    }
    public sealed class Template15TraceData : TraceEvent
    {
        public Address hwnd { get { return GetHostPointer(0); } }
        public int hr { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal Template15TraceData(Action<Template15TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 2 && EventDataLength < HostOffset(8, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "hwnd", hwnd);
             XmlAttrib(sb, "hr", hr);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "hwnd", "hr"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return hwnd;
                case 1:
                    return hr;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template15TraceData> Action;
        #endregion
    }
    public sealed class VisualCacheTemplateTraceData : TraceEvent
    {
        public int uX { get { return GetInt32At(0); } }
        public int uY { get { return GetInt32At(4); } }
        public int uWidth { get { return GetInt32At(8); } }
        public int uHeight { get { return GetInt32At(12); } }

        #region Private
        internal VisualCacheTemplateTraceData(Action<VisualCacheTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 16));
            Debug.Assert(!(Version > 0 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "uX", uX);
             XmlAttrib(sb, "uY", uY);
             XmlAttrib(sb, "uWidth", uWidth);
             XmlAttrib(sb, "uHeight", uHeight);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "uX", "uY", "uWidth", "uHeight"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return uX;
                case 1:
                    return uY;
                case 2:
                    return uWidth;
                case 3:
                    return uHeight;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<VisualCacheTemplateTraceData> Action;
        #endregion
    }
    public sealed class CreateChannelTraceData : TraceEvent
    {
        public Address ChannelPtr { get { return GetHostPointer(0); } }
        public int ChannelHandle { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal CreateChannelTraceData(Action<CreateChannelTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ChannelHandle", ChannelHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChannelPtr", "ChannelHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChannelPtr;
                case 1:
                    return ChannelHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateChannelTraceData> Action;
        #endregion
    }
    public sealed class CreateOrAddOnChnlTraceData : TraceEvent
    {
        public long PerfEltId { get { return GetInt64At(0); } }
        public Address ChannelPtr { get { return GetHostPointer(8); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(12, 1)); } }
        public int ResourceType { get { return GetInt32At(HostOffset(16, 1)); } }

        #region Private
        internal CreateOrAddOnChnlTraceData(Action<CreateOrAddOnChnlTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(20, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(20, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "PerfEltId", PerfEltId);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "PerfEltId", "ChannelPtr", "ResourceHandle", "ResourceType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return PerfEltId;
                case 1:
                    return ChannelPtr;
                case 2:
                    return ResourceHandle;
                case 3:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateOrAddOnChnlTraceData> Action;
        #endregion
    }
    public sealed class CreateWpfGfxResourceTraceData : TraceEvent
    {
        public Address ResourcePtr { get { return GetHostPointer(0); } }
        public int ChannelHandle { get { return GetInt32At(HostOffset(4, 1)); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(8, 1)); } }
        public int ResourceType { get { return GetInt32At(HostOffset(12, 1)); } }

        #region Private
        internal CreateWpfGfxResourceTraceData(Action<CreateWpfGfxResourceTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(16, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(16, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ResourcePtr", ResourcePtr);
             XmlAttrib(sb, "ChannelHandle", ChannelHandle);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             XmlAttrib(sb, "ResourceType", ResourceType);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ResourcePtr", "ChannelHandle", "ResourceHandle", "ResourceType"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ResourcePtr;
                case 1:
                    return ChannelHandle;
                case 2:
                    return ResourceHandle;
                case 3:
                    return ResourceType;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateWpfGfxResourceTraceData> Action;
        #endregion
    }
    public sealed class ReleaseOnChannelTraceData : TraceEvent
    {
        public Address ChannelPtr { get { return GetHostPointer(0); } }
        public int ResourceHandle { get { return GetInt32At(HostOffset(4, 1)); } }

        #region Private
        internal ReleaseOnChannelTraceData(Action<ReleaseOnChannelTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(8, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(8, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ChannelPtr", ChannelPtr);
             XmlAttrib(sb, "ResourceHandle", ResourceHandle);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ChannelPtr", "ResourceHandle"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ChannelPtr;
                case 1:
                    return ResourceHandle;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<ReleaseOnChannelTraceData> Action;
        #endregion
    }
    public sealed class GfxSoftwareFallbackTraceData : TraceEvent
    {
        public UnexptectedSWFallbackReason Reason { get { return (UnexptectedSWFallbackReason)GetInt32At(0); } }

        #region Private
        internal GfxSoftwareFallbackTraceData(Action<GfxSoftwareFallbackTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != 4));
            Debug.Assert(!(Version > 0 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<GfxSoftwareFallbackTraceData> Action;
        #endregion
    }
    public sealed class Template20TraceData : TraceEvent
    {
        public int Id { get { return GetInt32At(0); } }
        public long QPCExpectedPresentTime { get { return GetInt64At(4); } }

        #region Private
        internal Template20TraceData(Action<Template20TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 12));
            Debug.Assert(!(Version > 2 && EventDataLength < 12));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Id", Id);
             XmlAttrib(sb, "QPCExpectedPresentTime", QPCExpectedPresentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Id", "QPCExpectedPresentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Id;
                case 1:
                    return QPCExpectedPresentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template20TraceData> Action;
        #endregion
    }
    public sealed class Template21TraceData : TraceEvent
    {
        public long QPCFrequency { get { return GetInt64At(0); } }
        public long QPCCurrentTime { get { return GetInt64At(8); } }

        #region Private
        internal Template21TraceData(Action<Template21TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QPCFrequency", QPCFrequency);
             XmlAttrib(sb, "QPCCurrentTime", QPCCurrentTime);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QPCFrequency", "QPCCurrentTime"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QPCFrequency;
                case 1:
                    return QPCCurrentTime;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template21TraceData> Action;
        #endregion
    }
    public sealed class Template22TraceData : TraceEvent
    {
        public int ContextID { get { return GetInt32At(0); } }
        public int ResponseID { get { return GetInt32At(4); } }

        #region Private
        internal Template22TraceData(Action<Template22TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 8));
            Debug.Assert(!(Version > 2 && EventDataLength < 8));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ContextID", ContextID);
             XmlAttrib(sb, "ResponseID", ResponseID);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ContextID", "ResponseID"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ContextID;
                case 1:
                    return ResponseID;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template22TraceData> Action;
        #endregion
    }
    public sealed class Template23TraceData : TraceEvent
    {
        public long QPCLastPresentationTime { get { return GetInt64At(0); } }
        public long PresentationResults { get { return GetInt64At(8); } }

        #region Private
        internal Template23TraceData(Action<Template23TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 16));
            Debug.Assert(!(Version > 2 && EventDataLength < 16));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "QPCLastPresentationTime", QPCLastPresentationTime);
             XmlAttrib(sb, "PresentationResults", PresentationResults);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "QPCLastPresentationTime", "PresentationResults"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return QPCLastPresentationTime;
                case 1:
                    return PresentationResults;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template23TraceData> Action;
        #endregion
    }
    public sealed class Template24TraceData : TraceEvent
    {
        public int RenderDelay { get { return GetInt32At(0); } }

        #region Private
        internal Template24TraceData(Action<Template24TraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != 4));
            Debug.Assert(!(Version > 2 && EventDataLength < 4));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "RenderDelay", RenderDelay);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RenderDelay"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RenderDelay;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Template24TraceData> Action;
        #endregion
    }
    public sealed class CreateIRTTraceData : TraceEvent
    {
        public Address ResourcePtr { get { return GetHostPointer(0); } }
        public Address ParentResourcePtr { get { return GetHostPointer(HostOffset(4, 1)); } }
        public IntermediateRenderTargetReason Reason { get { return (IntermediateRenderTargetReason)GetInt32At(HostOffset(8, 2)); } }

        #region Private
        internal CreateIRTTraceData(Action<CreateIRTTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(12, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(12, 2)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "ResourcePtr", ResourcePtr);
             XmlAttribHex(sb, "ParentResourcePtr", ParentResourcePtr);
             XmlAttrib(sb, "Reason", Reason);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ResourcePtr", "ParentResourcePtr", "Reason"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ResourcePtr;
                case 1:
                    return ParentResourcePtr;
                case 2:
                    return Reason;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<CreateIRTTraceData> Action;
        #endregion
    }
    public sealed class PtrTemplateTraceData : TraceEvent
    {
        public Address Pointer { get { return GetHostPointer(0); } }

        #region Private
        internal PtrTemplateTraceData(Action<PtrTemplateTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(4, 1)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(4, 1)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "Pointer", Pointer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Pointer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Pointer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<PtrTemplateTraceData> Action;
        #endregion
    }
    public sealed class DispatcherMessageTraceData : TraceEvent
    {
        public DispatcherPriority Priority { get { return (DispatcherPriority)GetInt32At(0); } }
        public string Operation { get { return GetUnicodeStringAt(4); } }

        #region Private
        internal DispatcherMessageTraceData(Action<DispatcherMessageTraceData> action, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.Action = action;
        }
         protected internal override void Dispatch()
        {
            Action(this);
        }
         protected internal override void Validate()
        {
            Debug.Assert(!(Version == 2 && EventDataLength != SkipUnicodeString(4)));
            Debug.Assert(!(Version > 2 && EventDataLength < SkipUnicodeString(4)));
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Priority", Priority);
             XmlAttrib(sb, "Operation", Operation);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Priority", "Operation"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Priority;
                case 1:
                    return Operation;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DispatcherMessageTraceData> Action;
        #endregion
    }
        public enum DispatcherPriority
        {
            Inactive = 0,
            SystemIdle = 1,
            ApplicationIdle = 2,
            ContextIdle = 3,
            Background = 4,
            Input = 5,
            Loaded = 6,
            Render = 7,
            DataBind = 8,
            Normal = 9,
            Send = 10,
        }
        public enum UnexptectedSWFallbackReason
        {
            NoHardwareAvailable = 0,
            ResizeFailed = 1,
            OutOfVideoMemory = 2,
            UnexpectedPrimitiveFallback = 3,
        }
        public enum LayoutSource
        {
            LayoutManager = 0,
            HwndSource_SetLayoutSize = 1,
            HwndSource_WM_SIZE = 2,
        }
        public enum IntermediateRenderTargetReason
        {
            Clip = 0,
            Clip_and_Opacity = 1,
            Effect = 2,
            Opacity = 3,
            OpacityMask = 4,
            OpacityMask_Brush_Realization = 5,
            ShaderEffect_Input = 6,
            Software_Only_Effects = 7,
            TileBrush = 8,
        }

}
