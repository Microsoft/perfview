.assembly extern 'mscorlib'
{
	.publickeytoken = (B7 7A 5C 56 19 34 E0 89)
	.ver 4:0:0:0
}
.assembly 'Microsoft.Diagnostics.Runtime'
{
	.custom instance void ['mscorlib']'System.Runtime.CompilerServices'.'InternalsVisibleToAttribute'::.ctor(string) = (01 00 81 6F 4D 69 63 72 6F 73 6F 66 74 2E 44 69 61 67 6E 6F 73 74 69 63 73 2E 52 75 6E 74 69 6D 65 2E 54 65 73 74 73 2C 20 50 75 62 6C 69 63 4B 65 79 3D 30 30 32 34 30 30 30 30 30 34 38 30 30 30 30 30 39 34 30 30 30 30 30 30 30 36 30 32 30 30 30 30 30 30 32 34 30 30 30 30 35 32 35 33 34 31 33 31 30 30 30 34 30 30 30 30 30 31 30 30 30 31 30 30 30 37 64 31 66 61 35 37 63 34 61 65 64 39 66 30 61 33 32 65 38 34 61 61 30 66 61 65 66 64 30 64 65 39 65 38 66 64 36 61 65 63 38 66 38 37 66 62 30 33 37 36 36 63 38 33 34 63 39 39 39 32 31 65 62 32 33 62 65 37 39 61 64 39 64 35 64 63 63 31 64 64 39 61 64 32 33 36 31 33 32 31 30 32 39 30 30 62 37 32 33 63 66 39 38 30 39 35 37 66 63 34 65 31 37 37 31 30 38 66 63 36 30 37 37 37 34 66 32 39 65 38 33 32 30 65 39 32 65 61 30 35 65 63 65 34 65 38 32 31 63 30 61 35 65 66 65 38 66 31 36 34 35 63 34 63 30 63 39 33 63 31 61 62 39 39 32 38 35 64 36 32 32 63 61 61 36 35 32 63 31 64 66 61 64 36 33 64 37 34 35 64 36 66 32 64 65 35 66 31 37 65 35 65 61 66 30 66 63 34 39 36 33 64 32 36 31 63 38 61 31 32 34 33 36 35 31 38 32 30 36 64 63 30 39 33 33 34 34 64 35 61 64 32 39 33 00 00)
	.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 00 00 00)
	.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 39 34 34 33 32 61 38 65 2D 33 65 30 36 2D 34 37 37 36 2D 62 39 62 32 2D 33 36 38 34 61 36 32 62 62 39 36 61 00 00)
	.permissionset reqmin = (2E 01 80 84 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 53 65 63 75 72 69 74 79 50 65 72 6D 69 73 73 69 6F 6E 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 34 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 15 01 54 02 10 53 6B 69 70 56 65 72 69 66 69 63 61 74 69 6F 6E 01)
	.publickey = (00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 D1 FA 57 C4 AE D9 F0 A3 2E 84 AA 0F AE FD 0D E9 E8 FD 6A EC 8F 87 FB 03 76 6C 83 4C 99 92 1E B2 3B E7 9A D9 D5 DC C1 DD 9A D2 36 13 21 02 90 0B 72 3C F9 80 95 7F C4 E1 77 10 8F C6 07 77 4F 29 E8 32 0E 92 EA 05 EC E4 E8 21 C0 A5 EF E8 F1 64 5C 4C 0C 93 C1 AB 99 28 5D 62 2C AA 65 2C 1D FA D6 3D 74 5D 6F 2D E5 F1 7E 5E AF 0F C4 96 3D 26 1C 8A 12 43 65 18 20 6D C0 93 34 4D 5A D2 93)
	.hash algorithm 0x00008004
	.ver 0:8:4:2
}
.namespace 'Dia2Lib'
{
	.class public interface abstract import 'IDiaDataSource'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 37 39 46 31 42 42 35 46 2D 42 36 36 45 2D 34 38 45 35 2D 42 36 41 39 2D 31 35 34 35 43 33 32 33 43 41 33 44 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void 'loadDataFromPdb'([in] string marshal(lpwstr) 'pdbPath')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'openSession'([out] class 'Dia2Lib'.'IDiaSession'& marshal(interface) 'ppSession')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IDiaEnumLineNumbers'
	{
		.custom instance void ['mscorlib']'System.Reflection'.'DefaultMemberAttribute'::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 46 45 33 30 45 38 37 38 2D 35 34 41 43 2D 34 34 46 31 2D 38 31 42 41 2D 33 39 44 45 39 34 30 46 36 30 35 32 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class 'Dia2Lib'.'IDiaLineNumber' marshal(interface) 'Item'([in] uint32 'index')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Next'([in] uint32 'celt', [out] class 'Dia2Lib'.'IDiaLineNumber'& marshal(interface) 'rgelt', [out] uint32& 'pceltFetched')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IDiaEnumSourceFiles'
	{
		.custom instance void ['mscorlib']'System.Reflection'.'DefaultMemberAttribute'::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 31 30 46 33 44 42 44 39 2D 36 36 34 46 2D 34 34 36 39 2D 42 38 30 38 2D 39 34 37 31 43 37 41 35 30 35 33 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class 'Dia2Lib'.'IDiaSourceFile' marshal(interface) 'Item'([in] uint32 'index')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Next'([in] uint32 'celt', [out] class 'Dia2Lib'.'IDiaSourceFile'& marshal(interface) 'rgelt', [out] uint32& 'pceltFetched')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IDiaEnumSymbolsByAddr'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 36 32 34 42 37 44 39 43 2D 32 34 45 41 2D 34 34 32 31 2D 39 44 30 36 2D 33 42 35 37 37 34 37 31 43 31 46 41 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class 'Dia2Lib'.'IDiaSymbol' marshal(interface) 'symbolByRVA'([in] uint32 'relativeVirtualAddress')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IDiaEnumTables'
	{
		.custom instance void ['mscorlib']'System.Reflection'.'DefaultMemberAttribute'::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 43 36 35 43 32 42 30 41 2D 31 31 35 30 2D 34 44 37 41 2D 41 46 43 43 2D 45 30 35 42 46 33 44 45 45 38 31 45 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class 'Dia2Lib'.'IDiaTable' marshal(interface) 'Item'([in] object marshal(struct) 'index')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Next'(uint32 'celt', class 'Dia2Lib'.'IDiaTable'& marshal(interface) 'rgelt', uint32& 'pceltFetched')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IDiaLineNumber'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 42 33 38 38 45 42 31 34 2D 42 45 34 44 2D 34 32 31 44 2D 41 38 41 31 2D 36 43 46 37 41 42 30 35 37 30 38 36 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Dia2Lib'.'IDiaSourceFile' marshal(interface) 'get_sourceFile'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_lineNumber'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_lineNumberEnd'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_columnNumber'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_columnNumberEnd'()
			runtime internalcall 
		{
		}
		.property uint32 'columnNumber'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 05 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaLineNumber'::'get_columnNumber'()
		}
		.property uint32 'columnNumberEnd'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 06 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaLineNumber'::'get_columnNumberEnd'()
		}
		.property uint32 'lineNumber'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 03 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaLineNumber'::'get_lineNumber'()
		}
		.property uint32 'lineNumberEnd'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 04 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaLineNumber'::'get_lineNumberEnd'()
		}
		.property class 'Dia2Lib'.'IDiaSourceFile' 'sourceFile'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 02 00 00 00 00 00)
			.get instance class 'Dia2Lib'.'IDiaSourceFile' 'Dia2Lib'.'IDiaLineNumber'::'get_sourceFile'()
		}
	}
	.class public interface abstract import 'IDiaSession'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 36 46 43 35 44 36 33 46 2D 30 31 31 45 2D 34 30 43 32 2D 38 44 44 32 2D 45 36 34 38 36 45 39 44 36 42 36 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Dia2Lib'.'IDiaSymbol' marshal(interface) 'get_globalScope'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'getEnumTables'([out] class 'Dia2Lib'.'IDiaEnumTables'& marshal(interface) 'ppEnumTables')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'getSymbolsByAddr'([out] class 'Dia2Lib'.'IDiaEnumSymbolsByAddr'& marshal(interface) 'ppEnumbyAddr')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'findSymbolByToken'([in] uint32 'token', [in] valuetype 'Dia2Lib'.'SymTagEnum' 'symTag', [out] class 'Dia2Lib'.'IDiaSymbol'& marshal(interface) 'ppSymbol')
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'findLinesByRVA'([in] uint32 'rva', [in] uint32 'length', [out] class 'Dia2Lib'.'IDiaEnumLineNumbers'& marshal(interface) 'ppResult')
			runtime internalcall 
		{
		}
		.property class 'Dia2Lib'.'IDiaSymbol' 'globalScope'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 02 00 00 00 00 00)
			.get instance class 'Dia2Lib'.'IDiaSymbol' 'Dia2Lib'.'IDiaSession'::'get_globalScope'()
		}
	}
	.class public interface abstract import 'IDiaSourceFile'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 41 32 45 46 35 33 35 33 2D 46 35 41 38 2D 34 45 42 33 2D 39 30 44 32 2D 43 42 35 32 36 41 43 42 33 43 44 44 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string marshal(bstr) 'get_fileName'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_checksumType'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'get_checksum'([in] uint32 'cbData', [out] uint32& 'pcbData', [out] uint8& 'pbData')
			runtime internalcall 
		{
		}
		.property uint32 'checksumType'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 04 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaSourceFile'::'get_checksumType'()
		}
		.property string 'fileName'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 03 00 00 00 00 00)
			.get instance string 'Dia2Lib'.'IDiaSourceFile'::'get_fileName'()
		}
	}
	.class public interface abstract import 'IDiaSymbol'
	{
		.custom instance void ['mscorlib']'System.Reflection'.'DefaultMemberAttribute'::.ctor(string) = (01 00 0A 73 79 6D 49 6E 64 65 78 49 64 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 43 42 37 38 37 42 32 46 2D 42 44 36 43 2D 34 36 33 35 2D 42 41 35 32 2D 39 33 33 31 32 36 42 44 32 44 43 44 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_symIndexId'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string marshal(bstr) 'get_name'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_relativeVirtualAddress'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['mscorlib']'System'.'Guid' 'get_guid'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_age'()
			runtime internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'get_undecoratedNameEx'([in] uint32 'undecorateOptions', [out] string& marshal(bstr) 'name')
			runtime internalcall 
		{
		}
		.property uint32 'age'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 4B 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaSymbol'::'get_age'()
		}
		.property valuetype ['mscorlib']'System'.'Guid' 'guid'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 2B 00 00 00 00 00)
			.get instance valuetype ['mscorlib']'System'.'Guid' 'Dia2Lib'.'IDiaSymbol'::'get_guid'()
		}
		.property string 'name'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 02 00 00 00 00 00)
			.get instance string 'Dia2Lib'.'IDiaSymbol'::'get_name'()
		}
		.property uint32 'relativeVirtualAddress'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 0A 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaSymbol'::'get_relativeVirtualAddress'()
		}
		.property uint32 'symIndexId'()
		{
			.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'DispIdAttribute'::.ctor(int32) = (01 00 00 00 00 00 00 00)
			.get instance uint32 'Dia2Lib'.'IDiaSymbol'::'get_symIndexId'()
		}
	}
	.class public interface abstract import 'IDiaTable'
		implements 'Dia2Lib'.'IEnumUnknown'
	{
		.custom instance void ['mscorlib']'System.Reflection'.'DefaultMemberAttribute'::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 34 41 35 39 46 42 37 37 2D 41 42 41 43 2D 34 36 39 42 2D 41 33 30 42 2D 39 45 43 43 38 35 42 46 45 46 31 34 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object marshal(iunknown) 'Item'([in] uint32 'index')
			runtime internalcall 
		{
		}
	}
	.class public interface abstract import 'IEnumUnknown'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 30 30 30 30 30 31 30 30 2D 30 30 30 30 2D 30 30 30 30 2D 43 30 30 30 2D 30 30 30 30 30 30 30 30 30 30 34 36 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(int16) = (01 00 01 00 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor() = (01 00 00 00)
	}
	.class public sealed 'SymTagEnum'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'TypeIdentifierAttribute'::.ctor(string, string) = (01 00 24 31 30 36 31 37 33 61 30 2D 30 31 37 33 2D 34 65 35 63 2D 38 34 65 37 2D 65 39 31 35 34 32 32 62 65 39 39 37 12 44 69 61 32 4C 69 62 2E 53 79 6D 54 61 67 45 6E 75 6D 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagAnnotation' = int32(0x00000008)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagArrayType' = int32(0x0000000F)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagBaseClass' = int32(0x00000012)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagBaseInterface' = int32(0x00000021)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagBaseType' = int32(0x00000010)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagBlock' = int32(0x00000006)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCallSite' = int32(0x0000001F)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCallee' = int32(0x00000026)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCaller' = int32(0x00000025)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCompiland' = int32(0x00000002)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCompilandDetails' = int32(0x00000003)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCompilandEnv' = int32(0x00000004)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCustom' = int32(0x0000001A)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagCustomType' = int32(0x0000001C)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagData' = int32(0x00000007)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagDimension' = int32(0x0000001E)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagEnum' = int32(0x0000000C)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagExe' = int32(0x00000001)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFriend' = int32(0x00000013)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFuncDebugEnd' = int32(0x00000016)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFuncDebugStart' = int32(0x00000015)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFunction' = int32(0x00000005)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFunctionArgType' = int32(0x00000014)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagFunctionType' = int32(0x0000000D)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagHLSLType' = int32(0x00000024)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagInlineSite' = int32(0x00000020)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagLabel' = int32(0x00000009)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagManagedType' = int32(0x0000001D)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagMatrixType' = int32(0x00000023)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagMax' = int32(0x00000027)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagNull' = int32(0x00000000)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagPointerType' = int32(0x0000000E)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagPublicSymbol' = int32(0x0000000A)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagThunk' = int32(0x0000001B)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagTypedef' = int32(0x00000011)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagUDT' = int32(0x0000000B)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagUsingNamespace' = int32(0x00000017)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagVTable' = int32(0x00000019)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagVTableShape' = int32(0x00000018)
		.field static public literal valuetype 'Dia2Lib'.'SymTagEnum' 'SymTagVectorType' = int32(0x00000022)
	}
}
.namespace 'Microsoft.Diagnostics.Runtime'
{
	.class public sealed 'Architecture'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'Amd64' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'Arm' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'Unknown' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'X86' = int32(0x00000001)
	}
	.class public 'AsyncMemoryReadResult'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot specialname 
			instance class ['mscorlib']'System.Threading'.'EventWaitHandle' 'get_Complete'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_Complete'(class ['mscorlib']'System.Threading'.'EventWaitHandle' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Address'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_Address'(uint64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_BytesRequested'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_BytesRequested'(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_BytesRead'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_BytesRead'(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint8[] 'get_Result'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_Result'(uint8[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(uint64 'addr', int32 'requested')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.field family int32 modreq(['mscorlib']'System.Runtime.CompilerServices'.'IsVolatile') 'm_read'
		.field family uint8[] modreq(['mscorlib']'System.Runtime.CompilerServices'.'IsVolatile') 'm_result'
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'get_Address'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'set_Address'(uint64)
		}
		.property instance int32 'BytesRead'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'get_BytesRead'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'set_BytesRead'(int32)
		}
		.property instance int32 'BytesRequested'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'get_BytesRequested'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'set_BytesRequested'(int32)
		}
		.property instance class ['mscorlib']'System.Threading'.'EventWaitHandle' 'Complete'()
		{
			.get instance class ['mscorlib']'System.Threading'.'EventWaitHandle' 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'get_Complete'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'set_Complete'(class ['mscorlib']'System.Threading'.'EventWaitHandle')
		}
		.property instance uint8[] 'Result'()
		{
			.get instance uint8[] 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'get_Result'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult'::'set_Result'(uint8[])
		}
	}
	.class public sealed 'AttachFlag'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'AttachFlag' 'Invasive' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'AttachFlag' 'NonInvasive' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'AttachFlag' 'Passive' = int32(0x00000002)
	}
	.class public abstract 'BlockingObject'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Object'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_Taken'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_RecursionCount'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'get_Owner'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_HasSingleOwner'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'get_Owners'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'get_Waiters'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'get_Reason'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance bool 'HasSingleOwner'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_HasSingleOwner'()
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Object'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'Owner'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Owner'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Owners'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Owners'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'Reason'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Reason'()
		}
		.property instance int32 'RecursionCount'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_RecursionCount'()
		}
		.property instance bool 'Taken'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Taken'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Waiters'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Microsoft.Diagnostics.Runtime'.'BlockingObject'::'get_Waiters'()
		}
	}
	.class public sealed 'BlockingReason'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'Monitor' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'MonitorWait' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'None' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'ReaderAcquired' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'ThreadJoin' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'Unknown' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'WaitAll' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'WaitAny' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'WaitOne' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'BlockingReason' 'WriterAcquired' = int32(0x00000009)
	}
	.class public abstract 'CcwData'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_IUnknown'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Object'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Handle'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_RefCount'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'get_Interfaces'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Handle'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'CcwData'::'get_Handle'()
		}
		.property instance uint64 'IUnknown'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'CcwData'::'get_IUnknown'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'Interfaces'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'Microsoft.Diagnostics.Runtime'.'CcwData'::'get_Interfaces'()
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'CcwData'::'get_Object'()
		}
		.property instance int32 'RefCount'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'CcwData'::'get_RefCount'()
		}
	}
	.class public abstract 'ClrAppDomain'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Address'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_Id'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrModule'> 'get_Modules'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_ConfigurationFile'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_AppBase'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_Address'()
		}
		.property instance string 'AppBase'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_AppBase'()
		}
		.property instance string 'ConfigurationFile'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_ConfigurationFile'()
		}
		.property instance int32 'Id'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_Id'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrModule'> 'Modules'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrModule'> 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_Modules'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'::'get_Name'()
		}
	}
	.class public 'ClrDiagnosticsException'
		extends ['mscorlib']'System'.'Exception'
	{
		.class nested public sealed 'HR'
			extends ['mscorlib']'System'.'Enum'
		{
			.field public rtspecialname specialname int32 'value__'
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'ApplicationError' = int32(0x81250007)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'CrashDumpError' = int32(0x81250006)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'DacError' = int32(0x81250004)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'DataRequestError' = int32(0x81250003)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'DebuggerError' = int32(0x81250002)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'RevisionError' = int32(0x81250005)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'RuntimeUninitialized' = int32(0x81250001)
			.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'/'HR' 'UnknownError' = int32(0x81250000)
		}
		.method public hidebysig specialname 
			instance int32 'get_HResult'()
		{
			ret
		}
		.property instance int32 'HResult'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrDiagnosticsException'::'get_HResult'()
		}
	}
	.class public sealed 'ClrElementType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Array' = int32(0x00000014)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Boolean' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Char' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Class' = int32(0x00000012)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Double' = int32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Float' = int32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'FunctionPointer' = int32(0x0000001B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Int16' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Int32' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Int64' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Int8' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'NativeInt' = int32(0x00000018)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'NativeUInt' = int32(0x00000019)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Object' = int32(0x0000001C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Pointer' = int32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'SZArray' = int32(0x0000001D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'String' = int32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Struct' = int32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'UInt16' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'UInt32' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'UInt64' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'UInt8' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Unknown' = int32(0x00000000)
	}
	.class public abstract 'ClrException'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Message'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Address'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'get_Inner'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_HResult'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'get_StackTrace'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_Address'()
		}
		.property instance int32 'HResult'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_HResult'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'Inner'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_Inner'()
		}
		.property instance string 'Message'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_Message'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'StackTrace'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_StackTrace'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrException'::'get_Type'()
		}
	}
	.class public abstract 'ClrField'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'get_ElementType'()
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsPrimitive'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsValueClass'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsObjectReference'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_Size'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPublic'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPrivate'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsInternal'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsProtected'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_HasSimpleValue'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 'get_Offset'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'ElementType'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_ElementType'()
		}
		.property instance bool 'HasSimpleValue'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_HasSimpleValue'()
		}
		.property instance bool 'IsInternal'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_IsInternal'()
		}
		.property instance bool 'IsPrivate'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_IsPrivate'()
		}
		.property instance bool 'IsProtected'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_IsProtected'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_IsPublic'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_Name'()
		}
		.property instance int32 'Offset'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_Offset'()
		}
		.property instance int32 'Size'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_Size'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrField'::'get_Type'()
		}
	}
	.class public sealed 'ClrFlavor'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'CoreCLR' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'Desktop' = int32(0x00000000)
	}
	.class public 'ClrHandle'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance uint64 'get_Address'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Address'(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_Object'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Object'(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Type'(class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Strong'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'get_HandleType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_HandleType'(valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_RefCount'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_RefCount'(uint32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_DependentTarget'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_DependentTarget'(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_DependentType'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_DependentType'(class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'get_AppDomain'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_AppDomain'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'value')
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_Address'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_Address'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'AppDomain'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_AppDomain'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_AppDomain'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain')
		}
		.property instance uint64 'DependentTarget'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_DependentTarget'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_DependentTarget'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'DependentType'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_DependentType'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_DependentType'(class 'Microsoft.Diagnostics.Runtime'.'ClrType')
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'HandleType'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_HandleType'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_HandleType'(valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType')
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_Object'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_Object'(uint64)
		}
		.property instance uint32 'RefCount'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_RefCount'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_RefCount'(uint32)
		}
		.property instance bool 'Strong'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_Strong'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'get_Type'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrHandle'::'set_Type'(class 'Microsoft.Diagnostics.Runtime'.'ClrType')
		}
	}
	.class public abstract 'ClrHeap'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'GetObjectType'(uint64 'objRef')
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'GetExceptionObject'(uint64 'objRef')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime' 'GetRuntime'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrSegment'> 'get_Segments'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrRoot'> 'EnumerateRoots'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'GetTypeByIndex'(int32 'index')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'GetTypeByName'(string 'name')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_TypeIndexLimit'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrRoot'> 'EnumerateRoots'(bool 'enumerateStatics')
		{
		}
		.method public virtual hidebysig newslot 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrType'> 'EnumerateTypes'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<uint64> 'EnumerateFinalizableObjects'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'BlockingObject'> 'EnumerateBlockingObjects'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_CanWalkHeap'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<uint64> 'EnumerateObjects'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_TotalHeapSize'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetSizeByGen'(int32 'gen')
		{
		}
		.method public hidebysig 
			instance int32 'GetGeneration'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrSegment' 'GetSegmentByAddress'(uint64 'objRef')
		{
		}
		.method public hidebysig 
			instance bool 'IsInHeap'(uint64 'address')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_PointerSize'()
		{
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 'ReadMemory'(uint64 'address', uint8[] 'buffer', int32 'offset', int32 'count')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadPointer'(uint64 'addr', [out] uint64& 'value')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance bool 'CanWalkHeap'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrHeap'::'get_CanWalkHeap'()
		}
		.property instance int32 'PointerSize'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrHeap'::'get_PointerSize'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrSegment'> 'Segments'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrSegment'> 'Microsoft.Diagnostics.Runtime'.'ClrHeap'::'get_Segments'()
		}
		.property instance uint64 'TotalHeapSize'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrHeap'::'get_TotalHeapSize'()
		}
		.property instance int32 'TypeIndexLimit'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrHeap'::'get_TypeIndexLimit'()
		}
	}
	.class public serializable 'ClrInfo'
		extends ['mscorlib']'System'.'Object'
		implements ['mscorlib']'System'.'IComparable'
	{
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'get_Version'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Version'(valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'get_Flavor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Flavor'(valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo' 'get_DacInfo'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_DacInfo'(class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo' 'value')
		{
			ret
		}
		.method public hidebysig 
			instance string 'TryGetDacLocation'()
		{
			ret
		}
		.method public hidebysig 
			instance string 'TryDownloadDac'(class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'notification')
		{
			ret
		}
		.method public hidebysig 
			instance string 'TryDownloadDac'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 'CompareTo'(object 'obj')
		{
			ret
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo' 'DacInfo'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo' 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'get_DacInfo'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'set_DacInfo'(class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo')
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'Flavor'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor' 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'get_Flavor'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'set_Flavor'(valuetype 'Microsoft.Diagnostics.Runtime'.'ClrFlavor')
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'Version'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'get_Version'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrInfo'::'set_Version'(valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo')
		}
	}
	.class public abstract 'ClrInstanceField'
		extends 'Microsoft.Diagnostics.Runtime'.'ClrField'
	{
		.method public virtual hidebysig newslot 
			instance object 'GetFieldValue'(uint64 'objRef')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetFieldValue'(uint64 'objRef', bool 'interior')
		{
		}
		.method public virtual hidebysig newslot 
			instance uint64 'GetFieldAddress'(uint64 'objRef')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetFieldAddress'(uint64 'objRef', bool 'interior')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
	}
	.class public abstract 'ClrInterface'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrInterface' 'get_BaseInterface'()
		{
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool 'Equals'(object 'obj')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 'GetHashCode'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrInterface' 'BaseInterface'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrInterface' 'Microsoft.Diagnostics.Runtime'.'ClrInterface'::'get_BaseInterface'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrInterface'::'get_Name'()
		}
	}
	.class public abstract 'ClrMemoryRegion'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance uint64 'get_Address'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Address'(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_Size'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Size'(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'get_Type'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Type'(valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'get_AppDomain'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Module'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_HeapNumber'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void 'set_HeapNumber'(int32 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'get_GCSegmentType'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void 'set_GCSegmentType'(valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string 'ToString'(bool 'detailed')
		{
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_Address'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'set_Address'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'AppDomain'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_AppDomain'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'GCSegmentType'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_GCSegmentType'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'set_GCSegmentType'(valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType')
		}
		.property instance int32 'HeapNumber'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_HeapNumber'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'set_HeapNumber'(int32)
		}
		.property instance string 'Module'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_Module'()
		}
		.property instance uint64 'Size'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_Size'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'set_Size'(uint64)
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'Type'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'get_Type'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'::'set_Type'(valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType')
		}
	}
	.class public sealed 'ClrMemoryRegionType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'CacheEntryHeap' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'DispatchHeap' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'GCSegment' = int32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'HandleTableChunk' = int32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'HighFrequencyLoaderHeap' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'IndcellHeap' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'JitHostCodeHeap' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'JitLoaderCodeHeap' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'LookupHeap' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'LowFrequencyLoaderHeap' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'ModuleLookupTableHeap' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'ModuleThunkHeap' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'ReservedGCSegment' = int32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'ResolveHeap' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegionType' 'StubHeap' = int32(0x00000002)
	}
	.class public abstract 'ClrMethod'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string 'GetFullSignature'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_NativeCode'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'SourceLocation' 'GetSourceLocationForOffset'(uint64 'nativeOffset')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'get_CompilationType'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ILToNativeMap'[] 'get_ILOffsetMap'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_MetadataToken'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPublic'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPrivate'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsInternal'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsProtected'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsStatic'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsFinal'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPInvoke'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsSpecialName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsRTSpecialName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsVirtual'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsAbstract'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'CompilationType'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_CompilationType'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ILToNativeMap'[] 'ILOffsetMap'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ILToNativeMap'[] 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_ILOffsetMap'()
		}
		.property instance bool 'IsAbstract'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsAbstract'()
		}
		.property instance bool 'IsFinal'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsFinal'()
		}
		.property instance bool 'IsInternal'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsInternal'()
		}
		.property instance bool 'IsPInvoke'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsPInvoke'()
		}
		.property instance bool 'IsPrivate'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsPrivate'()
		}
		.property instance bool 'IsProtected'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsProtected'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsPublic'()
		}
		.property instance bool 'IsRTSpecialName'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsRTSpecialName'()
		}
		.property instance bool 'IsSpecialName'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsSpecialName'()
		}
		.property instance bool 'IsStatic'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsStatic'()
		}
		.property instance bool 'IsVirtual'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_IsVirtual'()
		}
		.property instance uint32 'MetadataToken'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_MetadataToken'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_Name'()
		}
		.property instance uint64 'NativeCode'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_NativeCode'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrMethod'::'get_Type'()
		}
	}
	.class public abstract 'ClrModule'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPdbLoaded'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsMatchingPdb'(string 'pdbPath')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'LoadPdb'(string 'path')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string 'TryDownloadPdb'(class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'notification')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'SourceLocation' 'GetSourceInformation'(uint32 'mdMethodToken', int32 'ilOffset')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'SourceLocation' 'GetSourceInformation'(class 'Microsoft.Diagnostics.Runtime'.'ClrMethod' 'method', int32 'ilOffset')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_AssemblyName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_AssemblyId'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsDynamic'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsFile'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_FileName'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_ImageBase'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Size'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrType'> 'EnumerateTypes'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_MetadataAddress'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_MetadataLength'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object 'get_MetadataImport'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype ['mscorlib']'System.Diagnostics'.'DebuggableAttribute'/'DebuggingModes' 'get_DebuggingMode'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'GetTypeByName'(string 'name')
		{
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'AssemblyId'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_AssemblyId'()
		}
		.property instance string 'AssemblyName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_AssemblyName'()
		}
		.property instance valuetype ['mscorlib']'System.Diagnostics'.'DebuggableAttribute'/'DebuggingModes' 'DebuggingMode'()
		{
			.get instance valuetype ['mscorlib']'System.Diagnostics'.'DebuggableAttribute'/'DebuggingModes' 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_DebuggingMode'()
		}
		.property instance string 'FileName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_FileName'()
		}
		.property instance uint64 'ImageBase'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_ImageBase'()
		}
		.property instance bool 'IsDynamic'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_IsDynamic'()
		}
		.property instance bool 'IsFile'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_IsFile'()
		}
		.property instance bool 'IsPdbLoaded'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_IsPdbLoaded'()
		}
		.property instance uint64 'MetadataAddress'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_MetadataAddress'()
		}
		.property instance object 'MetadataImport'()
		{
			.get instance object 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_MetadataImport'()
		}
		.property instance uint64 'MetadataLength'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_MetadataLength'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_Name'()
		}
		.property instance uint64 'Size'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrModule'::'get_Size'()
		}
	}
	.class public abstract 'ClrRoot'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'get_Kind'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_Name'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Object'()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance void 'set_Object'(uint64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Address'()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance void 'set_Address'(uint64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'get_AppDomain'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'get_Thread'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsInterior'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsPinned'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsPossibleFalsePositive'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Address'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'set_Address'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'AppDomain'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_AppDomain'()
		}
		.property instance bool 'IsInterior'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_IsInterior'()
		}
		.property instance bool 'IsPinned'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_IsPinned'()
		}
		.property instance bool 'IsPossibleFalsePositive'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_IsPossibleFalsePositive'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Kind'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Kind'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Name'()
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Object'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'set_Object'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'Thread'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Thread'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrRoot'::'get_Type'()
		}
	}
	.class public abstract 'ClrRuntime'
		extends ['mscorlib']'System'.'Object'
	{
		.class nested public sealed 'RuntimeFlushedCallback'
			extends ['mscorlib']'System'.'MulticastDelegate'
		{
			.method public hidebysig specialname 
				instance void '.ctor'(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void 'Invoke'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime' 'runtime')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class ['mscorlib']'System'.'IAsyncResult' 'BeginInvoke'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime' 'runtime', class ['mscorlib']'System'.'AsyncCallback' 'callback', object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void 'EndInvoke'(class ['mscorlib']'System'.'IAsyncResult' 'result')
				runtime 
			{
			}
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'get_DataTarget'()
		{
		}
		.method public hidebysig specialname 
			instance bool 'get_ServerGC'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void 'set_ServerGC'(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<int32> 'EnumerateGCThreads'()
		{
		}
		.method public hidebysig specialname 
			instance int32 'get_HeapCount'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void 'set_HeapCount'(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_PointerSize'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'> 'get_AppDomains'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'get_Threads'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<uint64> 'EnumerateFinalizerQueue'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadVirtual'(uint64 'address', uint8[] 'buffer', int32 'bytesRequested', [out] int32& 'bytesRead')
		{
			.custom instance void ['mscorlib']'System'.'ObsoleteAttribute'::.ctor(string) = (01 00 17 55 73 65 20 52 65 61 64 4D 65 6D 6F 72 79 20 69 6E 73 74 65 61 64 2E 00 00)
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadMemory'(uint64 'address', uint8[] 'buffer', int32 'bytesRequested', [out] int32& 'bytesRead')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadPointer'(uint64 'address', [out] uint64& 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrHandle'> 'EnumerateHandles'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'GetHeap'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'GetHeap'(class ['mscorlib']'System.IO'.'TextWriter' 'diagnosticLog')
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool' 'GetThreadPool'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrMemoryRegion'> 'EnumerateMemoryRegions'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrMethod' 'GetMethodByAddress'(uint64 'ip')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrModule'> 'EnumerateModules'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Flush'()
		{
		}
		.method public hidebysig specialname 
			instance void 'add_RuntimeFlushed'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'/'RuntimeFlushedCallback' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'remove_RuntimeFlushed'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'/'RuntimeFlushedCallback' 'value')
		{
			ret
		}
		.method family hidebysig 
			instance void 'OnRuntimeFlushed'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.event 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'/'RuntimeFlushedCallback' 'RuntimeFlushed'
		{
			.addon instance void 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'add_RuntimeFlushed'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'/'RuntimeFlushedCallback')
			.removeon instance void 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'remove_RuntimeFlushed'(class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'/'RuntimeFlushedCallback')
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'> 'AppDomains'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain'> 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_AppDomains'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'DataTarget'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_DataTarget'()
		}
		.property instance int32 'HeapCount'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_HeapCount'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'set_HeapCount'(int32)
		}
		.property instance int32 'PointerSize'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_PointerSize'()
		}
		.property instance bool 'ServerGC'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_ServerGC'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'set_ServerGC'(bool)
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Threads'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThread'> 'Microsoft.Diagnostics.Runtime'.'ClrRuntime'::'get_Threads'()
		}
	}
	.class public abstract 'ClrSegment'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Start'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_End'()
		{
		}
		.method public hidebysig specialname 
			instance uint64 'get_Length'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'get_Heap'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_ProcessorAffinity'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Reserved'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Committed'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_ReservedEnd'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_CommittedEnd'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_FirstObject'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint64 'NextObject'(uint64 'objRef')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_Large'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_Ephemeral'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen0Start'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen0Length'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen1Start'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen1Length'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen2Start'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_Gen2Length'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<uint64> 'EnumerateObjects'()
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 'GetGeneration'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Committed'()
		{
			.custom instance void ['mscorlib']'System'.'ObsoleteAttribute'::.ctor(string, bool) = (01 00 18 55 73 65 20 43 6F 6D 6D 69 74 74 65 64 45 6E 64 20 69 6E 73 74 65 61 64 00 00 00)
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Committed'()
		}
		.property instance uint64 'CommittedEnd'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_CommittedEnd'()
		}
		.property instance uint64 'End'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_End'()
		}
		.property instance bool 'Ephemeral'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Ephemeral'()
		}
		.property instance uint64 'FirstObject'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_FirstObject'()
		}
		.property instance uint64 'Gen0Length'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen0Length'()
		}
		.property instance uint64 'Gen0Start'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen0Start'()
		}
		.property instance uint64 'Gen1Length'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen1Length'()
		}
		.property instance uint64 'Gen1Start'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen1Start'()
		}
		.property instance uint64 'Gen2Length'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen2Length'()
		}
		.property instance uint64 'Gen2Start'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Gen2Start'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'Heap'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Heap'()
		}
		.property instance bool 'Large'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Large'()
		}
		.property instance uint64 'Length'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Length'()
		}
		.property instance int32 'ProcessorAffinity'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_ProcessorAffinity'()
		}
		.property instance uint64 'Reserved'()
		{
			.custom instance void ['mscorlib']'System'.'ObsoleteAttribute'::.ctor(string, bool) = (01 00 17 55 73 65 20 52 65 73 65 72 76 65 64 45 6E 64 20 69 6E 73 74 65 61 64 00 00 00)
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Reserved'()
		}
		.property instance uint64 'ReservedEnd'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_ReservedEnd'()
		}
		.property instance uint64 'Start'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrSegment'::'get_Start'()
		}
	}
	.class public abstract 'ClrStackFrame'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_InstructionPointer'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_StackPointer'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrStackFrameType' 'get_Kind'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_DisplayString'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrMethod' 'get_Method'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'SourceLocation' 'GetFileAndLineNumber'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance string 'DisplayString'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'::'get_DisplayString'()
		}
		.property instance uint64 'InstructionPointer'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'::'get_InstructionPointer'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrStackFrameType' 'Kind'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrStackFrameType' 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'::'get_Kind'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrMethod' 'Method'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrMethod' 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'::'get_Method'()
		}
		.property instance uint64 'StackPointer'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'::'get_StackPointer'()
		}
	}
	.class public sealed 'ClrStackFrameType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrStackFrameType' 'ManagedMethod' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'ClrStackFrameType' 'Runtime' = int32(0x00000001)
	}
	.class public abstract 'ClrStaticField'
		extends 'Microsoft.Diagnostics.Runtime'.'ClrField'
	{
		.method public virtual hidebysig newslot abstract 
			instance bool 'IsInitialized'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'appDomain')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetFieldValue'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'appDomain')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetFieldAddress'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'appDomain')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_HasDefaultValue'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object 'GetDefaultValue'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance bool 'HasDefaultValue'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrStaticField'::'get_HasDefaultValue'()
		}
	}
	.class public abstract 'ClrThread'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'GcMode' 'get_GcMode'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsFinalizer'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Address'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsAlive'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_OSThreadId'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_ManagedThreadId'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_AppDomain'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_LockCount'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Teb'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_StackBase'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_StackLimit'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrRoot'> 'EnumerateStackObjects'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrRoot'> 'EnumerateStackObjects'(bool 'includePossiblyDead')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'get_StackTrace'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'get_CurrentException'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsGC'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsDebuggerHelper'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsThreadpoolTimer'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsThreadpoolCompletionPort'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsThreadpoolWorker'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsThreadpoolWait'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsThreadpoolGate'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsSuspendingEE'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsShutdownHelper'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsAbortRequested'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsAborted'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsGCSuspendPending'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsUserSuspended'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsDebugSuspended'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsBackground'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsUnstarted'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsCoInitialized'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsSTA'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsMTA'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'BlockingObject'> 'get_BlockingObjects'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_Address'()
		}
		.property instance uint64 'AppDomain'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_AppDomain'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'BlockingObject'> 'BlockingObjects'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'BlockingObject'> 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_BlockingObjects'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'CurrentException'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrException' 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_CurrentException'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'GcMode' 'GcMode'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'GcMode' 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_GcMode'()
		}
		.property instance bool 'IsAbortRequested'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsAbortRequested'()
		}
		.property instance bool 'IsAborted'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsAborted'()
		}
		.property instance bool 'IsAlive'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsAlive'()
		}
		.property instance bool 'IsBackground'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsBackground'()
		}
		.property instance bool 'IsCoInitialized'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsCoInitialized'()
		}
		.property instance bool 'IsDebugSuspended'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsDebugSuspended'()
		}
		.property instance bool 'IsDebuggerHelper'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsDebuggerHelper'()
		}
		.property instance bool 'IsFinalizer'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsFinalizer'()
		}
		.property instance bool 'IsGC'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsGC'()
		}
		.property instance bool 'IsGCSuspendPending'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsGCSuspendPending'()
		}
		.property instance bool 'IsMTA'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsMTA'()
		}
		.property instance bool 'IsSTA'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsSTA'()
		}
		.property instance bool 'IsShutdownHelper'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsShutdownHelper'()
		}
		.property instance bool 'IsSuspendingEE'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsSuspendingEE'()
		}
		.property instance bool 'IsThreadpoolCompletionPort'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsThreadpoolCompletionPort'()
		}
		.property instance bool 'IsThreadpoolGate'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsThreadpoolGate'()
		}
		.property instance bool 'IsThreadpoolTimer'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsThreadpoolTimer'()
		}
		.property instance bool 'IsThreadpoolWait'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsThreadpoolWait'()
		}
		.property instance bool 'IsThreadpoolWorker'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsThreadpoolWorker'()
		}
		.property instance bool 'IsUnstarted'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsUnstarted'()
		}
		.property instance bool 'IsUserSuspended'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_IsUserSuspended'()
		}
		.property instance uint32 'LockCount'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_LockCount'()
		}
		.property instance int32 'ManagedThreadId'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_ManagedThreadId'()
		}
		.property instance uint32 'OSThreadId'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_OSThreadId'()
		}
		.property instance uint64 'StackBase'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_StackBase'()
		}
		.property instance uint64 'StackLimit'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_StackLimit'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'StackTrace'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStackFrame'> 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_StackTrace'()
		}
		.property instance uint64 'Teb'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ClrThread'::'get_Teb'()
		}
	}
	.class public abstract 'ClrThreadPool'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_TotalThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_RunningThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_IdleThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MinThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MaxThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MinCompletionPorts'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MaxCompletionPorts'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_CpuUtilization'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_FreeCompletionPortCount'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_MaxFreeCompletionPorts'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'NativeWorkItem'> 'EnumerateNativeWorkItems'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ManagedWorkItem'> 'EnumerateManagedWorkItems'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance int32 'CpuUtilization'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_CpuUtilization'()
		}
		.property instance int32 'FreeCompletionPortCount'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_FreeCompletionPortCount'()
		}
		.property instance int32 'IdleThreads'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_IdleThreads'()
		}
		.property instance int32 'MaxCompletionPorts'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_MaxCompletionPorts'()
		}
		.property instance int32 'MaxFreeCompletionPorts'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_MaxFreeCompletionPorts'()
		}
		.property instance int32 'MaxThreads'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_MaxThreads'()
		}
		.property instance int32 'MinCompletionPorts'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_MinCompletionPorts'()
		}
		.property instance int32 'MinThreads'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_MinThreads'()
		}
		.property instance int32 'RunningThreads'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_RunningThreads'()
		}
		.property instance int32 'TotalThreads'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrThreadPool'::'get_TotalThreads'()
		}
	}
	.class public abstract 'ClrThreadStaticField'
		extends 'Microsoft.Diagnostics.Runtime'.'ClrField'
	{
		.method public virtual hidebysig newslot abstract 
			instance object 'GetFieldValue'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'appDomain', class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'thread')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetFieldAddress'(class 'Microsoft.Diagnostics.Runtime'.'ClrAppDomain' 'appDomain', class 'Microsoft.Diagnostics.Runtime'.'ClrThread' 'thread')
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
	}
	.class public abstract 'ClrType'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_Index'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_MetadataToken'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string 'get_Name'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetSize'(uint64 'objRef')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'EnumerateRefsOfObject'(uint64 'objRef', class ['mscorlib']'System'.'Action`2'<uint64,int32> 'action')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'EnumerateRefsOfObjectCarefully'(uint64 'objRef', class ['mscorlib']'System'.'Action`2'<uint64,int32> 'action')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_ContainsPointers'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'get_Heap'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsRuntimeType'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'GetRuntimeType'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrModule' 'get_Module'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'get_ElementType'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsPrimitive'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsValueClass'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsObjectReference'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInterface'> 'get_Interfaces'()
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsFinalizeSuppressed'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsFinalizable'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPublic'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsPrivate'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsInternal'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsProtected'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsAbstract'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsSealed'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsInterface'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInstanceField'> 'get_Fields'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStaticField'> 'get_StaticFields'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThreadStaticField'> 'get_ThreadStaticFields'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrMethod'> 'get_Methods'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'GetFieldForOffset'(int32 'fieldOffset', bool 'inner', [out] class 'Microsoft.Diagnostics.Runtime'.'ClrInstanceField'& 'childField', [out] int32& 'childFieldOffset')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrInstanceField' 'GetFieldByName'(string 'name')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrStaticField' 'GetStaticFieldByName'(string 'name')
		{
		}
		.method public virtual hidebysig newslot 
			instance object 'GetFieldValue'(uint64 'obj', class ['mscorlib']'System.Collections.Generic'.'ICollection`1'<string> 'fields')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'TryGetFieldValue'(uint64 'obj', class ['mscorlib']'System.Collections.Generic'.'ICollection`1'<string> 'fields', [out] object& 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_BaseType'()
		{
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsCCW'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'CcwData' 'GetCCWData'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'IsRCW'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Diagnostics.Runtime'.'RcwData' 'GetRCWData'(uint64 'obj')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsArray'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_ArrayComponentType'()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetArrayLength'(uint64 'objRef')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetArrayElementAddress'(uint64 'objRef', int32 'index')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object 'GetArrayElementValue'(uint64 'objRef', int32 'index')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_ElementSize'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_BaseSize'()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsString'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsFree'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsException'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_IsEnum'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'GetEnumElementType'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<string> 'GetEnumNames'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string 'GetEnumName'(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string 'GetEnumName'(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'TryGetEnumValue'(string 'name', [out] int32& 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool 'TryGetEnumValue'(string 'name', [out] object& 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool 'get_HasSimpleValue'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object 'GetValue'(uint64 'address')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'ArrayComponentType'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_ArrayComponentType'()
		}
		.property instance int32 'BaseSize'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_BaseSize'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'BaseType'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_BaseType'()
		}
		.property instance bool 'ContainsPointers'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_ContainsPointers'()
		}
		.property instance int32 'ElementSize'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_ElementSize'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'ElementType'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'ClrElementType' 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_ElementType'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInstanceField'> 'Fields'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInstanceField'> 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Fields'()
		}
		.property instance bool 'HasSimpleValue'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_HasSimpleValue'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'Heap'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrHeap' 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Heap'()
		}
		.property instance int32 'Index'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Index'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInterface'> 'Interfaces'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInterface'> 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Interfaces'()
		}
		.property instance bool 'IsAbstract'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsAbstract'()
		}
		.property instance bool 'IsArray'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsArray'()
		}
		.property instance bool 'IsEnum'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsEnum'()
		}
		.property instance bool 'IsException'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsException'()
		}
		.property instance bool 'IsFinalizable'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsFinalizable'()
		}
		.property instance bool 'IsFree'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsFree'()
		}
		.property instance bool 'IsInterface'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsInterface'()
		}
		.property instance bool 'IsInternal'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsInternal'()
		}
		.property instance bool 'IsObjectReference'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsObjectReference'()
		}
		.property instance bool 'IsPrimitive'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsPrimitive'()
		}
		.property instance bool 'IsPrivate'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsPrivate'()
		}
		.property instance bool 'IsProtected'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsProtected'()
		}
		.property instance bool 'IsPublic'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsPublic'()
		}
		.property instance bool 'IsRuntimeType'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsRuntimeType'()
		}
		.property instance bool 'IsSealed'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsSealed'()
		}
		.property instance bool 'IsString'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsString'()
		}
		.property instance bool 'IsValueClass'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_IsValueClass'()
		}
		.property instance uint32 'MetadataToken'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_MetadataToken'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrMethod'> 'Methods'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrMethod'> 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Methods'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrModule' 'Module'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrModule' 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Module'()
		}
		.property instance string 'Name'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_Name'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStaticField'> 'StaticFields'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrStaticField'> 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_StaticFields'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThreadStaticField'> 'ThreadStaticFields'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrThreadStaticField'> 'Microsoft.Diagnostics.Runtime'.'ClrType'::'get_ThreadStaticFields'()
		}
	}
	.class public abstract 'ComInterfaceData'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_InterfacePointer'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'InterfacePointer'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'::'get_InterfacePointer'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'::'get_Type'()
		}
	}
	.class public sealed 'CrashDumpReader'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'CrashDumpReader' 'ClrMD' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'CrashDumpReader' 'DbgEng' = int32(0x00000000)
	}
	.class public abstract 'DataTarget'
		extends ['mscorlib']'System'.'Object'
		implements ['mscorlib']'System'.'IDisposable'
	{
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'LoadCrashDump'(string 'fileName')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'LoadCrashDump'(string 'fileName', valuetype 'Microsoft.Diagnostics.Runtime'.'CrashDumpReader' 'dumpReader')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'CreateFromDataReader'(class 'Microsoft.Diagnostics.Runtime'.'IDataReader' 'reader')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'CreateFromDebuggerInterface'(class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' 'client')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'AttachToProcess'(int32 'pid', uint32 'msecTimeout')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime'.'DataTarget' 'AttachToProcess'(int32 'pid', uint32 'msecTimeout', valuetype 'Microsoft.Diagnostics.Runtime'.'AttachFlag' 'attachFlag')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'get_DefaultSymbolNotification'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_DefaultSymbolNotification'(class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsMinidump'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'SetSymbolPath'(string 'path')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'ClearSymbolPath'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'AppendSymbolPath'(string 'path')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string 'GetSymbolPath'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'get_Architecture'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInfo'> 'get_ClrVersions'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_PointerSize'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadProcessMemory'(uint64 'address', uint8[] 'buffer', int32 'bytesRequested', [out] int32& 'bytesRead')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime' 'CreateRuntime'(string 'dacFileName')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrRuntime' 'CreateRuntime'(object 'clrDataProcess')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' 'get_DebuggerInterface'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'> 'EnumerateModules'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Dispose'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'Architecture'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_Architecture'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInfo'> 'ClrVersions'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ClrInfo'> 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_ClrVersions'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' 'DebuggerInterface'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_DebuggerInterface'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'DefaultSymbolNotification'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification' 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_DefaultSymbolNotification'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'set_DefaultSymbolNotification'(class 'Microsoft.Diagnostics.Runtime'.'ISymbolNotification')
		}
		.property instance bool 'IsMinidump'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_IsMinidump'()
		}
		.property instance uint32 'PointerSize'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'DataTarget'::'get_PointerSize'()
		}
	}
	.class public sealed 'GCRootKind'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'AsyncPinning' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Finalizer' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'LocalVar' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Max' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Pinning' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'StaticVar' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Strong' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'ThreadStaticVar' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCRootKind' 'Weak' = int32(0x00000004)
	}
	.class public sealed 'GCSegmentType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'Ephemeral' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'LargeObject' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GCSegmentType' 'Regular' = int32(0x00000001)
	}
	.class public sealed 'GcMode'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GcMode' 'Cooperative' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'GcMode' 'Preemptive' = int32(0x00000001)
	}
	.class public sealed 'HandleType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'AsyncPinned' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'Dependent' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'Pinned' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'RefCount' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'SizedRef' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'Strong' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'WeakLong' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'HandleType' 'WeakShort' = int32(0x00000000)
	}
	.class public interface abstract 'IDataReader'
	{
		.method public virtual hidebysig newslot abstract 
			instance void 'Close'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'Flush'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'Architecture' 'GetArchitecture'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint32 'GetPointerSize'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'> 'EnumerateModules'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'GetVersionInfo'(uint64 'baseAddress', [out] valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo'& 'version')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadMemory'(uint64 'address', uint8[] 'buffer', int32 'bytesRequested', [out] int32& 'bytesRead')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'ReadMemory'(uint64 'address', native int 'buffer', int32 'bytesRequested', [out] int32& 'bytesRead')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_CanReadAsync'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'Microsoft.Diagnostics.Runtime'.'AsyncMemoryReadResult' 'ReadMemoryAsync'(uint64 'address', int32 'bytesRequested')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_IsMinidump'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'GetThreadTeb'(uint32 'thread')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class ['mscorlib']'System.Collections.Generic'.'IEnumerable`1'<uint32> 'EnumerateAllThreads'()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'VirtualQuery'(uint64 'addr', [out] valuetype 'Microsoft.Diagnostics.Runtime'.'VirtualQueryData'& 'vq')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'GetThreadContext'(uint32 'threadID', uint32 'contextFlags', uint32 'contextSize', native int 'context')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool 'GetThreadContext'(uint32 'threadID', uint32 'contextFlags', uint32 'contextSize', uint8[] 'context')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 'ReadPointerUnsafe'(uint64 'addr')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint32 'ReadDwordUnsafe'(uint64 'addr')
		{
		}
		.property instance bool 'CanReadAsync'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'IDataReader'::'get_CanReadAsync'()
		}
		.property instance bool 'IsMinidump'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'IDataReader'::'get_IsMinidump'()
		}
	}
	.class public sequential sealed 'ILToNativeMap'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.field public int32 'ILOffset'
		.field public uint64 'StartAddress'
		.field public uint64 'EndAddress'

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public interface abstract 'ISymbolNotification'
	{
		.method public virtual hidebysig newslot abstract 
			instance void 'FoundSymbolInCache'(string 'localPath')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'ProbeFailed'(string 'url')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'FoundSymbolOnPath'(string 'url')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'DownloadProgress'(int32 'bytesDownloaded')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'DownloadComplete'(string 'localPath', bool 'requiresDecompression')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void 'DecompressionComplete'(string 'localPath')
		{
		}
	}
	.class public abstract 'ManagedWorkItem'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Object'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'get_Type'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ManagedWorkItem'::'get_Object'()
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Type'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'ClrType' 'Microsoft.Diagnostics.Runtime'.'ManagedWorkItem'::'get_Type'()
		}
	}
	.class public sealed 'MethodCompilationType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'Jit' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'Ngen' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'MethodCompilationType' 'None' = int32(0x00000000)
	}
	.class public 'ModuleInfo'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot specialname 
			instance uint64 'get_ImageBase'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_ImageBase'(uint64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint32 'get_FileSize'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_FileSize'(uint32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint32 'get_TimeStamp'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_TimeStamp'(uint32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string 'get_FileName'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_FileName'(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Microsoft.Diagnostics.Runtime'.'PdbInfo' 'get_Pdb'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_Pdb'(class 'Microsoft.Diagnostics.Runtime'.'PdbInfo' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'get_Version'()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void 'set_Version'(valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(class 'Microsoft.Diagnostics.Runtime'.'IDataReader' 'reader')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance string 'FileName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_FileName'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_FileName'(string)
		}
		.property instance uint32 'FileSize'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_FileSize'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_FileSize'(uint32)
		}
		.property instance uint64 'ImageBase'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_ImageBase'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_ImageBase'(uint64)
		}
		.property instance class 'Microsoft.Diagnostics.Runtime'.'PdbInfo' 'Pdb'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime'.'PdbInfo' 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_Pdb'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_Pdb'(class 'Microsoft.Diagnostics.Runtime'.'PdbInfo')
		}
		.property instance uint32 'TimeStamp'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_TimeStamp'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_TimeStamp'(uint32)
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'Version'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo' 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'get_Version'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'ModuleInfo'::'set_Version'(valuetype 'Microsoft.Diagnostics.Runtime'.'VersionInfo')
		}
	}
	.class public abstract 'NativeWorkItem'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'get_Kind'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Callback'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Data'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint64 'Callback'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'NativeWorkItem'::'get_Callback'()
		}
		.property instance uint64 'Data'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'NativeWorkItem'::'get_Data'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'Kind'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'Microsoft.Diagnostics.Runtime'.'NativeWorkItem'::'get_Kind'()
		}
	}
	.class public 'PdbInfo'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance valuetype ['mscorlib']'System'.'Guid' 'get_Guid'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Guid'(valuetype ['mscorlib']'System'.'Guid' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Revision'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Revision'(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_FileName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_FileName'(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance string 'FileName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'get_FileName'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'set_FileName'(string)
		}
		.property instance valuetype ['mscorlib']'System'.'Guid' 'Guid'()
		{
			.get instance valuetype ['mscorlib']'System'.'Guid' 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'get_Guid'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'set_Guid'(valuetype ['mscorlib']'System'.'Guid')
		}
		.property instance int32 'Revision'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'get_Revision'()
			.set instance void 'Microsoft.Diagnostics.Runtime'.'PdbInfo'::'set_Revision'(int32)
		}
	}
	.class public abstract 'RcwData'
		extends ['mscorlib']'System'.'Object'
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_IUnknown'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_VTablePointer'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 'get_RefCount'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_Object'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool 'get_Disconnected'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint32 'get_CreatorThread'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance uint64 'get_WinRTObject'()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'get_Interfaces'()
		{
		}
		.method family hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.property instance uint32 'CreatorThread'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_CreatorThread'()
		}
		.property instance bool 'Disconnected'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_Disconnected'()
		}
		.property instance uint64 'IUnknown'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_IUnknown'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'Interfaces'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'IList`1'<class 'Microsoft.Diagnostics.Runtime'.'ComInterfaceData'> 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_Interfaces'()
		}
		.property instance uint64 'Object'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_Object'()
		}
		.property instance int32 'RefCount'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_RefCount'()
		}
		.property instance uint64 'VTablePointer'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_VTablePointer'()
		}
		.property instance uint64 'WinRTObject'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime'.'RcwData'::'get_WinRTObject'()
		}
	}
	.class public 'SourceLocation'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance string 'get_FilePath'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_LineNumber'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_LineNumberEnd'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_ColStart'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_ColEnd'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.property instance int32 'ColEnd'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'SourceLocation'::'get_ColEnd'()
		}
		.property instance int32 'ColStart'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'SourceLocation'::'get_ColStart'()
		}
		.property instance string 'FilePath'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime'.'SourceLocation'::'get_FilePath'()
		}
		.property instance int32 'LineNumber'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'SourceLocation'::'get_LineNumber'()
		}
		.property instance int32 'LineNumberEnd'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime'.'SourceLocation'::'get_LineNumberEnd'()
		}
	}
	.class public sequential sealed 'VersionInfo'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.field public int32 'Major'
		.field public int32 'Minor'
		.field public int32 'Revision'
		.field public int32 'Patch'
	}
	.class public sequential sealed 'VirtualQueryData'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(uint64 'addr', uint64 'size')
		{
			ret
		}
		.field public uint64 'BaseAddress'
		.field public uint64 'Size'
	}
	.class public sealed 'WorkItemKind'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'AsyncCallback' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'AsyncTimer' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'QueueUserWorkItem' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'TimerDelete' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime'.'WorkItemKind' 'Unknown' = int32(0x00000000)
	}
}
.namespace 'Microsoft.Diagnostics.Runtime.Interop'
{
	.class public sealed 'BUS_DATA_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'CbusConfiguration' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'Cmos' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'ConfigurationSpaceUndefined' = int32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'EisaConfiguration' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'MPIConfiguration' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'MPSAConfiguration' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'MaximumBusDataType' = int32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'NuBusConfiguration' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'PCIConfiguration' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'PCMCIAConfiguration' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'PNPISAConfiguration' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'Pos' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'SgiInternalConfiguration' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'VMEConfiguration' = int32(0x00000005)
	}
	.class public sealed 'CODE_PAGE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'ACP' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'MACCP' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'OEMCP' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'SYMBOL' = uint32(0x0000002A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'THREAD_ACP' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'UTF7' = uint32(0x0000FDE8)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'UTF8' = uint32(0x0000FDE9)
	}
	.class public sealed 'DEBUG_ADDSYNTHMOD'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'DEFAULT' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_ADDSYNTHSYM'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'DEFAULT' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_ASMOPT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'IGNORE_OUTPUT_WIDTH' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'NO_CODE_BYTES' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'SOURCE_LINE_NUMBER' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'VERBOSE' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_ATTACH'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'EXDI_DRIVER' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'EXISTING' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'INVASIVE_NO_INITIAL_BREAK' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'INVASIVE_RESUME_PROCESS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'KERNEL_CONNECTION' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'LOCAL_KERNEL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'NONINVASIVE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'NONINVASIVE_ALLOW_PARTIAL' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'NONINVASIVE_NO_SUSPEND' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_BREAKPOINT_ACCESS_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'EXECUTE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'IO' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'READ' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'WRITE' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_BREAKPOINT_FLAG'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'ADDER_ONLY' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'DEFERRED' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'ENABLED' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'GO_ONLY' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'ONE_SHOT' = uint32(0x00000010)
	}
	.class public sequential sealed 'DEBUG_BREAKPOINT_PARAMETERS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'Offset'
		.field public uint32 'Id'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'BreakType'
		.field public uint32 'ProcType'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags'
		.field public uint32 'DataSize'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'DataAccessType'
		.field public uint32 'PassCount'
		.field public uint32 'CurrentPassCount'
		.field public uint32 'MatchThread'
		.field public uint32 'CommandSize'
		.field public uint32 'OffsetExpressionSize'
	}
	.class public sealed 'DEBUG_BREAKPOINT_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'CODE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'DATA' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'TIME' = uint32(0x00000002)
	}
	.class public sequential sealed 'DEBUG_CACHED_SYMBOL_INFO'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'ModBase'
		.field public uint64 'Arg1'
		.field public uint64 'Arg2'
		.field public uint32 'Id'
		.field public uint32 'Arg3'
	}
	.class public sealed 'DEBUG_CDS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'ALL' = uint32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'DATA' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'REFRESH' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'REGISTERS' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_CDS_REFRESH'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'ADDBREAKPOINT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'EVALUATE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'EXECUTE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'EXECUTECOMMANDFILE' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'INLINESTEP' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'INLINESTEP_PSEUDO' = uint32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'REMOVEBREAKPOINT' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETSCOPE' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETSCOPEFRAMEBYINDEX' = uint32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETSCOPEFROMJITDEBUGINFO' = uint32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETSCOPEFROMSTOREDEVENT' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETVALUE' = uint32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'SETVALUE2' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'WRITEPHYSICAL' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'WRITEPHYSICAL2' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'WRITEVIRTUAL' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS_REFRESH' 'WRITEVIRTUALUNCACHED' = uint32(0x00000007)
	}
	.class public sealed 'DEBUG_CES'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'ALL' = uint32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'ASSEMBLY_OPTIONS' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'BREAKPOINTS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'CODE_LEVEL' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'CURRENT_THREAD' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'EFFECTIVE_PROCESSOR' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'ENGINE_OPTIONS' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'EVENT_FILTERS' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'EXECUTION_STATUS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'EXPRESSION_SYNTAX' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'EXTENSIONS' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'LOG_FILE' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'PROCESS_OPTIONS' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'RADIX' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'SYSTEMS' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'TEXT_REPLACEMENTS' = uint32(0x00004000)
	}
	.class public sealed 'DEBUG_CES_EXECUTION_STATUS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint64 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES_EXECUTION_STATUS' 'INSIDE_WAIT' = uint64(0x100000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES_EXECUTION_STATUS' 'WAIT_TIMEOUT' = uint64(0x200000000)
	}
	.class public sealed 'DEBUG_CLASS'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'IMAGE_FILE' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'KERNEL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'UNINITIALIZED' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'USER_WINDOWS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_CLASS_QUALIFIER'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_CONNECTION' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_DUMP' = uint32(0x00000401)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_EXDI_DRIVER' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_FULL_DUMP' = uint32(0x00000402)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_IDNA' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_LOCAL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'KERNEL_SMALL_DUMP' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'USER_WINDOWS_DUMP' = uint32(0x00000402)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'USER_WINDOWS_IDNA' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'USER_WINDOWS_PROCESS' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'USER_WINDOWS_PROCESS_SERVER' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER' 'USER_WINDOWS_SMALL_DUMP' = uint32(0x00000400)
	}
	.class public sealed 'DEBUG_CONNECT_SESSION'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'NO_ANNOUNCE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'NO_VERSION' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_CREATE_PROCESS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'NO_DEBUG_HEAP' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'THROUGH_RTL' = uint32(0x00010000)
	}
	.class public sequential sealed 'DEBUG_CREATE_PROCESS_OPTIONS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ECREATE_PROCESS' 'EngCreateFlags'
		.field public uint32 'VerifierFlags'
		.field public uint32 'Reserved'
	}
	.class public sealed 'DEBUG_CSS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'ALL' = uint32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'LOADS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'PATHS' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'SCOPE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'SYMBOL_OPTIONS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'TYPE_OPTIONS' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'UNLOADS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_CURRENT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'DEFAULT' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'DISASM' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'REGISTERS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'SOURCE_LINE' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'SYMBOL' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_DATA'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'BASE_TRANSLATION_VIRTUAL_OFFSET' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'KPCR_OFFSET' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'KPRCB_OFFSET' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'KTHREAD_OFFSET' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'PROCESSOR_IDENTIFICATION' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'PROCESSOR_SPEED' = uint32(0x00000005)
	}
	.class public sealed 'DEBUG_DATA_SPACE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'BUS_DATA' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'CONTROL' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'DEBUGGER_DATA' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'IO' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'MSR' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'PHYSICAL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'VIRTUAL' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_DISASM'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'EFFECTIVE_ADDRESS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'MATCHING_SYMBOLS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'SOURCE_FILE_NAME' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'SOURCE_LINE_NUMBER' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_DUMP'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'DEFAULT' = uint32(0x00000401)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'FULL' = uint32(0x00000402)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'IMAGE_FILE' = uint32(0x00000403)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'KERNEL_DUMP' = uint32(0x00000401)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'KERNEL_FULL_DUMP' = uint32(0x00000402)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'KERNEL_SMALL_DUMP' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'SMALL' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'TRACE_LOG' = uint32(0x00000404)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'WINDOWS_CD' = uint32(0x00000405)
	}
	.class public sealed 'DEBUG_DUMP_FILE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'BASE' = uint32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'PAGE_FILE_DUMP' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_ECREATE_PROCESS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ECREATE_PROCESS' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ECREATE_PROCESS' 'INHERIT_HANDLES' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ECREATE_PROCESS' 'USE_IMPLICIT_COMMAND_LINE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ECREATE_PROCESS' 'USE_VERIFIER_FLAGS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_EINDEX'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'FROM_CURRENT' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'FROM_END' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'FROM_START' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'NAME' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_END'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'ACTIVE_DETACH' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'ACTIVE_TERMINATE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'END_DISCONNECT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'END_REENTRANT' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'PASSIVE' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_ENGOPT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'ALL' = uint32(0x0007FFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'ALLOW_NETWORK_PATHS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'ALLOW_READ_ONLY_BREAKPOINTS' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISABLE_EXECUTION_COMMANDS' = uint32(0x00010000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISABLE_MANAGED_SUPPORT' = uint32(0x00004000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISABLE_MODULE_SYMBOL_LOAD' = uint32(0x00008000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISALLOW_IMAGE_FILE_MAPPING' = uint32(0x00020000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISALLOW_NETWORK_PATHS' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'DISALLOW_SHELL_COMMANDS' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'FAIL_INCOMPLETE_INFORMATION' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'FINAL_BREAK' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'IGNORE_DBGHELP_VERSION' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'IGNORE_EXTENSION_VERSIONS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'IGNORE_LOADER_EXCEPTIONS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'INITIAL_BREAK' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'INITIAL_MODULE_BREAK' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'KD_QUIET_MODE' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'NETWORK_PATHS' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'NONE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'NO_EXECUTE_REPEAT' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'PREFER_DML' = uint32(0x00040000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'SYNCHRONIZE_BREAKPOINTS' = uint32(0x00000800)
	}
	.class public sealed 'DEBUG_EVENT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'BREAKPOINT' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'CHANGE_DEBUGGEE_STATE' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'CHANGE_ENGINE_STATE' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'CHANGE_SYMBOL_STATE' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'CREATE_PROCESS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'CREATE_THREAD' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'EXCEPTION' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'EXIT_PROCESS' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'EXIT_THREAD' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'LOAD_MODULE' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'SESSION_STATUS' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'SYSTEM_ERROR' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'UNLOAD_MODULE' = uint32(0x00000080)
	}
	.class public sequential sealed 'DEBUG_EXCEPTION_FILTER_PARAMETERS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'ExecutionOption'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_CONTINUE_OPTION' 'ContinueOption'
		.field public uint32 'TextSize'
		.field public uint32 'CommandSize'
		.field public uint32 'SecondCommandSize'
		.field public uint32 'ExceptionCode'
	}
	.class public sealed 'DEBUG_EXECUTE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'ECHO' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'NOT_LOGGED' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'NO_REPEAT' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_EXPR'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'CPLUSPLUS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'MASM' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_FILTER_CONTINUE_OPTION'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_CONTINUE_OPTION' 'GO_HANDLED' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_CONTINUE_OPTION' 'GO_NOT_HANDLED' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_FILTER_EVENT'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'CREATE_PROCESS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'CREATE_THREAD' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'DEBUGGEE_OUTPUT' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'EXIT_PROCESS' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'EXIT_THREAD' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'INITIAL_BREAKPOINT' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'INITIAL_MODULE_LOAD' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'LOAD_MODULE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'SYSTEM_ERROR' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EVENT' 'UNLOAD_MODULE' = uint32(0x00000005)
	}
	.class public sealed 'DEBUG_FILTER_EXEC_OPTION'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'BREAK' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'IGNORE' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'OUTPUT' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'REMOVE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'SECOND_CHANCE_BREAK' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_FIND_SOURCE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'BEST_MATCH' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'FULL_PATH' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'NO_SRCSRV' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'TOKEN_LOOKUP' = uint32(0x00000008)
	}
	.class public sealed 'DEBUG_FORMAT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'CAB_SECONDARY_ALL_IMAGES' = uint32(0x10000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'CAB_SECONDARY_FILES' = uint32(0x40000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'NO_OVERWRITE' = uint32(0x80000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_CODE_SEGMENTS' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_DATA_SEGMENTS' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_FILTER_MEMORY' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_FILTER_PATHS' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_FULL_AUXILIARY_STATE' = uint32(0x00004000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_FULL_MEMORY' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_FULL_MEMORY_INFO' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_HANDLE_DATA' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_IGNORE_INACCESSIBLE_MEM' = uint32(0x08000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_INDIRECT_MEMORY' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_NO_AUXILIARY_STATE' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_NO_OPTIONAL_DATA' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_PRIVATE_READ_WRITE_MEMORY' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_PROCESS_THREAD_DATA' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_THREAD_INFO' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'USER_SMALL_UNLOADED_MODULES' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'WRITE_CAB' = uint32(0x20000000)
	}
	.class public sealed 'DEBUG_FRAME'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FRAME' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FRAME' 'IGNORE_INLINE' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_GETFNENT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETFNENT' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETFNENT' 'RAW_ENTRY_ONLY' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_GETMOD'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'NO_LOADED_MODULES' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'NO_UNLOADED_MODULES' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_GET_PROC'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'FULL_MATCH' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'ONLY_MATCH' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'SERVICE_NAME' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_GET_TEXT_COMPLETIONS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'IS_DOT_COMMAND' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'IS_EXTENSION_COMMAND' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'IS_SYMBOL' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'NONE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'NO_DOT_COMMANDS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'NO_EXTENSION_COMMANDS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'NO_SYMBOLS' = uint32(0x00000004)
	}
	.class public sequential sealed 'DEBUG_GET_TEXT_COMPLETIONS_IN'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'Flags'
		.field public uint32 'MatchCountLimit'
		.field public uint64 'Reserved0'
		.field public uint64 'Reserved1'
		.field public uint64 'Reserved2'
	}
	.class public sequential sealed 'DEBUG_GET_TEXT_COMPLETIONS_OUT'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_TEXT_COMPLETIONS' 'Flags'
		.field public uint32 'ReplaceIndex'
		.field public uint32 'MatchCount'
		.field public uint32 'Reserved1'
		.field public uint64 'Reserved2'
		.field public uint64 'Reserved3'
	}
	.class public sealed 'DEBUG_GSEL'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'ALLOW_HIGHER' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'ALLOW_LOWER' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'INLINE_CALLSITE' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'NEAREST_ONLY' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GSEL' 'NO_SYMBOL_LOADS' = uint32(0x00000001)
	}
	.class public sequential sealed 'DEBUG_HANDLE_DATA_BASIC'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'TypeNameSize'
		.field public uint32 'ObjectNameSize'
		.field public uint32 'Attributes'
		.field public uint32 'GrantedAccess'
		.field public uint32 'HandleCount'
		.field public uint32 'PointerCount'
	}
	.class public sealed 'DEBUG_HANDLE_DATA_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'ALL_HANDLE_OPERATIONS' = uint32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'BASIC' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'HANDLE_COUNT' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'MINI_MUTANT_1' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'MINI_MUTANT_2' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'MINI_PROCESS_1' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'MINI_PROCESS_2' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'MINI_THREAD_1' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'OBJECT_NAME' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'OBJECT_NAME_WIDE' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'PER_HANDLE_OPERATIONS' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'TYPE_NAME' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'TYPE_NAME_WIDE' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_INTERRUPT'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'ACTIVE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'EXIT' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'PASSIVE' = uint32(0x00000001)
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_BREAKPOINT'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'Id'
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_EXCEPTION'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EXCEPTION_RECORD64' 'ExceptionRecord'
		.field public uint32 'FirstChance'
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_EXIT_THREAD'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'ExitCode'
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_LOAD_MODULE'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'Base'
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'Error'
		.field public uint32 'Level'
	}
	.class public sequential sealed 'DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'Base'
	}
	.class public sealed 'DEBUG_LEVEL'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'ASSEMBLY' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'SOURCE' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_LOG'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG' 'APPEND' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG' 'DML' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG' 'UNICODE' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_MANAGED'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED' 'ALLOWED' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED' 'DISABLED' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED' 'DLL_LOADED' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_MANRESET'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANRESET' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANRESET' 'LOAD_DLL' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_MANSTR'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'LOADED_SUPPORT_DLL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'LOAD_STATUS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'NONE' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_MODNAME'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'IMAGE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'LOADED_IMAGE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'MAPPED_IMAGE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'MODULE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'SYMBOL_FILE' = uint32(0x00000003)
	}
	.class public sealed 'DEBUG_MODULE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'EXE_MODULE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'EXPLICIT' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'LOADED' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'SECONDARY' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'SYM_BAD_CHECKSUM' = uint32(0x00010000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'SYNTHETIC' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'UNLOADED' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'USER_MODE' = uint32(0x00000002)
	}
	.class public sequential sealed 'DEBUG_MODULE_AND_ID'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'ModuleBase'
		.field public uint64 'Id'
	}
	.class public sequential sealed 'DEBUG_MODULE_PARAMETERS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<Reserved>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.field public uint64 'Base'
		.field public uint32 'Size'
		.field public uint32 'TimeDateStamp'
		.field public uint32 'Checksum'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE' 'Flags'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'SymbolType'
		.field public uint32 'ImageNameSize'
		.field public uint32 'ModuleNameSize'
		.field public uint32 'LoadedImageNameSize'
		.field public uint32 'SymbolFileNameSize'
		.field public uint32 'MappedImageNameSize'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'/'<Reserved>e__FixedBuffer' 'Reserved'
	}
	.class public sequential sealed 'DEBUG_OFFSET_REGION'
		extends ['mscorlib']'System'.'ValueType'
	{

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed 'DEBUG_OFFSINFO'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSINFO' 'VIRTUAL_SOURCE' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_OUTCB'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCB' 'DML' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCB' 'EXPLICIT_FLUSH' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCB' 'TEXT' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_OUTCBF'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBF' 'DML_HAS_SPECIAL_CHARACTERS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBF' 'DML_HAS_TAGS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBF' 'EXPLICIT_FLUSH' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_OUTCBI'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBI' 'ANY_FORMAT' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBI' 'DML' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBI' 'EXPLICIT_FLUSH' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBI' 'TEXT' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_OUTCTL'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'ALL_CLIENTS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'ALL_OTHER_CLIENTS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'AMBIENT_DML' = uint32(0xFFFFFFFE)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'AMBIENT_TEXT' = uint32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'DML' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'IGNORE' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'LOG_ONLY' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'NOT_LOGGED' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OVERRIDE_MASK' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'SEND_MASK' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'THIS_CLIENT' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_OUTPUT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'DEBUGGEE' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'DEBUGGEE_PROMPT' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'ERROR' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'EXTENSION_WARNING' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'NORMAL' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'PROMPT' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'PROMPT_REGISTERS' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'SYMBOLS' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'VERBOSE' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'WARNING' = uint32(0x00000004)
	}
	.class public sealed 'DEBUG_OUTPUT_SYMBOLS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'DEFAULT' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'NO_NAMES' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'NO_OFFSETS' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'NO_TYPES' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'NO_VALUES' = int32(0x00000004)
	}
	.class public sealed 'DEBUG_OUTSYM'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'ALLOW_DISPLACEMENT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'FORCE_OFFSET' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'SOURCE_LINE' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_OUTTYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'ADDRESS_ANT_END' = int32(0x00020000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'ADDRESS_OF_FIELD' = int32(0x00010000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'BLOCK_RECURSE' = int32(0x00200000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'COMPACT_OUTPUT' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'DEFAULT' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'NO_INDENT' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'NO_OFFSET' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTTYPE' 'VERBOSE' = int32(0x00000004)
	}
	.class public sealed 'DEBUG_OUT_TEXT_REPL'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUT_TEXT_REPL' 'DEFAULT' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_PHYSICAL'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'CACHED' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'UNCACHED' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'WRITE_COMBINED' = uint32(0x00000003)
	}
	.class public sealed 'DEBUG_PROCESS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'DETACH_ON_EXIT' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'ONLY_THIS_PROCESS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_PROC_DESC'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_COMMAND_LINE' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_MTS_PACKAGES' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_PATHS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_SERVICES' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_SESSION_ID' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'NO_USER_NAME' = uint32(0x00000020)
	}
	.class public sequential sealed 'DEBUG_READ_USER_MINIDUMP_STREAM'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'StreamType'
		.field public uint32 'Flags'
		.field public uint64 'Offset'
		.field public native int 'Buffer'
		.field public uint32 'BufferSize'
		.field public uint32 'BufferUsed'
	}
	.class public sealed 'DEBUG_REGISTER'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTER' 'SUB_REGISTER' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_REGISTERS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'ALL' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'FLOAT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'INT32' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'INT64' = uint32(0x00000002)
	}
	.class public sequential sealed 'DEBUG_REGISTER_DESCRIPTION'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'Type'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTER' 'Flags'
		.field public uint64 'SubregMaster'
		.field public uint64 'SubregLength'
		.field public uint64 'SubregMask'
		.field public uint64 'SubregShift'
		.field public uint64 'Reserved0'
	}
	.class public sealed 'DEBUG_REGSRC'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGSRC' 'DEBUGGEE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGSRC' 'EXPLICIT' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGSRC' 'FRAME' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_REQUEST'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'ADD_CACHED_SYMBOL_INFO' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'CLOSE_TOKEN' = uint32(0x0000001E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE' = uint32(0x00000013)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'DUPLICATE_TOKEN' = uint32(0x0000001C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'EXT_TYPED_DATA_ANSI' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_ADDITIONAL_CREATE_OPTIONS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_CACHED_SYMBOL_INFO' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_CAPTURED_EVENT_CODE_OFFSET' = uint32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_DUMP_HEADER' = uint32(0x00000015)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_EXTENSION_SEARCH_PATH_WIDE' = uint32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_OFFSET_UNWIND_INFORMATION' = uint32(0x00000014)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_TEXT_COMPLETIONS_ANSI' = uint32(0x00000012)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_TEXT_COMPLETIONS_WIDE' = uint32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'GET_WIN32_MAJOR_MINOR_VERSIONS' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'LIVE_USER_NON_INVASIVE' = uint32(0x00000021)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'MIDORI' = uint32(0x00000017)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'MISC_INFORMATION' = uint32(0x00000019)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'OPEN_PROCESS_TOKEN' = uint32(0x0000001A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'OPEN_THREAD_TOKEN' = uint32(0x0000001B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'PROCESS_DESCRIPTORS' = uint32(0x00000018)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'QUERY_INFO_TOKEN' = uint32(0x0000001D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'READ_CAPTURED_EVENT_CODE_STREAM' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'READ_USER_MINIDUMP_STREAM' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'REMOVE_CACHED_SYMBOL_INFO' = uint32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'RESUME_THREAD' = uint32(0x00000022)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'SET_ADDITIONAL_CREATE_OPTIONS' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'SET_DUMP_HEADER' = uint32(0x00000016)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'SET_LOCAL_IMPLICIT_COMMAND_LINE' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'SOURCE_PATH_HAS_SOURCE_SERVER' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'TARGET_CAN_DETACH' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'TARGET_EXCEPTION_CONTEXT' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'TARGET_EXCEPTION_RECORD' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'TARGET_EXCEPTION_THREAD' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'WOW_MODULE' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'WOW_PROCESS' = uint32(0x0000001F)
	}
	.class public sealed 'DEBUG_SCOPE_GROUP'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'ALL' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'ARGUMENTS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'LOCALS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_SERVERS'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'ALL' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'DEBUGGER' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'PROCESS' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_SESSION'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'ACTIVE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'END' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'END_SESSION_ACTIVE_DETACH' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'END_SESSION_ACTIVE_TERMINATE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'END_SESSION_PASSIVE' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'FAILURE' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'HIBERNATE' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'REBOOT' = uint32(0x00000005)
	}
	.class public sealed 'DEBUG_SOURCE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SOURCE' 'IS_STATEMENT' = uint32(0x00000001)
	}
	.class public sequential sealed 'DEBUG_SPECIFIC_FILTER_PARAMETERS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_EXEC_OPTION' 'ExecutionOption'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FILTER_CONTINUE_OPTION' 'ContinueOption'
		.field public uint32 'TextSize'
		.field public uint32 'CommandSize'
		.field public uint32 'ArgumentSize'
	}
	.class public sealed 'DEBUG_SRCFILE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SRCFILE' 'SYMBOL_TOKEN' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SRCFILE' 'SYMBOL_TOKEN_SOURCE_COMMAND_WIDE' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_STACK'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'ARGUMENTS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'COLUMN_NAMES' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'DML' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FRAME_ADDRESSES' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FRAME_ADDRESSES_RA_ONLY' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FRAME_MEMORY_USAGE' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FRAME_NUMBERS' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FRAME_OFFSETS' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'FUNCTION_INFO' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'NONVOLATILE_REGISTERS' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'PARAMETERS' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'PARAMETERS_NEWLINE' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'SOURCE_LINE' = uint32(0x00000004)
	}
	.class public sequential sealed 'DEBUG_STACK_FRAME'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<Params>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.class nested public sequential sealed '<Reserved>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.field public uint64 'InstructionOffset'
		.field public uint64 'ReturnOffset'
		.field public uint64 'FrameOffset'
		.field public uint64 'StackOffset'
		.field public uint64 'FuncTableEntry'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'/'<Params>e__FixedBuffer' 'Params'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'/'<Reserved>e__FixedBuffer' 'Reserved'
		.field public uint32 'Virtual'
		.field public uint32 'FrameNumber'
	}
	.class public sequential sealed 'DEBUG_STACK_FRAME_EX'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<Params>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.class nested public sequential sealed '<Reserved>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.method public hidebysig specialname 
			instance void '.ctor'(valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'dsf')
		{
			ret
		}
		.field public uint64 'InstructionOffset'
		.field public uint64 'ReturnOffset'
		.field public uint64 'FrameOffset'
		.field public uint64 'StackOffset'
		.field public uint64 'FuncTableEntry'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'/'<Params>e__FixedBuffer' 'Params'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'/'<Reserved>e__FixedBuffer' 'Reserved'
		.field public uint32 'Virtual'
		.field public uint32 'FrameNumber'
		.field public uint32 'InlineFrameContext'
		.field public uint32 'Reserved1'
	}
	.class public sealed 'DEBUG_STATUS'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'BREAK' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'GO' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'GO_HANDLED' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'GO_NOT_HANDLED' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'IGNORE_EVENT' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'MASK' = uint32(0x0000001F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'NO_CHANGE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'NO_DEBUGGEE' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'OUT_OF_SYNC' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'RESTART_REQUESTED' = uint32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'REVERSE_GO' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'REVERSE_STEP_BRANCH' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'REVERSE_STEP_INTO' = uint32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'REVERSE_STEP_OVER' = uint32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'STEP_BRANCH' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'STEP_INTO' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'STEP_OVER' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'TIMEOUT' = uint32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'WAIT_INPUT' = uint32(0x00000010)
	}
	.class public sealed 'DEBUG_STATUS_FLAGS'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint64 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS_FLAGS' 'INSIDE_WAIT' = uint64(0x100000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS_FLAGS' 'WAIT_TIMEOUT' = uint64(0x200000000)
	}
	.class public sealed 'DEBUG_SYMBOL'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'EXPANDED' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'EXPANSION_LEVEL_MASK' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'IS_ARGUMENT' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'IS_ARRAY' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'IS_FLOAT' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'IS_LOCAL' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'READ_ONLY' = uint32(0x00000020)
	}
	.class public sequential sealed 'DEBUG_SYMBOL_ENTRY'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'ModuleBase'
		.field public uint64 'Offset'
		.field public uint64 'Id'
		.field public uint64 'Arg64'
		.field public uint32 'Size'
		.field public uint32 'Flags'
		.field public uint32 'TypeId'
		.field public uint32 'NameSize'
		.field public uint32 'Token'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Tag'
		.field public uint32 'Arg32'
		.field public uint32 'Reserved'
	}
	.class public sequential sealed 'DEBUG_SYMBOL_PARAMETERS'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'Module'
		.field public uint32 'TypeId'
		.field public uint32 'ParentSymbol'
		.field public uint32 'SubElements'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL' 'Flags'
		.field public uint64 'Reserved'
	}
	.class public sequential sealed 'DEBUG_SYMBOL_SOURCE_ENTRY'
		extends ['mscorlib']'System'.'ValueType'
	{

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed 'DEBUG_SYMINFO'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'BREAKPOINT_SOURCE_LINE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'GET_MODULE_SYMBOL_NAMES_AND_OFFSETS' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'IMAGEHLP_MODULEW64' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_SYMTYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'CODEVIEW' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'COFF' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'DEFERRED' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'DIA' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'EXPORT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'NONE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'PDB' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'SYM' = uint32(0x00000006)
	}
	.class public sealed 'DEBUG_SYSOBJINFO'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSOBJINFO' 'CURRENT_PROCESS_COOKIE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSOBJINFO' 'THREAD_BASIC_INFORMATION' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSOBJINFO' 'THREAD_NAME_WIDE' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_SYSVERSTR'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'BUILD' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'SERVICE_PACK' = uint32(0x00000000)
	}
	.class public sealed 'DEBUG_TBINFO'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'AFFINITY' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'ALL' = uint32(0x0000003F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'EXIT_STATUS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'NONE' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'PRIORITY' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'PRIORITY_CLASS' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'START_OFFSET' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'TIMES' = uint32(0x00000008)
	}
	.class public sequential sealed 'DEBUG_THREAD_BASIC_INFORMATION'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TBINFO' 'Valid'
		.field public uint32 'ExitStatus'
		.field public uint32 'PriorityClass'
		.field public uint32 'Priority'
		.field public uint64 'CreateTime'
		.field public uint64 'ExitTime'
		.field public uint64 'KernelTime'
		.field public uint64 'UserTime'
		.field public uint64 'StartOffset'
		.field public uint64 'Affinity'
	}
	.class public sealed 'DEBUG_TYPEOPTS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'FORCERADIX_OUTPUT' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'LONGSTATUS_DISPLAY' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'MATCH_MAXSIZE' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'UNICODE_DISPLAY' = uint32(0x00000001)
	}
	.class public explicit sealed 'DEBUG_VALUE'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<F128Bytes>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint8 'FixedElementField'
		}
		.class nested public sequential sealed '<F80Bytes>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint8 'FixedElementField'
		}
		.class nested public sequential sealed '<F82Bytes>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint8 'FixedElementField'
		}
		.class nested public sequential sealed '<RawBytes>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint8 'FixedElementField'
		}
		.class nested public sequential sealed '<VF32>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public float32 'FixedElementField'
		}
		.class nested public sequential sealed '<VF64>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public float64 'FixedElementField'
		}
		.class nested public sequential sealed '<VI16>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint16 'FixedElementField'
		}
		.class nested public sequential sealed '<VI32>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint32 'FixedElementField'
		}
		.class nested public sequential sealed '<VI64>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.class nested public sequential sealed '<VI8>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint8 'FixedElementField'
		}
		.field [0] public uint8 'I8'
		.field [0] public uint16 'I16'
		.field [0] public uint32 'I32'
		.field [0] public uint64 'I64'
		.field [8] public uint32 'Nat'
		.field [0] public float32 'F32'
		.field [0] public float64 'F64'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<F80Bytes>e__FixedBuffer' 'F80Bytes'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<F82Bytes>e__FixedBuffer' 'F82Bytes'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<F128Bytes>e__FixedBuffer' 'F128Bytes'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VI8>e__FixedBuffer' 'VI8'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VI16>e__FixedBuffer' 'VI16'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VI32>e__FixedBuffer' 'VI32'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VI64>e__FixedBuffer' 'VI64'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VF32>e__FixedBuffer' 'VF32'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<VF64>e__FixedBuffer' 'VF64'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'I64PARTS32' 'I64Parts32'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'F128PARTS64' 'F128Parts64'
		.field [0] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'/'<RawBytes>e__FixedBuffer' 'RawBytes'
		.field [24] public uint32 'TailOfRawBytes'
		.field [28] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'Type'
	}
	.class public sealed 'DEBUG_VALUE_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'FLOAT128' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'FLOAT32' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'FLOAT64' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'FLOAT80' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'FLOAT82' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'INT16' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'INT32' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'INT64' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'INT8' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'INVALID' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'TYPES' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'VECTOR128' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'VECTOR64' = uint32(0x0000000A)
	}
	.class public sealed 'DEBUG_VSEARCH'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSEARCH' 'DEFAULT' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSEARCH' 'WRITABLE_ONLY' = uint32(0x00000001)
	}
	.class public sealed 'DEBUG_VSOURCE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSOURCE' 'DEBUGGEE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSOURCE' 'DUMP_WITHOUT_MEMINFO' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSOURCE' 'INVALID' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSOURCE' 'MAPPED_IMAGE' = uint32(0x00000002)
	}
	.class public sealed 'DEBUG_WAIT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'DEFAULT' = uint32(0x00000000)
	}
	.class public sealed 'ECreationDisposition'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ECreationDisposition' 'CreateAlways' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ECreationDisposition' 'New' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ECreationDisposition' 'OpenAlways' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ECreationDisposition' 'OpenExisting' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ECreationDisposition' 'TruncateExisting' = uint32(0x00000005)
	}
	.class public sealed 'EFileAccess'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAccess' 'GenericAll' = uint32(0x10000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAccess' 'GenericExecute' = uint32(0x20000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAccess' 'GenericRead' = uint32(0x80000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAccess' 'GenericWrite' = uint32(0x40000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAccess' 'None' = uint32(0x00000000)
	}
	.class public sealed 'EFileAttributes'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Archive' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'BackupSemantics' = uint32(0x02000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Compressed' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'DeleteOnClose' = uint32(0x04000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Device' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Directory' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Encrypted' = uint32(0x00004000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'FirstPipeInstance' = uint32(0x00080000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Hidden' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'NoBuffering' = uint32(0x20000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Normal' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'NotContentIndexed' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Offline' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'OpenNoRecall' = uint32(0x00100000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'OpenReparsePoint' = uint32(0x00200000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Overlapped' = uint32(0x40000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'PosixSemantics' = uint32(0x01000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'RandomAccess' = uint32(0x10000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Readonly' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'ReparsePoint' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'SequentialScan' = uint32(0x08000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'SparseFile' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'System' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Temporary' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileAttributes' 'Write_Through' = uint32(0x80000000)
	}
	.class public sealed 'EFileShare'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileShare' 'Delete' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileShare' 'None' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileShare' 'Read' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EFileShare' 'Write' = uint32(0x00000002)
	}
	.class public sealed 'ERROR_LEVEL'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'ERROR' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'MINORERROR' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'WARNING' = int32(0x00000003)
	}
	.class public sequential sealed 'EXCEPTION_RECORD64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<ExceptionInformation>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.field public uint32 'ExceptionCode'
		.field public uint32 'ExceptionFlags'
		.field public uint64 'ExceptionRecord'
		.field public uint64 'ExceptionAddress'
		.field public uint32 'NumberParameters'
		.field public uint32 '__unusedAlignment'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EXCEPTION_RECORD64'/'<ExceptionInformation>e__FixedBuffer' 'ExceptionInformation'
	}
	.class public sequential 'EXT_TYPED_DATA'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'Operation'
		.field public uint32 'Flags'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_DEBUG_TYPED_DATA' 'InData'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_DEBUG_TYPED_DATA' 'OutData'
		.field public uint32 'InStrIndex'
		.field public uint32 'In32'
		.field public uint32 'Out32'
		.field public uint64 'In64'
		.field public uint64 'Out64'
		.field public uint32 'StrBufferIndex'
		.field public uint32 'StrBufferChars'
		.field public uint32 'StrCharsNeeded'
		.field public uint32 'DataBufferIndex'
		.field public uint32 'DataBufferBytes'
		.field public uint32 'DataBytesNeeded'
		.field public uint32 'Status'
	}
	.class public explicit sealed 'F128PARTS64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint64 'LowPart'
		.field [8] public uint64 'HighPart'
	}
	.class public sealed 'FORMAT_MESSAGE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'ALLOCATE_BUFFER' = int32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'ARGUMENT_ARRAY' = int32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'FROM_HMODULE' = int32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'FROM_STRING' = int32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'FROM_SYSTEM' = int32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'FORMAT_MESSAGE' 'IGNORE_INSERTS' = int32(0x00000200)
	}
	.class public explicit sealed 'I64PARTS32'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint32 'LowPart'
		.field [4] public uint32 'HighPart'
	}
	.class public interface abstract import 'IDebugAdvanced'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 66 32 64 66 35 66 35 33 2D 30 37 31 66 2D 34 37 62 64 2D 39 64 65 36 2D 35 37 33 34 63 33 66 65 64 36 38 39 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugAdvanced2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugAdvanced'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 37 31 36 64 31 34 63 39 2D 31 31 39 62 2D 34 62 61 35 2D 61 66 31 66 2D 30 38 39 30 65 36 37 32 34 31 36 61 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Request'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'Request', [in] uint8[] marshal([ + 2]) 'inBuffer', [in] int32 'InBufferSize', [out] uint8[] marshal([ + 4]) 'outBuffer', [in] int32 'OutBufferSize', [out] int32& 'OutSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SRCFILE' 'Which', [in] string marshal(lpstr) 'SourceFile', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileAndToken'([in] uint32 'StartElement', [in] uint64 'ModAddr', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'FileTokenSize', [out] int32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] int32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'Which', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 4]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'StringBuffer', [in] int32 'StringBufferSize', [out] int32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemObjectInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSOBJINFO' 'Which', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 4]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugAdvanced3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugAdvanced2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugAdvanced'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 63 62 61 34 61 62 62 34 2D 38 34 63 34 2D 34 34 34 64 2D 38 37 63 61 2D 61 30 34 65 31 33 32 38 36 37 33 39 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetThreadContext'([in] native int 'Context', [in] uint32 'ContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Request'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REQUEST' 'Request', [in] uint8[] marshal([ + 2]) 'inBuffer', [in] int32 'InBufferSize', [out] uint8[] marshal([ + 4]) 'outBuffer', [in] int32 'OutBufferSize', [out] int32& 'OutSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SRCFILE' 'Which', [in] string marshal(lpstr) 'SourceFile', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileAndToken'([in] uint32 'StartElement', [in] uint64 'ModAddr', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'FileTokenSize', [out] int32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] int32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'Which', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 4]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'StringBuffer', [in] int32 'StringBufferSize', [out] int32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemObjectInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSOBJINFO' 'Which', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 4]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileInformationWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SRCFILE' 'Which', [in] string marshal(lpwstr) 'SourceFile', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileAndTokenWide'([in] uint32 'StartElement', [in] uint64 'ModAddr', [in] string marshal(lpwstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint8[] marshal([ + 5]) 'buffer', [in] int32 'FileTokenSize', [out] int32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] int32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolInformationWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMINFO' 'Which', [in] uint64 'Arg64', [in] uint32 'Arg32', [out] uint8[] marshal([ + 4]) 'buffer', [in] int32 'BufferSize', [out] int32& 'InfoSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'StringBuffer', [in] int32 'StringBufferSize', [out] int32& 'StringSize')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugBreakpoint'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 35 62 64 39 64 34 37 34 2D 35 39 37 35 2D 34 32 33 61 2D 62 38 38 62 2D 36 35 61 38 65 37 31 31 30 65 36 35 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE'& 'BreakType', [out] uint32& 'ProcType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAdder'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Adder')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDataParameters'([out] uint32& 'Size', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE'& 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetDataParameters'([in] uint32 'Size', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetPassCount'([in] uint32 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMatchThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetMatchThreadId'([in] uint32 'Thread')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCommand'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCommand'([in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetExpression'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExpressionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffsetExpression'([in] string marshal(lpstr) 'Expression')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParameters'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'& 'Params')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugBreakpoint2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 31 62 32 37 38 64 32 30 2D 37 39 66 32 2D 34 32 36 65 2D 61 33 66 39 2D 63 31 64 64 66 33 37 35 64 34 38 65 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE'& 'BreakType', [out] uint32& 'ProcType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAdder'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Adder')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDataParameters'([out] uint32& 'Size', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE'& 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetDataParameters'([in] uint32 'Size', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetPassCount'([in] uint32 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMatchThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetMatchThreadId'([in] uint32 'Thread')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCommand'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCommand'([in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetExpression'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExpressionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffsetExpression'([in] string marshal(lpstr) 'Expression')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParameters'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'& 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCommandWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCommandWide'([in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetExpressionWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExpressionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffsetExpressionWide'([in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugBreakpoint3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 33 38 66 35 63 32 34 39 2D 62 34 34 38 2D 34 33 62 62 2D 39 38 33 35 2D 35 37 39 64 34 65 63 30 32 32 34 39 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE'& 'BreakType', [out] uint32& 'ProcType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAdder'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Adder')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetFlags'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_FLAG' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDataParameters'([out] uint32& 'Size', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE'& 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetDataParameters'([in] uint32 'Size', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_ACCESS_TYPE' 'AccessType')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetPassCount'([in] uint32 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentPassCount'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetMatchThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetMatchThreadId'([in] uint32 'Thread')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCommand'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCommand'([in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetExpression'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExpressionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffsetExpression'([in] string marshal(lpstr) 'Expression')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetParameters'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'& 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCommandWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCommandWide'([in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetExpressionWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExpressionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOffsetExpressionWide'([in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetGuid'([out] valuetype ['mscorlib']'System'.'Guid'& 'Guid')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugClient'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 32 37 66 65 35 36 33 39 2D 38 34 30 37 2D 34 66 34 37 2D 38 33 36 34 2D 65 65 31 31 38 66 62 30 38 61 63 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptions'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptions'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServer'([in] string marshal(lpstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisconnectProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIds'([in] uint64 'Server', [out] uint32[] marshal([]) 'Ids', [in] uint32 'Count', [out] uint32& 'ActualCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableName'([in] uint64 'Server', [in] string marshal(lpstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescription'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachProcess'([in] uint64 'Server', [in] uint32 'ProcessID', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFile'([in] string marshal(lpstr) 'DumpFile')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'Flags', [in] uint32 'HistoryLimit')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServer'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExitCode'([out] uint32& 'Code')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DispatchCallbacks'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitDispatch'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateClient'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInputCallbacks'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks'& marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInputCallbacks'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks' marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputWidth'([out] uint32& 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputWidth'([in] uint32 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefix'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefix'([in] string marshal(lpstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentity'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentity'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FlushCallbacks'()
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugClient2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 65 64 62 65 64 36 33 35 2D 33 37 32 65 2D 34 64 61 62 2D 62 62 66 65 2D 65 64 30 64 32 66 36 33 62 65 38 31 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptions'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptions'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServer'([in] string marshal(lpstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisconnectProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIds'([in] uint64 'Server', [out] uint32[] marshal([]) 'Ids', [in] uint32 'Count', [out] uint32& 'ActualCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableName'([in] uint64 'Server', [in] string marshal(lpstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescription'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachProcess'([in] uint64 'Server', [in] uint32 'ProcessID', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFile'([in] string marshal(lpstr) 'DumpFile')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'Flags', [in] uint32 'HistoryLimit')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServer'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExitCode'([out] uint32& 'Code')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DispatchCallbacks'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitDispatch'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateClient'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInputCallbacks'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks'& marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInputCallbacks'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks' marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputWidth'([out] uint32& 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputWidth'([in] uint32 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefix'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefix'([in] string marshal(lpstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentity'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentity'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FlushCallbacks'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile2'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFile'([in] string marshal(lpstr) 'InfoFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForProcessServerEnd'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsKernelDebuggerEnabled'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AbandonCurrentProcess'()
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugClient3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 64 64 34 39 32 64 37 66 2D 37 31 62 38 2D 34 61 64 36 2D 61 38 64 63 2D 31 63 38 38 37 34 37 39 66 66 39 31 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptions'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptions'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServer'([in] string marshal(lpstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisconnectProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIds'([in] uint64 'Server', [out] uint32[] marshal([]) 'Ids', [in] uint32 'Count', [out] uint32& 'ActualCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableName'([in] uint64 'Server', [in] string marshal(lpstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescription'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachProcess'([in] uint64 'Server', [in] uint32 'ProcessID', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFile'([in] string marshal(lpstr) 'DumpFile')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'Flags', [in] uint32 'HistoryLimit')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServer'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExitCode'([out] uint32& 'Code')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DispatchCallbacks'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitDispatch'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateClient'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInputCallbacks'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks'& marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInputCallbacks'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks' marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputWidth'([out] uint32& 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputWidth'([in] uint32 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefix'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefix'([in] string marshal(lpstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentity'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentity'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FlushCallbacks'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile2'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFile'([in] string marshal(lpstr) 'InfoFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForProcessServerEnd'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsKernelDebuggerEnabled'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AbandonCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableNameWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescriptionWide'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttachWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugClient4'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 63 61 38 33 63 33 64 65 2D 35 30 38 39 2D 34 63 66 38 2D 39 33 63 38 2D 64 38 39 32 33 38 37 66 32 61 35 65 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptions'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptions'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServer'([in] string marshal(lpstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisconnectProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIds'([in] uint64 'Server', [out] uint32[] marshal([]) 'Ids', [in] uint32 'Count', [out] uint32& 'ActualCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableName'([in] uint64 'Server', [in] string marshal(lpstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescription'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachProcess'([in] uint64 'Server', [in] uint32 'ProcessID', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFile'([in] string marshal(lpstr) 'DumpFile')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'Flags', [in] uint32 'HistoryLimit')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServer'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExitCode'([out] uint32& 'Code')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DispatchCallbacks'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitDispatch'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateClient'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInputCallbacks'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks'& marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInputCallbacks'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks' marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputWidth'([out] uint32& 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputWidth'([in] uint32 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefix'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefix'([in] string marshal(lpstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentity'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentity'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FlushCallbacks'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile2'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFile'([in] string marshal(lpstr) 'InfoFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForProcessServerEnd'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsKernelDebuggerEnabled'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AbandonCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableNameWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescriptionWide'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttachWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFileWide'([in] string marshal(lpwstr) 'FileName', [in] uint64 'FileHandle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFileWide'([in] string marshal(lpwstr) 'DumpFile', [in] uint64 'FileHandle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpwstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFileWide'([in] string marshal(lpwstr) 'FileName', [in] uint64 'FileHandle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberDumpFiles'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFile'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize', [out] uint64& 'Handle', [out] uint32& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFileWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize', [out] uint64& 'Handle', [out] uint32& 'Type')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugClient5'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient4', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 65 33 61 63 62 39 64 37 2D 37 65 63 32 2D 34 66 30 63 2D 61 30 64 61 2D 65 38 31 65 30 63 62 62 65 36 32 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptions'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptions'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServer'([in] string marshal(lpstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisconnectProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIds'([in] uint64 'Server', [out] uint32[] marshal([]) 'Ids', [in] uint32 'Count', [out] uint32& 'ActualCount')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableName'([in] uint64 'Server', [in] string marshal(lpstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescription'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachProcess'([in] uint64 'Server', [in] uint32 'ProcessID', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'Flags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetProcessOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROCESS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFile'([in] string marshal(lpstr) 'DumpFile')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CONNECT_SESSION' 'Flags', [in] uint32 'HistoryLimit')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServer'([in] string marshal(lpstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServer'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachProcesses'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSession'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_END' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExitCode'([out] uint32& 'Code')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DispatchCallbacks'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitDispatch'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateClient'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient'& marshal(interface) 'Client')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInputCallbacks'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks'& marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInputCallbacks'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugInputCallbacks' marshal(interface) 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOtherOutputMask'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugClient' marshal(interface) 'Client', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputWidth'([out] uint32& 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputWidth'([in] uint32 'Columns')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefix'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefix'([in] string marshal(lpstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentity'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentity'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacks'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacks'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FlushCallbacks'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFile2'([in] string marshal(lpstr) 'DumpFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFile'([in] string marshal(lpstr) 'InfoFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndProcessServer'([in] uint64 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForProcessServerEnd'([in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsKernelDebuggerEnabled'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'TerminateCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DetachCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AbandonCurrentProcess'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessSystemIdByExecutableNameWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'ExeName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GET_PROC' 'Flags', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRunningProcessDescriptionWide'([in] uint64 'Server', [in] uint32 'SystemId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PROC_DESC' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'ExeName', [in] int32 'ExeNameSize', [out] uint32& 'ActualExeNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'ActualDescriptionSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttachWide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS' 'CreateFlags', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenDumpFileWide'([in] string marshal(lpwstr) 'FileName', [in] uint64 'FileHandle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteDumpFileWide'([in] string marshal(lpwstr) 'DumpFile', [in] uint64 'FileHandle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP' 'Qualifier', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT' 'FormatFlags', [in] string marshal(lpwstr) 'Comment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddDumpInformationFileWide'([in] string marshal(lpwstr) 'FileName', [in] uint64 'FileHandle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DUMP_FILE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberDumpFiles'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFile'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize', [out] uint64& 'Handle', [out] uint32& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFileWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize', [out] uint64& 'Handle', [out] uint32& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AttachKernelWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'Flags', [in] string marshal(lpwstr) 'ConnectOptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetKernelConnectionOptionsWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'OptionsSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetKernelConnectionOptionsWide'([in] string marshal(lpwstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartProcessServerWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS' 'Flags', [in] string marshal(lpwstr) 'Options', [in] native int 'Reserved')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ConnectProcessServerWide'([in] string marshal(lpwstr) 'RemoteOptions', [out] uint64& 'Server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartServerWide'([in] string marshal(lpwstr) 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputServersWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Machine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SERVERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputCallbacksWide'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputCallbacksWide'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOutputLinePrefixWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PrefixSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetOutputLinePrefixWide'([in] string marshal(lpwstr) 'Prefix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIdentityWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'IdentitySize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputIdentityWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'Flags', [in] string marshal(lpwstr) 'Machine')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventCallbacksWide'([out] native int& 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventCallbacksWide'([in] native int 'Callbacks')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess2'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS_OPTIONS'& 'OptionsBuffer', [in] uint32 'OptionsBufferSize', [in] string marshal(lpstr) 'InitialDirectory', [in] string marshal(lpstr) 'Environment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess2Wide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS_OPTIONS'& 'OptionsBuffer', [in] uint32 'OptionsBufferSize', [in] string marshal(lpwstr) 'InitialDirectory', [in] string marshal(lpwstr) 'Environment')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach2'([in] uint64 'Server', [in] string marshal(lpstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS_OPTIONS'& 'OptionsBuffer', [in] uint32 'OptionsBufferSize', [in] string marshal(lpstr) 'InitialDirectory', [in] string marshal(lpstr) 'Environment', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcessAndAttach2Wide'([in] uint64 'Server', [in] string marshal(lpwstr) 'CommandLine', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CREATE_PROCESS_OPTIONS'& 'OptionsBuffer', [in] uint32 'OptionsBufferSize', [in] string marshal(lpwstr) 'InitialDirectory', [in] string marshal(lpwstr) 'Environment', [in] uint32 'ProcessId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ATTACH' 'AttachFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'PushOutputLinePrefix'([in] string marshal(lpstr) 'NewPrefix', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'PushOutputLinePrefixWide'([in] string marshal(lpwstr) 'NewPrefix', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'PopOutputLinePrefix'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberInputCallbacks'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberOutputCallbacks'([out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventCallbacks'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT' 'Flags', [out] uint32& 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetQuitLockString'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetQuitLockString'([in] string marshal(lpstr) 'LockString')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetQuitLockStringWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetQuitLockStringWide'([in] string marshal(lpwstr) 'LockString')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 35 31 38 32 65 36 36 38 2D 31 30 35 65 2D 34 31 36 65 2D 61 64 39 32 2D 32 34 65 66 38 30 30 34 32 34 62 61 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 64 34 33 36 36 37 32 33 2D 34 34 64 66 2D 34 62 65 64 2D 38 63 37 65 2D 34 63 30 35 34 32 34 66 34 35 38 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentTimeDate'([out] uint32& 'TimeDate')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFormatFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT'& 'FormatFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberTextReplacements'([out] uint32& 'NumRepl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] string marshal(lpstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTextReplacements'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTextReplacements'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUT_TEXT_REPL' 'Flags')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 37 64 66 37 34 61 38 36 2D 62 30 33 66 2D 34 30 37 66 2D 39 30 61 62 2D 61 32 30 64 61 64 63 65 61 64 30 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntax'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntax'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByName'([in] string marshal(lpstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberExpressionSyntaxes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNames'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEvents'([out] uint32& 'Events')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescription'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentEventIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNextEventIndex'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Relation', [in] uint32 'Value', [out] uint32& 'NextIndex')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl4'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 39 34 65 36 30 63 65 39 2D 39 62 34 31 2D 34 62 31 39 2D 39 66 63 30 2D 36 64 39 65 62 33 35 32 37 32 62 33 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentTimeDate'([out] uint32& 'TimeDate')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFormatFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT'& 'FormatFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberTextReplacements'([out] uint32& 'NumRepl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] string marshal(lpstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTextReplacements'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTextReplacements'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUT_TEXT_REPL' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntax'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntax'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByName'([in] string marshal(lpstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberExpressionSyntaxes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNames'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEvents'([out] uint32& 'Events')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescription'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentEventIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNextEventIndex'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Relation', [in] uint32 'Value', [out] uint32& 'NextIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFileWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFileWide'([in] string marshal(lpwstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'InputWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInputWide'([in] string marshal(lpwstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptTextWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AssembleWide'([in] uint64 'Offset', [in] string marshal(lpwstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisassembleWide'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNamesWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacroWide'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacroWide'([in] uint32 'Slot', [in] string marshal(lpwstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EvaluateWide'([in] string marshal(lpwstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFileWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex2'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById2'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint2'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtensionWide'([in] string marshal(lpwstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPathWide'([in] string marshal(lpwstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtensionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'Function', [in] string marshal(lpwstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunctionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterTextWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgumentWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgumentWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformationWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] int32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] string marshal(lpwstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByNameWide'([in] string marshal(lpwstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNamesWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescriptionWide'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2'([in] string marshal(lpstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2Wide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2Wide'([in] string marshal(lpwstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionValues'([out] uint32& 'PlatformId', [out] uint32& 'Win32Major', [out] uint32& 'Win32Minor', [out] uint32& 'KdMajor', [out] uint32& 'KdMinor')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetContextStackTrace'([in] native int 'StartContext', [in] uint32 'StartContextSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputContextStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStoredEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'Context', [in] uint32 'ContextSize', [out] uint32& 'ContextUsed', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatusWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetManagedStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANRESET' 'Flags')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl5'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl4', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 62 32 66 66 65 31 36 32 2D 32 34 31 32 2D 34 32 39 66 2D 38 64 31 64 2D 35 62 66 36 64 64 38 32 34 36 39 36 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentTimeDate'([out] uint32& 'TimeDate')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFormatFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT'& 'FormatFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberTextReplacements'([out] uint32& 'NumRepl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] string marshal(lpstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTextReplacements'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTextReplacements'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUT_TEXT_REPL' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntax'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntax'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByName'([in] string marshal(lpstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberExpressionSyntaxes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNames'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEvents'([out] uint32& 'Events')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescription'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentEventIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNextEventIndex'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Relation', [in] uint32 'Value', [out] uint32& 'NextIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFileWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFileWide'([in] string marshal(lpwstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'InputWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInputWide'([in] string marshal(lpwstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptTextWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AssembleWide'([in] uint64 'Offset', [in] string marshal(lpwstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisassembleWide'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNamesWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacroWide'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacroWide'([in] uint32 'Slot', [in] string marshal(lpwstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EvaluateWide'([in] string marshal(lpwstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFileWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex2'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById2'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint2'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtensionWide'([in] string marshal(lpwstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPathWide'([in] string marshal(lpwstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtensionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'Function', [in] string marshal(lpwstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunctionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterTextWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgumentWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgumentWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformationWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] int32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] string marshal(lpwstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByNameWide'([in] string marshal(lpwstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNamesWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescriptionWide'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2'([in] string marshal(lpstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2Wide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2Wide'([in] string marshal(lpwstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionValues'([out] uint32& 'PlatformId', [out] uint32& 'Win32Major', [out] uint32& 'Win32Minor', [out] uint32& 'KdMajor', [out] uint32& 'KdMinor')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetContextStackTrace'([in] native int 'StartContext', [in] uint32 'StartContextSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputContextStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStoredEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'Context', [in] uint32 'ContextSize', [out] uint32& 'ContextUsed', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatusWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetManagedStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANRESET' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTraceEx'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTraceEx'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetContextStackTraceEx'([in] native int 'StartContext', [in] uint32 'StartContextSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputContextStackTraceEx'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByGuid'([in] valuetype ['mscorlib']'System'.'Guid' marshal(lpstruct) 'Guid', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint3'& 'Bp')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugControl6'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl5', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl4', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugControl'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 62 63 30 64 35 38 33 66 2D 31 32 36 64 2D 34 33 61 31 2D 39 63 63 34 2D 61 38 36 30 61 62 31 64 35 33 37 62 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterrupt'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterrupt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_INTERRUPT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterruptTimeout'([out] uint32& 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetInterruptTimeout'([in] uint32 'Seconds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile'([in] string marshal(lpstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CloseLogFile'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetLogMask'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Input'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInput'([in] string marshal(lpstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutput'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPrompt'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaList'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptText'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputCurrentState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CURRENT' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVersionInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNotifyEventHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNotifyEventHandle'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Assemble'([in] uint64 'Offset', [in] string marshal(lpstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Disassemble'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDisassembleEffectiveOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassembly'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputDisassemblyLines'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint32 'PreviousLines', [in] uint32 'TotalLines', [in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] uint32& 'OffsetLine', [out] uint64& 'StartOffset', [out] uint64& 'EndOffset', [out] uint64[] marshal([]) 'LineOffsets')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearInstruction'([in] uint64 'Offset', [in] int32 'Delta', [out] uint64& 'NearOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTrace'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetReturnOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDebuggeeType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS'& 'Class', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CLASS_QUALIFIER'& 'Qualifier')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetActualProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutingProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPossibleExecutingProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPossibleExecutingProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcessors'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersion'([out] uint32& 'PlatformId', [out] uint32& 'Major', [out] uint32& 'Minor', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ServicePackString', [in] int32 'ServicePackStringSize', [out] uint32& 'ServicePackStringUsed', [out] uint32& 'ServicePackNumber', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'BuildString', [in] int32 'BuildStringSize', [out] uint32& 'BuildStringUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPageSize'([out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsPointer64Bit'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBugCheckData'([out] uint32& 'Code', [out] uint64& 'Arg1', [out] uint64& 'Arg2', [out] uint64& 'Arg3', [out] uint64& 'Arg4')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSupportedProcessorTypes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSupportedProcessorTypes'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'[] marshal([]) 'Types')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNames'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEffectiveProcessorType'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE'& 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEffectiveProcessorType'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExecutionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCodeLevel'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL'& 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCodeLevel'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LEVEL' 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEngineOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEngineOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ENGOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemErrorControl'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'OutputLevel', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL'& 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSystemErrorControl'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'OutputLevel', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'ERROR_LEVEL' 'BreakLevel')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacro'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacro'([in] uint32 'Slot', [in] string marshal(lpstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetRadix'([out] uint32& 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetRadix'([in] uint32 'Radix')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Evaluate'([in] string marshal(lpstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValue'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CoerceValues'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'In', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE'[] marshal([]) 'OutType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Out')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Execute'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFile'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberBreakpoints'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Ids', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtension'([in] string marshal(lpstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveExtension'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPath'([in] string marshal(lpstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtension'([in] uint64 'Handle', [in] string marshal(lpstr) 'Function', [in] string marshal(lpstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunction'([in] uint64 'Handle', [in] string marshal(lpstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis32'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS32'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetWindbgExtensionApis64'([in][out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'WINDBG_EXTENSION_APIS64'& 'Api')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEventFilters'([out] uint32& 'SpecificEvents', [out] uint32& 'SpecificExceptions', [out] uint32& 'ArbitraryExceptions')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificFilterParameters'([in] uint32 'Start', [in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SPECIFIC_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgument'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgument'([in] uint32 'Index', [in] string marshal(lpstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterParameters'([in] uint32 'Count', [in] uint32[] marshal([]) 'Codes', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterParameters'([in] uint32 'Count', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXCEPTION_FILTER_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommand'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommand'([in] uint32 'Index', [in] string marshal(lpstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WaitForEvent'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_WAIT' 'Flags', [in] uint32 'Timeout')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentTimeDate'([out] uint32& 'TimeDate')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDumpFormatFlags'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FORMAT'& 'FormatFlags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberTextReplacements'([out] uint32& 'NumRepl')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacement'([in] string marshal(lpstr) 'SrcText', [in] string marshal(lpstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTextReplacements'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTextReplacements'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUT_TEXT_REPL' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetAssemblyOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetAssemblyOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ASMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntax'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntax'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXPR' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByName'([in] string marshal(lpstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberExpressionSyntaxes'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNames'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberEvents'([out] uint32& 'Events')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescription'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentEventIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetNextEventIndex'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Relation', [in] uint32 'Value', [out] uint32& 'NextIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFileWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] bool& marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFileWide'([in] string marshal(lpwstr) 'File', [in] bool marshal(bool) 'Append')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'InputWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'InputSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReturnInputWide'([in] string marshal(lpwstr) 'Buffer')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ControlledOutputVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputPromptVaListWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Format', [in] native int 'va_list_Args')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPromptTextWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AssembleWide'([in] uint64 'Offset', [in] string marshal(lpwstr) 'Instr', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'DisassembleWide'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DISASM' 'Flags', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DisassemblySize', [out] uint64& 'EndOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessorTypeNamesWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'Type', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextMacroWide'([in] uint32 'Slot', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MacroSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextMacroWide'([in] uint32 'Slot', [in] string marshal(lpwstr) 'Macro')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EvaluateWide'([in] string marshal(lpwstr) 'Expression', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE_TYPE' 'DesiredType', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value', [out] uint32& 'RemainderIndex')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'Command', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExecuteCommandFileWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] string marshal(lpwstr) 'CommandFile', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EXECUTE' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByIndex2'([in] uint32 'Index', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointById2'([in] uint32 'Id', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddBreakpoint2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_BREAKPOINT_TYPE' 'Type', [in] uint32 'DesiredId', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2'& marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveBreakpoint2'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddExtensionWide'([in] string marshal(lpwstr) 'Path', [in] uint32 'Flags', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionByPathWide'([in] string marshal(lpwstr) 'Path', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CallExtensionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'Function', [in] string marshal(lpwstr) 'Arguments')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExtensionFunctionWide'([in] uint64 'Handle', [in] string marshal(lpwstr) 'FuncName', [out] native int& 'Function')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterTextWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'TextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventFilterCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetEventFilterCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSpecificEventFilterArgumentWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ArgumentSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSpecificEventFilterArgumentWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExceptionFilterSecondCommandWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'CommandSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExceptionFilterSecondCommandWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Command')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLastEventInformationWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'ExtraInformation', [in] int32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Description', [in] int32 'DescriptionSize', [out] uint32& 'DescriptionUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'SrcBuffer', [in] int32 'SrcBufferSize', [out] uint32& 'SrcSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'DstBuffer', [in] int32 'DstBufferSize', [out] uint32& 'DstSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTextReplacementWide'([in] string marshal(lpwstr) 'SrcText', [in] string marshal(lpwstr) 'DstText')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetExpressionSyntaxByNameWide'([in] string marshal(lpwstr) 'AbbrevName')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExpressionSyntaxNamesWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FullNameBuffer', [in] int32 'FullNameBufferSize', [out] uint32& 'FullNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'AbbrevNameBuffer', [in] int32 'AbbrevNameBufferSize', [out] uint32& 'AbbrevNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventIndexDescriptionWide'([in] uint32 'Index', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EINDEX' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'DescSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2'([in] string marshal(lpstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLogFile2Wide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FileSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OpenLogFile2Wide'([in] string marshal(lpwstr) 'File', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_LOG'& 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionValues'([out] uint32& 'PlatformId', [out] uint32& 'Win32Major', [out] uint32& 'Win32Minor', [out] uint32& 'KdMajor', [out] uint32& 'KdMinor')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemVersionStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYSVERSTR' 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetContextStackTrace'([in] native int 'StartContext', [in] uint32 'StartContextSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FrameSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputContextStackTrace'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStoredEventInformation'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Type', [out] uint32& 'ProcessId', [out] uint32& 'ThreadId', [in] native int 'Context', [in] uint32 'ContextSize', [out] uint32& 'ContextUsed', [in] native int 'ExtraInformation', [in] uint32 'ExtraInformationSize', [out] uint32& 'ExtraInformationUsed')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatus'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetManagedStatusWide'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANAGED'& 'Flags', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANSTR' 'WhichString', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'String', [in] int32 'StringSize', [out] uint32& 'StringNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetManagedStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MANRESET' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackTraceEx'([in] uint64 'FrameOffset', [in] uint64 'StackOffset', [in] uint64 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputStackTraceEx'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetContextStackTraceEx'([in] native int 'StartContext', [in] uint32 'StartContextSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [out] uint32& 'FramesFilled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputContextStackTraceEx'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'[] marshal([]) 'Frames', [in] int32 'FramesSize', [in] native int 'FrameContexts', [in] uint32 'FrameContextsSize', [in] uint32 'FrameContextsEntrySize', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetBreakpointByGuid'([in] valuetype ['mscorlib']'System'.'Guid' marshal(lpstruct) 'Guid', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint3'& 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetExecutionStatusEx'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STATUS'& 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSynchronizationStatus'([out] uint32& 'SendsAttempted', [out] uint32& 'SecondsSinceLastResponse')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugDataSpaces'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 38 38 66 37 64 66 61 62 2D 33 65 61 37 2D 34 63 33 61 2D 61 65 66 62 2D 63 34 65 38 31 30 36 31 37 33 61 61 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtual'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtual'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SearchVirtual'([in] uint64 'Offset', [in] uint64 'Length', [in] uint8[] marshal([ + 3]) 'pattern', [in] uint32 'PatternSize', [in] uint32 'PatternGranularity', [out] uint64& 'MatchOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtualUncached'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtualUncached'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [out] uint64[] marshal([ + 0]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [in] uint64[] marshal([]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPhysical'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePhysical'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadControl'([in] uint32 'Processor', [in] uint64 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteControl'([in] uint32 'Processor', [in] uint64 'Offset', [in] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMsr'([in] uint32 'Msr', [out] uint64& 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteMsr'([in] uint32 'Msr', [in] uint64 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CheckLowMemory'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadDebuggerData'([in] uint32 'Index', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadProcessorSystemData'([in] uint32 'Processor', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'Index', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugDataSpaces2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 37 61 35 65 38 35 32 66 2D 39 36 65 39 2D 34 36 38 66 2D 61 63 31 62 2D 30 62 33 61 64 64 63 34 61 30 34 39 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtual'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtual'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SearchVirtual'([in] uint64 'Offset', [in] uint64 'Length', [in] uint8[] marshal([ + 3]) 'pattern', [in] uint32 'PatternSize', [in] uint32 'PatternGranularity', [out] uint64& 'MatchOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtualUncached'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtualUncached'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [out] uint64[] marshal([ + 0]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [in] uint64[] marshal([]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPhysical'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePhysical'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadControl'([in] uint32 'Processor', [in] uint64 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteControl'([in] uint32 'Processor', [in] uint64 'Offset', [in] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMsr'([in] uint32 'Msr', [out] uint64& 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteMsr'([in] uint32 'Msr', [in] uint64 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CheckLowMemory'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadDebuggerData'([in] uint32 'Index', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadProcessorSystemData'([in] uint32 'Processor', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'Index', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'VirtualToPhysical'([in] uint64 'Virtual', [out] uint64& 'Physical')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetVirtualTranslationPhysicalOffsets'([in] uint64 'Virtual', [out] uint64[] marshal([]) 'Offsets', [in] uint32 'OffsetsSize', [out] uint32& 'Levels')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadHandleData'([in] uint64 'Handle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'DataType', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillVirtual'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillPhysical'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'QueryVirtual'([in] uint64 'Offset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEMORY_BASIC_INFORMATION64'& 'Info')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugDataSpaces3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 32 33 66 37 39 64 36 63 2D 38 61 61 66 2D 34 66 37 63 2D 61 36 30 37 2D 39 39 39 35 66 35 34 30 37 65 36 33 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtual'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtual'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SearchVirtual'([in] uint64 'Offset', [in] uint64 'Length', [in] uint8[] marshal([ + 3]) 'pattern', [in] uint32 'PatternSize', [in] uint32 'PatternGranularity', [out] uint64& 'MatchOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtualUncached'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtualUncached'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [out] uint64[] marshal([ + 0]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [in] uint64[] marshal([]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPhysical'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePhysical'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadControl'([in] uint32 'Processor', [in] uint64 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteControl'([in] uint32 'Processor', [in] uint64 'Offset', [in] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMsr'([in] uint32 'Msr', [out] uint64& 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteMsr'([in] uint32 'Msr', [in] uint64 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CheckLowMemory'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadDebuggerData'([in] uint32 'Index', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadProcessorSystemData'([in] uint32 'Processor', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'Index', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'VirtualToPhysical'([in] uint64 'Virtual', [out] uint64& 'Physical')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetVirtualTranslationPhysicalOffsets'([in] uint64 'Virtual', [out] uint64[] marshal([]) 'Offsets', [in] uint32 'OffsetsSize', [out] uint32& 'Levels')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadHandleData'([in] uint64 'Handle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'DataType', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillVirtual'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillPhysical'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'QueryVirtual'([in] uint64 'Offset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEMORY_BASIC_INFORMATION64'& 'Info')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadImageNtHeaders'([in] uint64 'ImageBase', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_NT_HEADERS64'& 'Headers')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTagged'([in] valuetype ['mscorlib']'System'.'Guid' marshal(lpstruct) 'Tag', [in] uint32 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'TotalSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartEnumTagged'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextTagged'([in] uint64 'Handle', [out] valuetype ['mscorlib']'System'.'Guid'& 'Tag', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndEnumTagged'([in] uint64 'Handle')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugDataSpaces4'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugDataSpaces'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 64 39 38 61 64 61 31 66 2D 32 39 65 39 2D 34 65 66 35 2D 61 36 63 30 2D 65 35 33 33 34 39 38 38 33 32 31 32 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtual'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtual'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SearchVirtual'([in] uint64 'Offset', [in] uint64 'Length', [in] uint8[] marshal([ + 3]) 'pattern', [in] uint32 'PatternSize', [in] uint32 'PatternGranularity', [out] uint64& 'MatchOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadVirtualUncached'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteVirtualUncached'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [out] uint64[] marshal([ + 0]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePointersVirtual'([in] uint32 'Count', [in] uint64 'Offset', [in] uint64[] marshal([]) 'Ptrs')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPhysical'([in] uint64 'Offset', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePhysical'([in] uint64 'Offset', [in] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadControl'([in] uint32 'Processor', [in] uint64 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteControl'([in] uint32 'Processor', [in] uint64 'Offset', [in] uint8[] marshal([ + 3]) 'buffer', [in] int32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteIo'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceType', [in] uint32 'BusNumber', [in] uint32 'AddressSpace', [in] uint64 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMsr'([in] uint32 'Msr', [out] uint64& 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteMsr'([in] uint32 'Msr', [in] uint64 'MsrValue')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [out] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteBusData'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'BUS_DATA_TYPE' 'BusDataType', [in] uint32 'BusNumber', [in] uint32 'SlotNumber', [in] uint32 'Offset', [in] uint8[] marshal([ + 5]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CheckLowMemory'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadDebuggerData'([in] uint32 'Index', [out] uint8[] marshal([ + 2]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadProcessorSystemData'([in] uint32 'Processor', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA' 'Index', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'VirtualToPhysical'([in] uint64 'Virtual', [out] uint64& 'Physical')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetVirtualTranslationPhysicalOffsets'([in] uint64 'Virtual', [out] uint64[] marshal([]) 'Offsets', [in] uint32 'OffsetsSize', [out] uint32& 'Levels')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadHandleData'([in] uint64 'Handle', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_HANDLE_DATA_TYPE' 'DataType', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'DataSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillVirtual'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FillPhysical'([in] uint64 'Start', [in] uint32 'Size', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'PatternSize', [out] uint32& 'Filled')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'QueryVirtual'([in] uint64 'Offset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEMORY_BASIC_INFORMATION64'& 'Info')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadImageNtHeaders'([in] uint64 'ImageBase', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_NT_HEADERS64'& 'Headers')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTagged'([in] valuetype ['mscorlib']'System'.'Guid' marshal(lpstruct) 'Tag', [in] uint32 'Offset', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'TotalSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartEnumTagged'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextTagged'([in] uint64 'Handle', [out] valuetype ['mscorlib']'System'.'Guid'& 'Tag', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndEnumTagged'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_DATA_SPACE' 'Space', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSINFO' 'Which', [in] uint64 'Offset', [out] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'InfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextDifferentlyValidOffsetVirtual'([in] uint64 'Offset', [out] uint64& 'NextOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValidRegionVirtual'([in] uint64 'Base', [in] uint32 'Size', [out] uint64& 'ValidBase', [out] uint32& 'ValidSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SearchVirtual2'([in] uint64 'Offset', [in] uint64 'Length', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VSEARCH' 'Flags', [in] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'PatternSize', [in] uint32 'PatternGranularity', [out] uint64& 'MatchOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMultiByteStringVirtual'([in] uint64 'Offset', [in] uint32 'MaxBytes', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'StringBytes')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadMultiByteStringVirtualWide'([in] uint64 'Offset', [in] uint32 'MaxBytes', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'CodePage', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'StringBytes')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadUnicodeStringVirtual'([in] uint64 'Offset', [in] uint32 'MaxBytes', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'CODE_PAGE' 'CodePage', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'StringBytes')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadUnicodeStringVirtualWide'([in] uint64 'Offset', [in] uint32 'MaxBytes', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'StringBytes')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadPhysical2'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'Flags', [out] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WritePhysical2'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_PHYSICAL' 'Flags', [in] uint8[] marshal([ + 3]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugEventCallbacks'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 33 33 37 62 65 32 38 62 2D 35 30 33 36 2D 34 64 37 32 2D 62 36 62 66 2D 63 34 35 66 62 62 39 66 32 65 61 61 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterestMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Breakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Exception'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EXCEPTION_RECORD64'& 'Exception', [in] uint32 'FirstChance')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateThread'([in] uint64 'Handle', [in] uint64 'DataOffset', [in] uint64 'StartOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitThread'([in] uint32 'ExitCode')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'ImageFileHandle', [in] uint64 'Handle', [in] uint64 'BaseOffset', [in] uint32 'ModuleSize', [in] string marshal(lpstr) 'ModuleName', [in] string marshal(lpstr) 'ImageName', [in] uint32 'CheckSum', [in] uint32 'TimeDateStamp', [in] uint64 'InitialThreadHandle', [in] uint64 'ThreadDataOffset', [in] uint64 'StartOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitProcess'([in] uint32 'ExitCode')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'LoadModule'([in] uint64 'ImageFileHandle', [in] uint64 'BaseOffset', [in] uint32 'ModuleSize', [in] string marshal(lpstr) 'ModuleName', [in] string marshal(lpstr) 'ImageName', [in] uint32 'CheckSum', [in] uint32 'TimeDateStamp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'UnloadModule'([in] string marshal(lpstr) 'ImageBaseName', [in] uint64 'BaseOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SystemError'([in] uint32 'Error', [in] uint32 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SessionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeDebuggeeState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeEngineState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeSymbolState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugEventCallbacksWide'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 30 36 39 30 65 30 34 36 2D 39 63 32 33 2D 34 35 61 63 2D 61 30 34 66 2D 39 38 37 61 63 32 39 61 64 30 64 33 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterestMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_EVENT'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Breakpoint'([in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugBreakpoint2' marshal(interface) 'Bp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Exception'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'EXCEPTION_RECORD64'& 'Exception', [in] uint32 'FirstChance')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateThread'([in] uint64 'Handle', [in] uint64 'DataOffset', [in] uint64 'StartOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitThread'([in] uint32 'ExitCode')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateProcess'([in] uint64 'ImageFileHandle', [in] uint64 'Handle', [in] uint64 'BaseOffset', [in] uint32 'ModuleSize', [in] string marshal(lpwstr) 'ModuleName', [in] string marshal(lpwstr) 'ImageName', [in] uint32 'CheckSum', [in] uint32 'TimeDateStamp', [in] uint64 'InitialThreadHandle', [in] uint64 'ThreadDataOffset', [in] uint64 'StartOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExitProcess'([in] uint32 'ExitCode')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'LoadModule'([in] uint64 'ImageFileHandle', [in] uint64 'BaseOffset', [in] uint32 'ModuleSize', [in] string marshal(lpwstr) 'ModuleName', [in] string marshal(lpwstr) 'ImageName', [in] uint32 'CheckSum', [in] uint32 'TimeDateStamp')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'UnloadModule'([in] string marshal(lpwstr) 'ImageBaseName', [in] uint64 'BaseOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SystemError'([in] uint32 'Error', [in] uint32 'Level')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SessionStatus'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SESSION' 'Status')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeDebuggeeState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CDS' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeEngineState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CES' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ChangeSymbolState'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_CSS' 'Flags', [in] uint64 'Argument')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugInputCallbacks'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 39 66 35 30 65 34 32 63 2D 66 31 33 36 2D 34 39 39 65 2D 39 61 39 37 2D 37 33 30 33 36 63 39 34 65 64 32 64 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartInput'([in] uint32 'BufferSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndInput'()
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugOutputCallbacks'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 34 62 66 35 38 30 34 35 2D 64 36 35 34 2D 34 63 34 30 2D 62 30 61 66 2D 36 38 33 30 39 30 66 33 35 36 64 63 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Text')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugOutputCallbacks2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugOutputCallbacks'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 36 37 37 32 31 66 65 39 2D 35 36 64 32 2D 34 61 34 34 2D 61 33 32 35 2D 32 62 36 35 35 31 33 63 65 36 65 62 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpstr) 'Text')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInterestMask'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBI'& 'Mask')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCB' 'Which', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCBF' 'Flags', [in] uint64 'Arg', [in] string marshal(lpwstr) 'Text')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugOutputCallbacksWide'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 34 63 37 66 64 36 36 33 2D 63 33 39 34 2D 34 65 32 36 2D 38 65 66 31 2D 33 34 61 64 35 65 64 33 37 36 34 63 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'Output'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT' 'Mask', [in] string marshal(lpwstr) 'Text')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugRegisters'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 63 65 32 38 39 31 32 36 2D 39 65 38 34 2D 34 35 61 37 2D 39 33 37 65 2D 36 37 62 62 31 38 36 39 31 34 39 33 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberRegisters'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDescription'([in] uint32 'Register', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTER_DESCRIPTION'& 'Desc')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIndexByName'([in] string marshal(lpstr) 'Name', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValue'([in] uint32 'Register', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetValue'([in] uint32 'Register', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValues'([in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetValues'([in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputRegisters'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInstructionOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFrameOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugRegisters2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugRegisters'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 31 36 35 36 61 66 61 39 2D 31 39 63 36 2D 34 65 33 61 2D 39 37 65 37 2D 35 64 63 39 31 36 30 63 66 39 63 34 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberRegisters'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDescription'([in] uint32 'Register', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTER_DESCRIPTION'& 'Desc')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIndexByName'([in] string marshal(lpstr) 'Name', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValue'([in] uint32 'Register', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'& 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetValue'([in] uint32 'Register', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE' 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValues'([in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetValues'([in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputRegisters'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTERS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInstructionOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFrameOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetDescriptionWide'([in] uint32 'Register', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGISTER_DESCRIPTION'& 'Desc')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetIndexByNameWide'([in] string marshal(lpwstr) 'Name', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberPseudoRegisters'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPseudoDescription'([in] uint32 'Register', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'TypeModule', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPseudoDescriptionWide'([in] uint32 'Register', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'TypeModule', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPseudoIndexByName'([in] string marshal(lpstr) 'Name', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPseudoIndexByNameWide'([in] string marshal(lpwstr) 'Name', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetPseudoValues'([in] uint32 'Source', [in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetPseudoValues'([in] uint32 'Source', [in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetValues2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_REGSRC' 'Source', [in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetValues2'([in] uint32 'Source', [in] uint32 'Count', [in] uint32[] marshal([]) 'Indices', [in] uint32 'Start', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_VALUE'[] marshal([]) 'Values')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputRegisters2'([in] uint32 'OutputControl', [in] uint32 'Source', [in] uint32 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetInstructionOffset2'([in] uint32 'Source', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetStackOffset2'([in] uint32 'Source', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFrameOffset2'([in] uint32 'Source', [out] uint64& 'Offset')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbolGroup'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 66 32 35 32 38 33 31 36 2D 30 66 31 61 2D 34 34 33 31 2D 61 65 65 64 2D 31 31 64 30 39 36 65 31 65 32 61 62 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSymbols'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbol'([in] string marshal(lpstr) 'Name', [in][out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolByName'([in] string marshal(lpstr) 'Name')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolsByIndex'([in] uint32 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolName'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExpandSymbol'([in] uint32 'Index', [in] bool marshal(bool) 'Expand')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbols'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'Flags', [in] uint32 'Start', [in] uint32 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteSymbol'([in] uint32 'Index', [in] string marshal(lpstr) 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputAsType'([in] uint32 'Index', [in] string marshal(lpstr) 'Type')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbolGroup2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 36 61 37 63 63 63 35 66 2D 66 62 35 65 2D 34 64 63 63 2D 62 34 31 63 2D 36 63 32 30 33 30 37 62 63 63 63 37 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSymbols'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbol'([in] string marshal(lpstr) 'Name', [in][out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolByName'([in] string marshal(lpstr) 'Name')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolsByIndex'([in] uint32 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolName'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolParameters'([in] uint32 'Start', [in] uint32 'Count', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ExpandSymbol'([in] uint32 'Index', [in] bool marshal(bool) 'Expand')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbols'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTPUT_SYMBOLS' 'Flags', [in] uint32 'Start', [in] uint32 'Count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteSymbol'([in] uint32 'Index', [in] string marshal(lpstr) 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputAsType'([in] uint32 'Index', [in] string marshal(lpstr) 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolWide'([in] string marshal(lpwstr) 'Name', [in][out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolByNameWide'([in] string marshal(lpwstr) 'Name')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolNameWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteSymbolWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Value')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputAsTypeWide'([in] uint32 'Index', [in] string marshal(lpwstr) 'Type')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeName'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeNameWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolSize'([in] uint32 'Index', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOffset'([in] uint32 'Index', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolRegister'([in] uint32 'Index', [out] uint32& 'Register')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolValueText'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolValueTextWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryInformation'([in] uint32 'Index', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_ENTRY'& 'Info')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbols'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 38 63 33 31 65 39 38 63 2D 39 38 33 61 2D 34 38 61 35 2D 39 30 31 36 2D 36 66 65 35 64 36 36 37 61 39 35 30 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffset'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByName'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffset'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffset'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberModules'([out] uint32& 'Loaded', [out] uint32& 'Unloaded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByIndex'([in] uint32 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset'([in] uint64 'Offset', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNames'([in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ImageNameBuffer', [in] int32 'ImageNameBufferSize', [out] uint32& 'ImageNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ModuleNameBuffer', [in] int32 'ModuleNameBufferSize', [out] uint32& 'ModuleNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'LoadedImageNameBuffer', [in] int32 'LoadedImageNameBufferSize', [out] uint32& 'LoadedImageNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleParameters'([in] uint32 'Count', [in] uint64[] marshal([]) 'Bases', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModule'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeName'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeId'([in] uint64 'Module', [in] string marshal(lpstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSize'([in] uint64 'Module', [in] uint32 'TypeId', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffset'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeId'([in] string marshal(lpstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetTypeId'([in] uint64 'Offset', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [out] uint8[] marshal([ + 4]) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataVirtual'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataPhysical'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScope'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScope'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetScope'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatch'([in] string marshal(lpstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatch'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSymbolMatch'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Reload'([in] string marshal(lpstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElement'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFile'([in] uint32 'StartElement', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsets'([in] string marshal(lpstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbols2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 33 61 37 30 37 32 31 31 2D 61 66 64 64 2D 34 34 39 35 2D 61 64 34 66 2D 35 36 66 65 63 64 66 38 31 36 33 66 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffset'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByName'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffset'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffset'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberModules'([out] uint32& 'Loaded', [out] uint32& 'Unloaded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByIndex'([in] uint32 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset'([in] uint64 'Offset', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNames'([in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ImageNameBuffer', [in] int32 'ImageNameBufferSize', [out] uint32& 'ImageNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ModuleNameBuffer', [in] int32 'ModuleNameBufferSize', [out] uint32& 'ModuleNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'LoadedImageNameBuffer', [in] int32 'LoadedImageNameBufferSize', [out] uint32& 'LoadedImageNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleParameters'([in] uint32 'Count', [in] uint64[] marshal([]) 'Bases', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModule'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeName'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeId'([in] uint64 'Module', [in] string marshal(lpstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSize'([in] uint64 'Module', [in] uint32 'TypeId', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffset'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeId'([in] string marshal(lpstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetTypeId'([in] uint64 'Offset', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [out] uint8[] marshal([ + 4]) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataVirtual'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataPhysical'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScope'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScope'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetScope'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatch'([in] string marshal(lpstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatch'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSymbolMatch'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Reload'([in] string marshal(lpstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElement'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFile'([in] uint32 'StartElement', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsets'([in] string marshal(lpstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformation'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpstr) 'Item', [out] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbols3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 66 30 32 66 62 65 63 63 2D 35 30 61 63 2D 34 66 33 36 2D 39 61 64 39 2D 63 39 37 35 65 38 66 33 32 66 66 38 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffset'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByName'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffset'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffset'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberModules'([out] uint32& 'Loaded', [out] uint32& 'Unloaded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByIndex'([in] uint32 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset'([in] uint64 'Offset', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNames'([in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ImageNameBuffer', [in] int32 'ImageNameBufferSize', [out] uint32& 'ImageNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ModuleNameBuffer', [in] int32 'ModuleNameBufferSize', [out] uint32& 'ModuleNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'LoadedImageNameBuffer', [in] int32 'LoadedImageNameBufferSize', [out] uint32& 'LoadedImageNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleParameters'([in] uint32 'Count', [in] uint64[] marshal([]) 'Bases', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModule'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeName'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeId'([in] uint64 'Module', [in] string marshal(lpstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSize'([in] uint64 'Module', [in] uint32 'TypeId', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffset'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeId'([in] string marshal(lpstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetTypeId'([in] uint64 'Offset', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [out] uint8[] marshal([ + 4]) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataVirtual'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataPhysical'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScope'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScope'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetScope'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatch'([in] string marshal(lpstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatch'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSymbolMatch'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Reload'([in] string marshal(lpstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElement'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFile'([in] uint32 'StartElement', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsets'([in] string marshal(lpstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformation'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpstr) 'Item', [out] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffsetWide'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByNameWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffsetWide'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffsetWide'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleNameWide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModuleWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeIdWide'([in] uint64 'Module', [in] string marshal(lpwstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffsetWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeIdWide'([in] string marshal(lpwstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup2'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatchWide'([in] string marshal(lpwstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatchWide'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReloadWide'([in] string marshal(lpwstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElementWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileWide'([in] uint32 'StartElement', [in] string marshal(lpwstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsetsWide'([in] string marshal(lpwstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformationWide'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpwstr) 'Item', [in] native int 'Buffer', [in] int32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsManagedModule'([in] uint32 'Index', [in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2Wide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset2'([in] uint64 'Offset', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModule'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpstr) 'ImagePath', [in] string marshal(lpstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModuleWide'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpwstr) 'ImagePath', [in] string marshal(lpwstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticModule'([in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentScopeFrameIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFrameByIndex'([in] uint32 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromJitDebugInfo'([in] uint32 'OutputControl', [in] uint64 'InfoOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromStoredEvent'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbolByOffset'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'Flags', [in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFunctionEntryByOffset'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETFNENT' 'Flags', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BufferNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffset'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffsetWide'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbol'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbolWide'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpwstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticSymbol'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [out] uint64[] marshal([]) 'Displacements', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByName'([in] string marshal(lpstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByNameWide'([in] string marshal(lpwstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryByToken'([in] uint64 'ModuleBase', [in] uint32 'Token', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_ENTRY'& 'Info')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryBySymbolEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'FromId', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'ToId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryBySourceEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'FromEntry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'& 'ToEntry')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbols4'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 65 33 39 31 62 62 64 38 2D 39 64 38 63 2D 34 34 31 38 2D 38 34 30 62 2D 63 30 30 36 35 39 32 61 31 37 35 32 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffset'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByName'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffset'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffset'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberModules'([out] uint32& 'Loaded', [out] uint32& 'Unloaded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByIndex'([in] uint32 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset'([in] uint64 'Offset', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNames'([in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ImageNameBuffer', [in] int32 'ImageNameBufferSize', [out] uint32& 'ImageNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ModuleNameBuffer', [in] int32 'ModuleNameBufferSize', [out] uint32& 'ModuleNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'LoadedImageNameBuffer', [in] int32 'LoadedImageNameBufferSize', [out] uint32& 'LoadedImageNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleParameters'([in] uint32 'Count', [in] uint64[] marshal([]) 'Bases', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModule'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeName'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeId'([in] uint64 'Module', [in] string marshal(lpstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSize'([in] uint64 'Module', [in] uint32 'TypeId', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffset'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeId'([in] string marshal(lpstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetTypeId'([in] uint64 'Offset', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [out] uint8[] marshal([ + 4]) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataVirtual'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataPhysical'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScope'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScope'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetScope'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatch'([in] string marshal(lpstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatch'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSymbolMatch'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Reload'([in] string marshal(lpstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElement'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFile'([in] uint32 'StartElement', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsets'([in] string marshal(lpstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformation'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpstr) 'Item', [out] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffsetWide'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByNameWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffsetWide'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffsetWide'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleNameWide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModuleWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeIdWide'([in] uint64 'Module', [in] string marshal(lpwstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffsetWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeIdWide'([in] string marshal(lpwstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup2'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatchWide'([in] string marshal(lpwstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatchWide'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReloadWide'([in] string marshal(lpwstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElementWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileWide'([in] uint32 'StartElement', [in] string marshal(lpwstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsetsWide'([in] string marshal(lpwstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformationWide'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpwstr) 'Item', [in] native int 'Buffer', [in] int32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsManagedModule'([in] uint32 'Index', [in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2Wide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset2'([in] uint64 'Offset', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModule'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpstr) 'ImagePath', [in] string marshal(lpstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModuleWide'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpwstr) 'ImagePath', [in] string marshal(lpwstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticModule'([in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentScopeFrameIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFrameByIndex'([in] uint32 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromJitDebugInfo'([in] uint32 'OutputControl', [in] uint64 'InfoOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromStoredEvent'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbolByOffset'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'Flags', [in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFunctionEntryByOffset'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETFNENT' 'Flags', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BufferNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffset'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffsetWide'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbol'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbolWide'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpwstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticSymbol'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [out] uint64[] marshal([]) 'Displacements', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByName'([in] string marshal(lpstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByNameWide'([in] string marshal(lpwstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryByToken'([in] uint64 'ModuleBase', [in] uint32 'Token', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_ENTRY'& 'Info')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryBySymbolEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'FromId', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'ToId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryBySourceEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'FromEntry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'& 'ToEntry')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeEx'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeEx'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX' marshal(lpstruct) 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByInlineContext'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByInlineContextWide'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByInlineContext'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByInlineContextWide'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbolByInlineContext'([in] uint32 'OutputControl', [in] uint32 'Flags', [in] uint64 'Offset', [in] uint32 'InlineContext')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSymbols5'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols4', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols3', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols2', 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbols'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 63 36 35 66 61 38 33 65 2D 31 65 36 39 2D 34 37 35 65 2D 38 65 30 65 2D 62 35 64 37 39 65 39 63 63 31 37 65 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffset'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByName'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffset'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffset'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberModules'([out] uint32& 'Loaded', [out] uint32& 'Unloaded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByIndex'([in] uint32 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset'([in] uint64 'Offset', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNames'([in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ImageNameBuffer', [in] int32 'ImageNameBufferSize', [out] uint32& 'ImageNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'ModuleNameBuffer', [in] int32 'ModuleNameBufferSize', [out] uint32& 'ModuleNameSize', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'LoadedImageNameBuffer', [in] int32 'LoadedImageNameBufferSize', [out] uint32& 'LoadedImageNameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleParameters'([in] uint32 'Count', [in] uint64[] marshal([]) 'Bases', [in] uint32 'Start', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_PARAMETERS'[] marshal([]) 'Params')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModule'([in] string marshal(lpstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeName'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeId'([in] uint64 'Module', [in] string marshal(lpstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeSize'([in] uint64 'Module', [in] uint32 'TypeId', [out] uint32& 'Size')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffset'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeId'([in] string marshal(lpstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetTypeId'([in] uint64 'Offset', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [out] uint8[] marshal([ + 4]) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataVirtual'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataVirtual'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReadTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesRead')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'WriteTypedDataPhysical'([in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BytesWritten')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputTypedDataPhysical'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTCTL' 'OutputControl', [in] uint64 'Offset', [in] uint64 'Module', [in] uint32 'TypeId', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScope'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScope'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME' 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ResetScope'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatch'([in] string marshal(lpstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatch'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'EndSymbolMatch'([in] uint64 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'Reload'([in] string marshal(lpstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePath'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElement'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePath'([in] string marshal(lpstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePath'([in] string marshal(lpstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFile'([in] uint32 'StartElement', [in] string marshal(lpstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsets'([in] string marshal(lpstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformation'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpstr) 'Item', [out] uint8[] marshal([ + 4]) 'buffer', [in] uint32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldName'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeOptions'([out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS'& 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetTypeOptions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_TYPEOPTS' 'Options')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByOffsetWide'([in] uint64 'Offset', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByNameWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNearNameByOffsetWide'([in] uint64 'Offset', [in] int32 'Delta', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByOffsetWide'([in] uint64 'Offset', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetOffsetByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleNameWide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolModuleWide'([in] string marshal(lpwstr) 'Symbol', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTypeIdWide'([in] uint64 'Module', [in] string marshal(lpwstr) 'Name', [out] uint32& 'TypeId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldOffsetWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolTypeIdWide'([in] string marshal(lpwstr) 'Symbol', [out] uint32& 'TypeId', [out] uint64& 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeSymbolGroup2'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SCOPE_GROUP' 'Flags', [in] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2' marshal(interface) 'Update', [out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Symbols')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'CreateSymbolGroup2'([out] class 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSymbolGroup2'& marshal(interface) 'Group')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'StartSymbolMatchWide'([in] string marshal(lpwstr) 'Pattern', [out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNextSymbolMatchWide'([in] uint64 'Handle', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'MatchSize', [out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'ReloadWide'([in] string marshal(lpwstr) 'Module')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolPathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSymbolPathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSymbolPathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImagePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImagePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendImagePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathWide'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'PathSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourcePathElementWide'([in] uint32 'Index', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ElementSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetSourcePathWide'([in] string marshal(lpwstr) 'Path')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AppendSourcePathWide'([in] string marshal(lpwstr) 'Addition')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'FindSourceFileWide'([in] uint32 'StartElement', [in] string marshal(lpwstr) 'File', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FIND_SOURCE' 'Flags', [out] uint32& 'FoundElement', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'FoundSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceFileLineOffsetsWide'([in] string marshal(lpwstr) 'File', [out] uint64[] marshal([]) 'Buffer', [in] int32 'BufferLines', [out] uint32& 'FileLines')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleVersionInformationWide'([in] uint32 'Index', [in] uint64 'Base', [in] string marshal(lpwstr) 'Item', [in] native int 'Buffer', [in] int32 'BufferSize', [out] uint32& 'VerInfoSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleNameStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODNAME' 'Which', [in] uint32 'Index', [in] uint64 'Base', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetConstantNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint64 'Value', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldNameWide'([in] uint64 'Module', [in] uint32 'TypeId', [in] uint32 'FieldIndex', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'NameSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'IsManagedModule'([in] uint32 'Index', [in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2'([in] string marshal(lpstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByModuleName2Wide'([in] string marshal(lpwstr) 'Name', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetModuleByOffset2'([in] uint64 'Offset', [in] uint32 'StartIndex', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETMOD' 'Flags', [out] uint32& 'Index', [out] uint64& 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModule'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpstr) 'ImagePath', [in] string marshal(lpstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticModuleWide'([in] uint64 'Base', [in] uint32 'Size', [in] string marshal(lpwstr) 'ImagePath', [in] string marshal(lpwstr) 'ModuleName', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHMOD' 'Flags')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticModule'([in] uint64 'Base')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentScopeFrameIndex'([out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFrameByIndex'([in] uint32 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromJitDebugInfo'([in] uint32 'OutputControl', [in] uint64 'InfoOffset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFromStoredEvent'()
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbolByOffset'([in] uint32 'OutputControl', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OUTSYM' 'Flags', [in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFunctionEntryByOffset'([in] uint64 'Offset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_GETFNENT' 'Flags', [in] native int 'Buffer', [in] uint32 'BufferSize', [out] uint32& 'BufferNeeded')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffset'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetFieldTypeAndOffsetWide'([in] uint64 'Module', [in] uint32 'ContainerTypeId', [in] string marshal(lpwstr) 'Field', [out] uint32& 'FieldTypeId', [out] uint32& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbol'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'AddSyntheticSymbolWide'([in] uint64 'Offset', [in] uint32 'Size', [in] string marshal(lpwstr) 'Name', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_ADDSYNTHSYM' 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'RemoveSyntheticSymbol'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [out] uint64[] marshal([]) 'Displacements', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByName'([in] string marshal(lpstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntriesByNameWide'([in] string marshal(lpwstr) 'Symbol', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'[] marshal([]) 'Ids', [in] uint32 'IdsCount', [out] uint32& 'Entries')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryByToken'([in] uint64 'ModuleBase', [in] uint32 'Token', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryInformation'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_ENTRY'& 'Info')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'Id', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSymbolEntryBySymbolEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID' marshal(lpstruct) 'FromId', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_MODULE_AND_ID'& 'ToId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByOffset'([in] uint64 'Offset', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLine'([in] uint32 'Line', [in] string marshal(lpstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntriesByLineWide'([in] uint32 'Line', [in] string marshal(lpwstr) 'File', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'[] marshal([]) 'Entries', [in] uint32 'EntriesCount', [out] uint32& 'EntriesAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryString'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryStringWide'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Which', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'StringSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryOffsetRegions'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'Entry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_OFFSET_REGION'[] marshal([]) 'Regions', [in] uint32 'RegionsCount', [out] uint32& 'RegionsAvail')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSourceEntryBySourceEntry'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY' marshal(lpstruct) 'FromEntry', [in] uint32 'Flags', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMBOL_SOURCE_ENTRY'& 'ToEntry')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetScopeEx'([out] uint64& 'InstructionOffset', [out] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX'& 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeEx'([in] uint64 'InstructionOffset', [in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_STACK_FRAME_EX' marshal(lpstruct) 'ScopeFrame', [in] native int 'ScopeContext', [in] uint32 'ScopeContextSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByInlineContext'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNameByInlineContextWide'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'NameBuffer', [in] int32 'NameBufferSize', [out] uint32& 'NameSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByInlineContext'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetLineByInlineContextWide'([in] uint64 'Offset', [in] uint32 'InlineContext', [out] uint32& 'Line', [out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpwstr) 'FileBuffer', [in] int32 'FileBufferSize', [out] uint32& 'FileSize', [out] uint64& 'Displacement')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'OutputSymbolByInlineContext'([in] uint32 'OutputControl', [in] uint32 'Flags', [in] uint64 'Offset', [in] uint32 'InlineContext')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentScopeFrameIndexEx'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FRAME' 'Flags', [out] uint32& 'Index')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetScopeFrameByIndexEx'([in] valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_FRAME' 'Flags', [in] uint32 'Index')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSystemObjects'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 36 62 38 36 66 65 32 63 2D 32 63 34 66 2D 34 66 30 63 2D 39 64 61 32 2D 31 37 34 33 31 31 61 63 63 33 32 37 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventThread'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventProcess'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentThreadId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentProcessId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberThreads'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTotalNumberThreads'([out] uint32& 'Total', [out] uint32& 'LargestProcess')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByProcessor'([in] uint32 'Processor', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadTeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByTeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcesses'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessPeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByPeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessExecutableName'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExeSize')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSystemObjects2'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSystemObjects'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 30 61 65 39 66 35 66 66 2D 31 38 35 32 2D 34 36 37 39 2D 62 30 35 35 2D 34 39 34 62 65 65 36 34 30 37 65 65 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventThread'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventProcess'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentThreadId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentProcessId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberThreads'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTotalNumberThreads'([out] uint32& 'Total', [out] uint32& 'LargestProcess')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByProcessor'([in] uint32 'Processor', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadTeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByTeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcesses'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessPeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByPeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessExecutableName'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExeSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImplicitThreadDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImplicitThreadDataOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImplicitProcessDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImplicitProcessDataOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
	}
	.class public interface abstract import 'IDebugSystemObjects3'
		implements 'Microsoft.Diagnostics.Runtime.Interop'.'IDebugSystemObjects'
	{
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'GuidAttribute'::.ctor(string) = (01 00 24 65 39 36 37 36 65 32 66 2D 65 32 38 36 2D 34 65 61 33 2D 62 30 66 39 2D 64 66 65 35 64 39 66 63 33 33 30 65 00 00)
		.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'InterfaceTypeAttribute'::.ctor(valuetype ['mscorlib']'System.Runtime.InteropServices'.'ComInterfaceType') = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventThread'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventProcess'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentThreadId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessId'([out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentProcessId'([in] uint32 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberThreads'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTotalNumberThreads'([out] uint32& 'Total', [out] uint32& 'LargestProcess')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByProcessor'([in] uint32 'Processor', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadTeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByTeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentThreadHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetThreadIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberProcesses'([out] uint32& 'Number')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdsByIndex'([in] uint32 'Start', [in] uint32 'Count', [out] uint32[] marshal([]) 'Ids', [out] uint32[] marshal([]) 'SysIds')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByDataOffset'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessPeb'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByPeb'([in] uint64 'Offset', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessSystemId'([out] uint32& 'SysId')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdBySystemId'([in] uint32 'SysId', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessHandle'([out] uint64& 'Handle')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetProcessIdByHandle'([in] uint64 'Handle', [out] uint32& 'Id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessExecutableName'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'Buffer', [in] int32 'BufferSize', [out] uint32& 'ExeSize')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentProcessUpTime'([out] uint32& 'UpTime')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImplicitThreadDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImplicitThreadDataOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetImplicitProcessDataOffset'([out] uint64& 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetImplicitProcessDataOffset'([in] uint64 'Offset')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetEventSystem'([out] uint32& 'id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemId'([out] uint32& 'id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'SetCurrentSystemId'([in] uint32 'id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetNumberSystems'([out] uint32& 'count')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemIdsByIndex'([in] uint32 'start', [in] uint32 'count', [out] uint32[] marshal([]) 'Ids')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetTotalNumberThreadsAndProcesses'([out] uint32& 'totalThreads', [out] uint32& 'totalProcesses', [out] uint32& 'largestProcessThreads', [out] uint32& 'largestSystemThreads', [out] uint32& 'largestSystemProcesses')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemServer'([out] uint64& 'server')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetSystemByServer'([in] uint64 'server', [out] uint32& 'id')
			preservesig 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 'GetCurrentSystemServerName'([out] class ['mscorlib']'System.Text'.'StringBuilder' marshal(lpstr) 'buffer', [in] uint32 'size', [out] uint32& 'needed')
			preservesig 
		{
		}
	}
	.class public sealed 'IG'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint16 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'DISASSEMBLE_BUFFER' = uint16(0x002C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'DUMP_SYMBOL_INFO' = uint16(0x0016)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'FIND_FILE' = uint16(0x0028)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_ANY_MODULE_IN_RANGE' = uint16(0x002D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_BUS_DATA' = uint16(0x0014)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CACHE_SIZE' = uint16(0x0020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CLR_DATA_INTERFACE' = uint16(0x0026)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CONTEXT_EX' = uint16(0x0030)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CURRENT_PROCESS' = uint16(0x001A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CURRENT_PROCESS_HANDLE' = uint16(0x001C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_CURRENT_THREAD' = uint16(0x0019)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_DEBUGGER_DATA' = uint16(0x000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_EXCEPTION_RECORD' = uint16(0x0012)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_EXPRESSION_EX' = uint16(0x001E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_INPUT_LINE' = uint16(0x001D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_KERNEL_VERSION' = uint16(0x000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_PEB_ADDRESS' = uint16(0x0081)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_SET_SYMPATH' = uint16(0x0011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_TEB_ADDRESS' = uint16(0x0080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_THREAD_OS_INFO' = uint16(0x0025)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'GET_TYPE_SIZE' = uint16(0x001B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'IS_PTR64' = uint16(0x0013)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'KD_CONTEXT' = uint16(0x0001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'KSTACK_HELP' = uint16(0x000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'LOWMEM_CHECK' = uint16(0x0017)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'MATCH_PATTERN_A' = uint16(0x0027)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'OBSOLETE_PLACEHOLDER_36' = uint16(0x0024)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'PHYSICAL_TO_VIRTUAL' = uint16(0x002F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'POINTER_SEARCH_PHYSICAL' = uint16(0x0023)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'QUERY_TARGET_INTERFACE' = uint16(0x002A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_CONTROL_SPACE' = uint16(0x0002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_IO_SPACE' = uint16(0x0004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_IO_SPACE_EX' = uint16(0x0008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_MSR' = uint16(0x000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_PHYSICAL' = uint16(0x0006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'READ_PHYSICAL_WITH_FLAGS' = uint16(0x0021)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'RELOAD_SYMBOLS' = uint16(0x0010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'SEARCH_MEMORY' = uint16(0x0018)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'SET_BUS_DATA' = uint16(0x0015)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'SET_THREAD' = uint16(0x000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'TRANSLATE_VIRTUAL_TO_PHYSICAL' = uint16(0x001F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'TYPED_DATA' = uint16(0x002B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'TYPED_DATA_OBSOLETE' = uint16(0x0029)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'VIRTUAL_TO_PHYSICAL' = uint16(0x002E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_CONTROL_SPACE' = uint16(0x0003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_IO_SPACE' = uint16(0x0005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_IO_SPACE_EX' = uint16(0x0009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_MSR' = uint16(0x000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_PHYSICAL' = uint16(0x0007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IG' 'WRITE_PHYSICAL_WITH_FLAGS' = uint16(0x0022)
	}
	.class public sequential sealed 'IMAGEHLP_MODULE64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<CVData>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public char 'FixedElementField'
		}
		.class nested public sequential sealed '<_ImageName>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public char 'FixedElementField'
		}
		.class nested public sequential sealed '<_LoadedImageName>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public char 'FixedElementField'
		}
		.class nested public sequential sealed '<_LoadedPdbName>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public char 'FixedElementField'
		}
		.class nested public sequential sealed '<_ModuleName>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public char 'FixedElementField'
		}
		.method public hidebysig specialname 
			instance bool 'get_PdbUnmatched'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_PdbUnmatched'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_DbgUnmatched'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_DbgUnmatched'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_LineNumbers'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_LineNumbers'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_GlobalSymbols'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_GlobalSymbols'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_TypeInfo'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_TypeInfo'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_SourceIndexed'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_SourceIndexed'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Publics'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Publics'(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_ModuleName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_ImageName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_LoadedImageName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_LoadedPdbName'()
		{
			ret
		}
		.field public uint32 'SizeOfStruct'
		.field public uint64 'BaseOfImage'
		.field public uint32 'ImageSize'
		.field public uint32 'TimeDateStamp'
		.field public uint32 'CheckSum'
		.field public uint32 'NumSyms'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'DEBUG_SYMTYPE' 'SymType'
		.field public uint32 'CVSig'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'/'<CVData>e__FixedBuffer' 'CVData'
		.field public uint32 'PdbSig'
		.field public valuetype ['mscorlib']'System'.'Guid' 'PdbSig70'
		.field public uint32 'PdbAge'

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance bool 'DbgUnmatched'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_DbgUnmatched'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_DbgUnmatched'(bool)
		}
		.property instance bool 'GlobalSymbols'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_GlobalSymbols'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_GlobalSymbols'(bool)
		}
		.property instance string 'ImageName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_ImageName'()
		}
		.property instance bool 'LineNumbers'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_LineNumbers'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_LineNumbers'(bool)
		}
		.property instance string 'LoadedImageName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_LoadedImageName'()
		}
		.property instance string 'LoadedPdbName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_LoadedPdbName'()
		}
		.property instance string 'ModuleName'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_ModuleName'()
		}
		.property instance bool 'PdbUnmatched'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_PdbUnmatched'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_PdbUnmatched'(bool)
		}
		.property instance bool 'Publics'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_Publics'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_Publics'(bool)
		}
		.property instance bool 'SourceIndexed'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_SourceIndexed'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_SourceIndexed'(bool)
		}
		.property instance bool 'TypeInfo'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'get_TypeInfo'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGEHLP_MODULE64'::'set_TypeInfo'(bool)
		}
	}
	.class public sequential sealed 'IMAGE_COR20_HEADER'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'cb'
		.field public uint16 'MajorRuntimeVersion'
		.field public uint16 'MinorRuntimeVersion'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'MetaData'
		.field public uint32 'Flags'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_COR20_HEADER_ENTRYPOINT' 'EntryPoint'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'Resources'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'StrongNameSignature'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'CodeManagerTable'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'VTableFixups'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'ExportAddressTableJumps'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'ManagedNativeHeader'
	}
	.class public explicit sealed 'IMAGE_COR20_HEADER_ENTRYPOINT'
		extends ['mscorlib']'System'.'ValueType'
	{

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed 'IMAGE_DATA_DIRECTORY'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'VirtualAddress'
		.field public uint32 'Size'
	}
	.class public explicit sealed 'IMAGE_DOS_HEADER'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<e_res2>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint16 'FixedElementField'
		}
		.class nested public sequential sealed '<e_res>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint16 'FixedElementField'
		}
		.field [0] public uint16 'e_magic'
		.field [2] public uint16 'e_cblp'
		.field [4] public uint16 'e_cp'
		.field [6] public uint16 'e_crlc'
		.field [8] public uint16 'e_cparhdr'
		.field [10] public uint16 'e_minalloc'
		.field [12] public uint16 'e_maxalloc'
		.field [14] public uint16 'e_ss'
		.field [16] public uint16 'e_sp'
		.field [18] public uint16 'e_csum'
		.field [20] public uint16 'e_ip'
		.field [22] public uint16 'e_cs'
		.field [24] public uint16 'e_lfarlc'
		.field [26] public uint16 'e_ovno'
		.field [28] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DOS_HEADER'/'<e_res>e__FixedBuffer' 'e_res'
		.field [36] public uint16 'e_oemid'
		.field [38] public uint16 'e_oeminfo'
		.field [40] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DOS_HEADER'/'<e_res2>e__FixedBuffer' 'e_res2'
		.field [60] public uint32 'e_lfanew'
	}
	.class public explicit sealed 'IMAGE_FILE_HEADER'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint16 'Machine'
		.field [2] public uint16 'NumberOfSections'
		.field [4] public uint32 'TimeDateStamp'
		.field [8] public uint32 'PointerToSymbolTable'
		.field [12] public uint32 'NumberOfSymbols'
		.field [16] public uint16 'SizeOfOptionalHeader'
		.field [18] public uint16 'Characteristics'
	}
	.class public sealed 'IMAGE_FILE_MACHINE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'ALPHA' = uint32(0x00000184)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'ALPHA64' = uint32(0x00000284)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'AM33' = uint32(0x000001D3)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'AMD64' = uint32(0x00008664)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'ARM' = uint32(0x000001C0)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'AXP64' = uint32(0x00000284)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'CEE' = uint32(0x0000C0EE)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'CEF' = uint32(0x00000CEF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'EBC' = uint32(0x00000EBC)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'I386' = uint32(0x0000014C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'IA64' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'M32R' = uint32(0x00009041)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'MIPS16' = uint32(0x00000266)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'MIPSFPU' = uint32(0x00000366)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'MIPSFPU16' = uint32(0x00000466)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'POWERPC' = uint32(0x000001F0)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'POWERPCFP' = uint32(0x000001F1)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'R10000' = uint32(0x00000168)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'R3000' = uint32(0x00000162)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'R4000' = uint32(0x00000166)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'SH3' = uint32(0x000001A2)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'SH3DSP' = uint32(0x000001A3)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'SH3E' = uint32(0x000001A4)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'SH4' = uint32(0x000001A6)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'SH5' = uint32(0x000001A8)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'THUMB' = uint32(0x000001C2)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'THUMB2' = uint32(0x000001C4)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'TRICORE' = uint32(0x00000520)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'UNKNOWN' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_MACHINE' 'WCEMIPSV2' = uint32(0x00000169)
	}
	.class public explicit sealed 'IMAGE_IMPORT_DESCRIPTOR'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint32 'Characteristics'
		.field [0] public uint32 'OriginalFirstThunk'
		.field [4] public uint32 'TimeDateStamp'
		.field [8] public uint32 'ForwarderChain'
		.field [12] public uint32 'Name'
		.field [16] public uint32 'FirstThunk'
	}
	.class public explicit sealed 'IMAGE_NT_HEADERS32'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint32 'Signature'
		.field [4] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_HEADER' 'FileHeader'
		.field [24] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_OPTIONAL_HEADER32' 'OptionalHeader'
	}
	.class public explicit sealed 'IMAGE_NT_HEADERS64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint32 'Signature'
		.field [4] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_FILE_HEADER' 'FileHeader'
		.field [24] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_OPTIONAL_HEADER64' 'OptionalHeader'
	}
	.class public explicit sealed 'IMAGE_OPTIONAL_HEADER32'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public static hidebysig 
			valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY'* 'GetDataDirectory'(valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_OPTIONAL_HEADER32'* 'header', int32 'zeroBasedIndex')
		{
			ret
		}
		.field [0] public uint16 'Magic'
		.field [2] public uint8 'MajorLinkerVersion'
		.field [3] public uint8 'MinorLinkerVersion'
		.field [4] public uint32 'SizeOfCode'
		.field [8] public uint32 'SizeOfInitializedData'
		.field [12] public uint32 'SizeOfUninitializedData'
		.field [16] public uint32 'AddressOfEntryPoint'
		.field [20] public uint32 'BaseOfCode'
		.field [24] public uint32 'BaseOfData'
		.field [28] public uint32 'ImageBase'
		.field [32] public uint32 'SectionAlignment'
		.field [36] public uint32 'FileAlignment'
		.field [40] public uint16 'MajorOperatingSystemVersion'
		.field [42] public uint16 'MinorOperatingSystemVersion'
		.field [44] public uint16 'MajorImageVersion'
		.field [46] public uint16 'MinorImageVersion'
		.field [48] public uint16 'MajorSubsystemVersion'
		.field [50] public uint16 'MinorSubsystemVersion'
		.field [52] public uint32 'Win32VersionValue'
		.field [56] public uint32 'SizeOfImage'
		.field [60] public uint32 'SizeOfHeaders'
		.field [64] public uint32 'CheckSum'
		.field [68] public uint16 'Subsystem'
		.field [70] public uint16 'DllCharacteristics'
		.field [72] public uint32 'SizeOfStackReserve'
		.field [76] public uint32 'SizeOfStackCommit'
		.field [80] public uint32 'SizeOfHeapReserve'
		.field [84] public uint32 'SizeOfHeapCommit'
		.field [88] public uint32 'LoaderFlags'
		.field [92] public uint32 'NumberOfRvaAndSizes'
		.field [96] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory0'
		.field [104] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory1'
		.field [112] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory2'
		.field [120] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory3'
		.field [128] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory4'
		.field [136] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory5'
		.field [144] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory6'
		.field [152] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory7'
		.field [160] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory8'
		.field [168] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory9'
		.field [176] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory10'
		.field [284] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory11'
		.field [292] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory12'
		.field [300] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory13'
		.field [308] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory14'
		.field [316] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory15'
	}
	.class public explicit sealed 'IMAGE_OPTIONAL_HEADER64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public static hidebysig 
			valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY'* 'GetDataDirectory'(valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_OPTIONAL_HEADER64'* 'header', int32 'zeroBasedIndex')
		{
			ret
		}
		.field [0] public uint16 'Magic'
		.field [2] public uint8 'MajorLinkerVersion'
		.field [3] public uint8 'MinorLinkerVersion'
		.field [4] public uint32 'SizeOfCode'
		.field [8] public uint32 'SizeOfInitializedData'
		.field [12] public uint32 'SizeOfUninitializedData'
		.field [16] public uint32 'AddressOfEntryPoint'
		.field [20] public uint32 'BaseOfCode'
		.field [24] public uint64 'ImageBase'
		.field [32] public uint32 'SectionAlignment'
		.field [36] public uint32 'FileAlignment'
		.field [40] public uint16 'MajorOperatingSystemVersion'
		.field [42] public uint16 'MinorOperatingSystemVersion'
		.field [44] public uint16 'MajorImageVersion'
		.field [46] public uint16 'MinorImageVersion'
		.field [48] public uint16 'MajorSubsystemVersion'
		.field [50] public uint16 'MinorSubsystemVersion'
		.field [52] public uint32 'Win32VersionValue'
		.field [56] public uint32 'SizeOfImage'
		.field [60] public uint32 'SizeOfHeaders'
		.field [64] public uint32 'CheckSum'
		.field [68] public uint16 'Subsystem'
		.field [70] public uint16 'DllCharacteristics'
		.field [72] public uint64 'SizeOfStackReserve'
		.field [80] public uint64 'SizeOfStackCommit'
		.field [88] public uint64 'SizeOfHeapReserve'
		.field [96] public uint64 'SizeOfHeapCommit'
		.field [104] public uint32 'LoaderFlags'
		.field [108] public uint32 'NumberOfRvaAndSizes'
		.field [112] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory0'
		.field [120] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory1'
		.field [128] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory2'
		.field [136] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory3'
		.field [144] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory4'
		.field [152] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory5'
		.field [160] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory6'
		.field [168] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory7'
		.field [176] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory8'
		.field [184] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory9'
		.field [192] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory10'
		.field [200] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory11'
		.field [208] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory12'
		.field [216] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory13'
		.field [224] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory14'
		.field [232] public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'IMAGE_DATA_DIRECTORY' 'DataDirectory15'
	}
	.class public explicit sealed 'IMAGE_THUNK_DATA32'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint32 'ForwarderString'
		.field [0] public uint32 'Function'
		.field [0] public uint32 'Ordinal'
		.field [0] public uint32 'AddressOfData'
	}
	.class public explicit sealed 'IMAGE_THUNK_DATA64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint64 'ForwarderString'
		.field [0] public uint64 'Function'
		.field [0] public uint64 'Ordinal'
		.field [0] public uint64 'AddressOfData'
	}
	.class public sealed 'INTERFACE_TYPE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'CBus' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'Eisa' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InterfaceTypeUndefined' = int32(0xFFFFFFFF)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'Internal' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'InternalPowerBus' = int32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'Isa' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'MPIBus' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'MPSABus' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'MaximumInterfaceType' = int32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'MicroChannel' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'NuBus' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'PCIBus' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'PCMCIABus' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'PNPBus' = int32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'PNPISABus' = int32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'ProcessorInternal' = int32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'TurboChannel' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'VMEBus' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'INTERFACE_TYPE' 'Vmcs' = int32(0x00000010)
	}
	.class public explicit sealed 'LANGANDCODEPAGE'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field [0] public uint16 'wLanguage'
		.field [2] public uint16 'wCodePage'
	}
	.class public sealed 'MEM'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'COMMIT' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'DECOMMIT' = uint32(0x00004000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'FOURMB_PAGES' = uint32(0x80000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'FREE' = uint32(0x00010000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'IMAGE' = uint32(0x01000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'LARGE_PAGES' = uint32(0x20000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'MAPPED' = uint32(0x00040000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'PHYSICAL' = uint32(0x00400000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'PRIVATE' = uint32(0x00020000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'RELEASE' = uint32(0x00008000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'RESERVE' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'RESET' = uint32(0x00080000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'ROTATE' = uint32(0x00800000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'TOP_DOWN' = uint32(0x00100000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'WRITE_WATCH' = uint32(0x00200000)
	}
	.class public sequential sealed 'MEMORY_BASIC_INFORMATION64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint64 'BaseAddress'
		.field public uint64 'AllocationBase'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'AllocationProtect'
		.field public uint32 '__alignment1'
		.field public uint64 'RegionSize'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'State'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'Protect'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MEM' 'Type'
		.field public uint32 '__alignment2'
	}
	.class public sealed 'MODULE_ARCHITECTURE'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ARCHITECTURE' 'ANY' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ARCHITECTURE' 'I386' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ARCHITECTURE' 'IA64' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ARCHITECTURE' 'UNKNOWN' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ARCHITECTURE' 'X64' = int32(0x00000002)
	}
	.class public sealed 'MODULE_ORDERS'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ORDERS' 'LOADTIME' = uint32(0x10000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ORDERS' 'MASK' = uint32(0xF0000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'MODULE_ORDERS' 'MODULENAME' = uint32(0x20000000)
	}
	.class public sealed 'PAGE'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'EXECUTE' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'EXECUTE_READ' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'EXECUTE_READWRITE' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'EXECUTE_WRITECOPY' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'GUARD' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'NOACCESS' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'NOCACHE' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'READONLY' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'READWRITE' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'WRITECOMBINE' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'PAGE' 'WRITECOPY' = uint32(0x00000008)
	}
	.class public sequential sealed 'RECT'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public int32 'left'
		.field public int32 'top'
		.field public int32 'right'
		.field public int32 'bottom'
	}
	.class public sealed 'SEC'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'COMMIT' = uint32(0x08000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'FILE' = uint32(0x00800000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'IMAGE' = uint32(0x01000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'LARGE_PAGES' = uint32(0x80000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'MEM_IMAGE' = uint32(0x01000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'NOCACHE' = uint32(0x10000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'PROTECTED_IMAGE' = uint32(0x02000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'RESERVE' = uint32(0x04000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SEC' 'WRITECOMBINE' = uint32(0x40000000)
	}
	.class public sealed 'SPF_MOVE_METHOD'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SPF_MOVE_METHOD' 'FILE_BEGIN' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SPF_MOVE_METHOD' 'FILE_CURRENT' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SPF_MOVE_METHOD' 'FILE_END' = uint32(0x00000002)
	}
	.class public sealed 'SYMOPT'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'ALLOW_ABSOLUTE_SYMBOLS' = uint32(0x00000800)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'ALLOW_ZERO_ADDRESS' = uint32(0x01000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'AUTO_PUBLICS' = uint32(0x00010000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'CASE_INSENSITIVE' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'DEBUG' = uint32(0x80000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'DEFERRED_LOADS' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'DISABLE_SYMSRV_AUTODETECT' = uint32(0x02000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'EXACT_SYMBOLS' = uint32(0x00000400)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'FAIL_CRITICAL_ERRORS' = uint32(0x00000200)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'FAVOR_COMPRESSED' = uint32(0x00800000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'FLAT_DIRECTORY' = uint32(0x00400000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'IGNORE_CVREC' = uint32(0x00000080)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'IGNORE_IMAGEDIR' = uint32(0x00200000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'IGNORE_NT_SYMPATH' = uint32(0x00001000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'INCLUDE_32BIT_MODULES' = uint32(0x00002000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'LOAD_ANYTHING' = uint32(0x00000040)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'LOAD_LINES' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'NO_CPP' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'NO_IMAGE_SEARCH' = uint32(0x00020000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'NO_PROMPTS' = uint32(0x00080000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'NO_PUBLICS' = uint32(0x00008000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'NO_UNQUALIFIED_LOADS' = uint32(0x00000100)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'OMAP_FIND_NEAREST' = uint32(0x00000020)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'OVERWRITE' = uint32(0x00100000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'PUBLICS_ONLY' = uint32(0x00004000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'SECURE' = uint32(0x00040000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SYMOPT' 'UNDNAME' = uint32(0x00000002)
	}
	.class public sealed 'SymTag'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Annotation' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'ArrayType' = uint32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'BaseClass' = uint32(0x00000012)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'BaseType' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Block' = uint32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Compiland' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'CompilandDetails' = uint32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'CompilandEnv' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Custom' = uint32(0x0000001A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'CustomType' = uint32(0x0000001C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Data' = uint32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Dimension' = uint32(0x0000001E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Enum' = uint32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Exe' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Friend' = uint32(0x00000013)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'FuncDebugEnd' = uint32(0x00000016)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'FuncDebugStart' = uint32(0x00000015)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Function' = uint32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'FunctionArgType' = uint32(0x00000014)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'FunctionType' = uint32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Label' = uint32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'ManagedType' = uint32(0x0000001D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Null' = uint32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'PointerType' = uint32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'PublicSymbol' = uint32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Thunk' = uint32(0x0000001B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'Typedef' = uint32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'UDT' = uint32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'UsingNamespace' = uint32(0x00000017)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'VTable' = uint32(0x00000019)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'SymTag' 'VTableShape' = uint32(0x00000018)
	}
	.class public sealed 'VS_FF'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname uint32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'DEBUG' = uint32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'INFOINFERRED' = uint32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'PATCHED' = uint32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'PRERELEASE' = uint32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'PRIVATEBUILD' = uint32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'SPECIALBUILD' = uint32(0x00000020)
	}
	.class public sequential sealed 'VS_FIXEDFILEINFO'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'dwSignature'
		.field public uint32 'dwStrucVersion'
		.field public uint32 'dwFileVersionMS'
		.field public uint32 'dwFileVersionLS'
		.field public uint32 'dwProductVersionMS'
		.field public uint32 'dwProductVersionLS'
		.field public uint32 'dwFileFlagsMask'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'VS_FF' 'dwFileFlags'
		.field public uint32 'dwFileOS'
		.field public uint32 'dwFileType'
		.field public uint32 'dwFileSubtype'
		.field public uint32 'dwFileDateMS'
		.field public uint32 'dwFileDateLS'
	}
	.class public sequential sealed 'WDBGEXTS_CLR_DATA_INTERFACE'
		extends ['mscorlib']'System'.'ValueType'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(valuetype ['mscorlib']'System'.'Guid'* 'iid')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object 'get_Interface'()
		{
			ret
		}
		.field public valuetype ['mscorlib']'System'.'Guid'* 'Iid'

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance object 'Interface'()
		{
			.get instance object 'Microsoft.Diagnostics.Runtime.Interop'.'WDBGEXTS_CLR_DATA_INTERFACE'::'get_Interface'()
		}
	}
	.class public sequential sealed 'WDBGEXTS_THREAD_OS_INFO'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'ThreadId'
		.field public uint32 'ExitStatus'
		.field public uint32 'PriorityClass'
		.field public uint32 'Priority'
		.field public uint64 'CreateTime'
		.field public uint64 'ExitTime'
		.field public uint64 'KernelTime'
		.field public uint64 'UserTime'
		.field public uint64 'StartOffset'
		.field public uint64 'Affinity'
	}
	.class public sequential sealed 'WINDBG_EXTENSION_APIS32'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'nSize'
		.field public native int 'lpOutputRoutine'
		.field public native int 'lpGetExpressionRoutine'
		.field public native int 'lpGetSymbolRoutine'
		.field public native int 'lpDisasmRoutine'
		.field public native int 'lpCheckControlCRoutine'
		.field public native int 'lpReadProcessMemoryRoutine'
		.field public native int 'lpWriteProcessMemoryRoutine'
		.field public native int 'lpGetThreadContextRoutine'
		.field public native int 'lpSetThreadContextRoutine'
		.field public native int 'lpIoctlRoutine'
		.field public native int 'lpStackTraceRoutine'
	}
	.class public sequential sealed 'WINDBG_EXTENSION_APIS64'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public uint32 'nSize'
		.field public native int 'lpOutputRoutine'
		.field public native int 'lpGetExpressionRoutine'
		.field public native int 'lpGetSymbolRoutine'
		.field public native int 'lpDisasmRoutine'
		.field public native int 'lpCheckControlCRoutine'
		.field public native int 'lpReadProcessMemoryRoutine'
		.field public native int 'lpWriteProcessMemoryRoutine'
		.field public native int 'lpGetThreadContextRoutine'
		.field public native int 'lpSetThreadContextRoutine'
		.field public native int 'lpIoctlRoutine'
		.field public native int 'lpStackTraceRoutine'
	}
	.class public sequential sealed '_DEBUG_TYPED_DATA'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<Internal>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.field public uint64 'ModBase'
		.field public uint64 'Offset'
		.field public uint64 'EngineHandle'
		.field public uint64 'Data'
		.field public uint32 'Size'
		.field public uint32 'Flags'
		.field public uint32 'TypeId'
		.field public uint32 'BaseTypeId'
		.field public uint32 'Tag'
		.field public uint32 'Register'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_DEBUG_TYPED_DATA'/'<Internal>e__FixedBuffer' 'Internal'
	}
	.class public sealed '_EXT_TDOP'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_COPY' = int32(0x00000000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_COUNT' = int32(0x00000013)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_EVALUATE' = int32(0x00000005)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_ARRAY_ELEMENT' = int32(0x0000000C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_DEREFERENCE' = int32(0x0000000D)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_FIELD' = int32(0x00000004)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_FIELD_OFFSET' = int32(0x0000000B)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_POINTER_TO' = int32(0x00000010)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_TYPE_NAME' = int32(0x00000006)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_GET_TYPE_SIZE' = int32(0x0000000E)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_HAS_FIELD' = int32(0x0000000A)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_OUTPUT_FULL_VALUE' = int32(0x00000009)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_OUTPUT_SIMPLE_VALUE' = int32(0x00000008)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_OUTPUT_TYPE_DEFINITION' = int32(0x0000000F)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_OUTPUT_TYPE_NAME' = int32(0x00000007)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_RELEASE' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_SET_FROM_EXPR' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_SET_FROM_TYPE_ID_AND_U64' = int32(0x00000011)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_SET_FROM_U64_EXPR' = int32(0x00000003)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64' = int32(0x00000012)
	}
	.class public sequential sealed '_EXT_TYPED_DATA'
		extends ['mscorlib']'System'.'ValueType'
	{
		.class nested public sequential sealed '<Reserved>e__FixedBuffer'
			extends ['mscorlib']'System'.'ValueType'
		{
			.field public uint64 'FixedElementField'
		}
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TDOP' 'Operation'
		.field public uint32 'Flags'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_DEBUG_TYPED_DATA' 'InData'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_DEBUG_TYPED_DATA' 'OutData'
		.field public uint32 'InStrIndex'
		.field public uint32 'In32'
		.field public uint32 'Out32'
		.field public uint64 'In64'
		.field public uint64 'Out64'
		.field public uint32 'StrBufferIndex'
		.field public uint32 'StrBufferChars'
		.field public uint32 'StrCharsNeeded'
		.field public uint32 'DataBufferIndex'
		.field public uint32 'DataBufferBytes'
		.field public uint32 'DataBytesNeeded'
		.field public uint32 'Status'
		.field public valuetype 'Microsoft.Diagnostics.Runtime.Interop'.'_EXT_TYPED_DATA'/'<Reserved>e__FixedBuffer' 'Reserved'
	}
}
.namespace 'Microsoft.Diagnostics.Runtime.Utilities'
{
	.class public sealed 'CommandOptions'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'Clone'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_NoThrow'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_NoThrow'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddNoThrow'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Start'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Start'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddStart'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_UseShellExecute'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_UseShellExecute'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddUseShellExecute'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_NoWindow'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_NoWindow'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddNoWindow'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_NoWait'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_NoWait'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddNoWait'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Elevate'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Elevate'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddElevate'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Timeout'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Timeout'(int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddTimeout'(int32 'milliseconds')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_Input'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Input'(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddInput'(string 'input')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_CurrentDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_CurrentDirectory'(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddCurrentDirectory'(string 'directoryPath')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_OutputFile'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_OutputFile'(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddOutputFile'(string 'outputFile')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['mscorlib']'System.IO'.'TextWriter' 'get_OutputStream'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_OutputStream'(class ['mscorlib']'System.IO'.'TextWriter' 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddOutputStream'(class ['mscorlib']'System.IO'.'TextWriter' 'outputStream')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'Dictionary`2'<string,string> 'get_EnvironmentVariables'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions' 'AddEnvironmentVariable'(string 'variable', string 'value')
		{
			ret
		}
		.field static public literal int32 'Infinite' = int32(0xFFFFFFFF)
		.property instance string 'CurrentDirectory'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_CurrentDirectory'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_CurrentDirectory'(string)
		}
		.property instance bool 'Elevate'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_Elevate'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_Elevate'(bool)
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'Dictionary`2'<string,string> 'EnvironmentVariables'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'Dictionary`2'<string,string> 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_EnvironmentVariables'()
		}
		.property instance string 'Input'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_Input'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_Input'(string)
		}
		.property instance bool 'NoThrow'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_NoThrow'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_NoThrow'(bool)
		}
		.property instance bool 'NoWait'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_NoWait'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_NoWait'(bool)
		}
		.property instance bool 'NoWindow'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_NoWindow'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_NoWindow'(bool)
		}
		.property instance string 'OutputFile'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_OutputFile'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_OutputFile'(string)
		}
		.property instance class ['mscorlib']'System.IO'.'TextWriter' 'OutputStream'()
		{
			.get instance class ['mscorlib']'System.IO'.'TextWriter' 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_OutputStream'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_OutputStream'(class ['mscorlib']'System.IO'.'TextWriter')
		}
		.property instance bool 'Start'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_Start'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_Start'(bool)
		}
		.property instance int32 'Timeout'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_Timeout'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_Timeout'(int32)
		}
		.property instance bool 'UseShellExecute'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'get_UseShellExecute'()
			.set instance void 'Microsoft.Diagnostics.Runtime.Utilities'.'CommandOptions'::'set_UseShellExecute'(bool)
		}
	}
	.class public sealed 'FileVersionInfo'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance string 'get_FileVersion'()
		{
			ret
		}
		.property instance string 'FileVersion'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'FileVersionInfo'::'get_FileVersion'()
		}
	}
	.class public sequential sealed 'IMAGE_DATA_DIRECTORY'
		extends ['mscorlib']'System'.'ValueType'
	{
		.field public int32 'VirtualAddress'
		.field public int32 'Size'
	}
	.class public sealed 'MachineType'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname uint16 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'ARM' = uint16(0x01C0)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'Amd64' = uint16(0x8664)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'Native' = uint16(0x0000)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'X86' = uint16(0x014C)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'ia64' = uint16(0x0200)
	}
	.class public sealed 'PEFile'
		extends ['mscorlib']'System'.'Object'
		implements ['mscorlib']'System'.'IDisposable'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(string 'filePath')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(class ['mscorlib']'System.IO'.'Stream' 'stream', bool 'virt')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader' 'get_Header'()
		{
			ret
		}
		.method public hidebysig 
			instance bool 'GetPdbSignature'([out] string& 'pdbName', [out] valuetype ['mscorlib']'System'.'Guid'& 'pdbGuid', [out] int32& 'pdbAge', [opt] bool 'first')
		{
			.param [4] = bool(false)
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'FileVersionInfo' 'GetFileVersionInfo'()
		{
			ret
		}
		.method public hidebysig 
			instance string 'GetSxSManfest'()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'Dispose'()
		{
			ret
		}
		.property instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader' 'Header'()
		{
			.get instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEFile'::'get_Header'()
		}
	}
	.class public sealed 'PEHeader'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(void* 'startOfPEFile', bool 'virt')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_PEHeaderSize'()
		{
			ret
		}
		.method public hidebysig 
			instance int32 'VirtualAddressToRva'(void* 'ptr')
		{
			ret
		}
		.method public hidebysig 
			instance void* 'RvaToVirtualAddress'(int32 'rva')
		{
			ret
		}
		.method public hidebysig 
			instance int32 'RvaToFileOffset'(int32 'rva')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsPE64'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsManaged'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_Signature'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'get_Machine'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_NumberOfSections'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_TimeDateStampSec'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype ['mscorlib']'System'.'DateTime' 'get_TimeDateStamp'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_PointerToSymbolTable'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_NumberOfSymbols'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_SizeOfOptionalHeader'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_Characteristics'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_Magic'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8 'get_MajorLinkerVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8 'get_MinorLinkerVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SizeOfCode'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SizeOfInitializedData'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SizeOfUninitializedData'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_AddressOfEntryPoint'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_BaseOfCode'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_ImageBase'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SectionAlignment'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_FileAlignment'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MajorOperatingSystemVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MinorOperatingSystemVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MajorImageVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MinorImageVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MajorSubsystemVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_MinorSubsystemVersion'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_Win32VersionValue'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SizeOfImage'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_SizeOfHeaders'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_CheckSum'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_Subsystem'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint16 'get_DllCharacteristics'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_SizeOfStackReserve'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_SizeOfStackCommit'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_SizeOfHeapReserve'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint64 'get_SizeOfHeapCommit'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_LoaderFlags'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 'get_NumberOfRvaAndSizes'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Directory'(int32 'idx')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ExportDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ImportDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ResourceDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ExceptionDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_CertificatesDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_BaseRelocationDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_DebugDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ArchitectureDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_GlobalPointerDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ThreadStorageDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_LoadConfigurationDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_BoundImportDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ImportAddressTableDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_DelayImportDirectory'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'get_ComDescriptorDirectory'()
		{
			ret
		}
		.property instance uint32 'AddressOfEntryPoint'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_AddressOfEntryPoint'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ArchitectureDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ArchitectureDirectory'()
		}
		.property instance uint32 'BaseOfCode'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_BaseOfCode'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'BaseRelocationDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_BaseRelocationDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'BoundImportDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_BoundImportDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'CertificatesDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_CertificatesDirectory'()
		}
		.property instance uint16 'Characteristics'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Characteristics'()
		}
		.property instance uint32 'CheckSum'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_CheckSum'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ComDescriptorDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ComDescriptorDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'DebugDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_DebugDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'DelayImportDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_DelayImportDirectory'()
		}
		.property instance uint16 'DllCharacteristics'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_DllCharacteristics'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ExceptionDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ExceptionDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ExportDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ExportDirectory'()
		}
		.property instance uint32 'FileAlignment'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_FileAlignment'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'GlobalPointerDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_GlobalPointerDirectory'()
		}
		.property instance uint64 'ImageBase'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ImageBase'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ImportAddressTableDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ImportAddressTableDirectory'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ImportDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ImportDirectory'()
		}
		.property instance bool 'IsManaged'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_IsManaged'()
		}
		.property instance bool 'IsPE64'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_IsPE64'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'LoadConfigurationDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_LoadConfigurationDirectory'()
		}
		.property instance uint32 'LoaderFlags'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_LoaderFlags'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'Machine'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'MachineType' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Machine'()
		}
		.property instance uint16 'Magic'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Magic'()
		}
		.property instance uint16 'MajorImageVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MajorImageVersion'()
		}
		.property instance uint8 'MajorLinkerVersion'()
		{
			.get instance uint8 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MajorLinkerVersion'()
		}
		.property instance uint16 'MajorOperatingSystemVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MajorOperatingSystemVersion'()
		}
		.property instance uint16 'MajorSubsystemVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MajorSubsystemVersion'()
		}
		.property instance uint16 'MinorImageVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MinorImageVersion'()
		}
		.property instance uint8 'MinorLinkerVersion'()
		{
			.get instance uint8 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MinorLinkerVersion'()
		}
		.property instance uint16 'MinorOperatingSystemVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MinorOperatingSystemVersion'()
		}
		.property instance uint16 'MinorSubsystemVersion'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_MinorSubsystemVersion'()
		}
		.property instance uint32 'NumberOfRvaAndSizes'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_NumberOfRvaAndSizes'()
		}
		.property instance uint16 'NumberOfSections'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_NumberOfSections'()
		}
		.property instance uint64 'NumberOfSymbols'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_NumberOfSymbols'()
		}
		.property instance int32 'PEHeaderSize'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_PEHeaderSize'()
		}
		.property instance uint64 'PointerToSymbolTable'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_PointerToSymbolTable'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ResourceDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ResourceDirectory'()
		}
		.property instance uint32 'SectionAlignment'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SectionAlignment'()
		}
		.property instance uint32 'Signature'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Signature'()
		}
		.property instance uint32 'SizeOfCode'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfCode'()
		}
		.property instance uint32 'SizeOfHeaders'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfHeaders'()
		}
		.property instance uint64 'SizeOfHeapCommit'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfHeapCommit'()
		}
		.property instance uint64 'SizeOfHeapReserve'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfHeapReserve'()
		}
		.property instance uint32 'SizeOfImage'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfImage'()
		}
		.property instance uint32 'SizeOfInitializedData'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfInitializedData'()
		}
		.property instance uint16 'SizeOfOptionalHeader'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfOptionalHeader'()
		}
		.property instance uint64 'SizeOfStackCommit'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfStackCommit'()
		}
		.property instance uint64 'SizeOfStackReserve'()
		{
			.get instance uint64 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfStackReserve'()
		}
		.property instance uint32 'SizeOfUninitializedData'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_SizeOfUninitializedData'()
		}
		.property instance uint16 'Subsystem'()
		{
			.get instance uint16 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Subsystem'()
		}
		.property instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'ThreadStorageDirectory'()
		{
			.get instance valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'IMAGE_DATA_DIRECTORY' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_ThreadStorageDirectory'()
		}
		.property instance valuetype ['mscorlib']'System'.'DateTime' 'TimeDateStamp'()
		{
			.get instance valuetype ['mscorlib']'System'.'DateTime' 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_TimeDateStamp'()
		}
		.property instance int32 'TimeDateStampSec'()
		{
			.get instance int32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_TimeDateStampSec'()
		}
		.property instance uint32 'Win32VersionValue'()
		{
			.get instance uint32 'Microsoft.Diagnostics.Runtime.Utilities'.'PEHeader'::'get_Win32VersionValue'()
		}
	}
	.class public 'SymPath'
		extends ['mscorlib']'System'.'Object'
	{
		.method public static hidebysig specialname 
			class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'get_SymbolPath'()
		{
			ret
		}
		.method public static hidebysig specialname 
			void 'set_SymbolPath'(class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			string 'get__NT_SYMBOL_PATH'()
		{
			ret
		}
		.method public static hidebysig specialname 
			void 'set__NT_SYMBOL_PATH'(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'CleanSymbolPath'()
		{
			ret
		}
		.method public static hidebysig specialname 
			string 'get_MicrosoftSymbolServerPath'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(string 'path')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class ['mscorlib']'System.Collections.Generic'.'ICollection`1'<class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'> 'get_Elements'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'Set'(string 'path')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Clear'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'Add'(string 'path')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Add'(class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement' 'elem')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Insert'(string 'path')
		{
			ret
		}
		.method public hidebysig 
			instance void 'Insert'(class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement' 'elem')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_DefaultSymbolCache'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'InsureHasCache'(string 'defaultCachePath')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'LocalOnly'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'CacheFirst'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public static hidebysig 
			bool 'ComputerNameExists'(string 'computerName', [opt] int32 'timeoutMSec')
		{
			.param [2] = int32(0x000002BC)
			ret
		}
		.property instance string 'DefaultSymbolCache'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'get_DefaultSymbolCache'()
		}
		.property instance class ['mscorlib']'System.Collections.Generic'.'ICollection`1'<class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'> 'Elements'()
		{
			.get instance class ['mscorlib']'System.Collections.Generic'.'ICollection`1'<class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'> 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'get_Elements'()
		}
		.property string 'MicrosoftSymbolServerPath'()
		{
			.get string 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'get_MicrosoftSymbolServerPath'()
		}
		.property class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'SymbolPath'()
		{
			.get class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath' 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'get_SymbolPath'()
			.set void 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'set_SymbolPath'(class 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath')
		}
		.property string '_NT_SYMBOL_PATH'()
		{
			.get string 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'get__NT_SYMBOL_PATH'()
			.set void 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPath'::'set__NT_SYMBOL_PATH'(string)
		}
	}
	.class public 'SymPathElement'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance bool 'get_IsSymServer'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_Cache'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_Target'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_IsRemote'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool 'Equals'(object 'obj')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 'GetHashCode'()
		{
			ret
		}
		.property instance string 'Cache'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'::'get_Cache'()
		}
		.property instance bool 'IsRemote'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'::'get_IsRemote'()
		}
		.property instance bool 'IsSymServer'()
		{
			.get instance bool 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'::'get_IsSymServer'()
		}
		.property instance string 'Target'()
		{
			.get instance string 'Microsoft.Diagnostics.Runtime.Utilities'.'SymPathElement'::'get_Target'()
		}
	}
	.class public sealed 'SymbolReaderFlags'
		extends ['mscorlib']'System'.'Enum'
	{
		.custom instance void ['mscorlib']'System'.'FlagsAttribute'::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'SymbolReaderFlags' 'CacheOnly' = int32(0x00000001)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'SymbolReaderFlags' 'NoNGenPDB' = int32(0x00000002)
		.field static public literal valuetype 'Microsoft.Diagnostics.Runtime.Utilities'.'SymbolReaderFlags' 'None' = int32(0x00000000)
	}
}
