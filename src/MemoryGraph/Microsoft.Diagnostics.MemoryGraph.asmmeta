.assembly extern 'Microsoft.Diagnostics.FastSerialization'
{
	.publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
	.ver 14:0:0:0
}
.assembly extern 'mscorlib'
{
	.publickeytoken = (B7 7A 5C 56 19 34 E0 89)
	.ver 4:0:0:0
}
.assembly 'Microsoft.Diagnostics.MemoryGraph'
{
	.custom instance void ['mscorlib']'System'.'CLSCompliantAttribute'::.ctor(bool) = (01 00 00 00 00)
	.custom instance void ['mscorlib']'System.Runtime.InteropServices'.'ComVisibleAttribute'::.ctor(bool) = (01 00 00 00 00)
	.permissionset reqmin = (2E 01 80 84 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 53 65 63 75 72 69 74 79 50 65 72 6D 69 73 73 69 6F 6E 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 34 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 15 01 54 02 10 53 6B 69 70 56 65 72 69 66 69 63 61 74 69 6F 6E 01)
	.publickey = (00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 D1 FA 57 C4 AE D9 F0 A3 2E 84 AA 0F AE FD 0D E9 E8 FD 6A EC 8F 87 FB 03 76 6C 83 4C 99 92 1E B2 3B E7 9A D9 D5 DC C1 DD 9A D2 36 13 21 02 90 0B 72 3C F9 80 95 7F C4 E1 77 10 8F C6 07 77 4F 29 E8 32 0E 92 EA 05 EC E4 E8 21 C0 A5 EF E8 F1 64 5C 4C 0C 93 C1 AB 99 28 5D 62 2C AA 65 2C 1D FA D6 3D 74 5D 6F 2D E5 F1 7E 5E AF 0F C4 96 3D 26 1C 8A 12 43 65 18 20 6D C0 93 34 4D 5A D2 93)
	.hash algorithm 0x00008004
	.ver 14:0:0:0
}
.class public 'GraphSampler'
	extends ['mscorlib']'System'.'Object'
{
	.method public hidebysig specialname 
		instance void '.ctor'(class 'Graphs'.'MemoryGraph' 'graph', int32 'targetNodeCount', class ['mscorlib']'System.IO'.'TextWriter' 'log')
	{
		ret
	}
	.method public hidebysig 
		instance class 'Graphs'.'MemoryGraph' 'GetSampledGraph'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance float32[] 'get_CountScalingByType'()
	{
		ret
	}
	.method public hidebysig 
		instance valuetype 'Graphs'.'NodeTypeIndex' 'MapTypeIndex'(valuetype 'Graphs'.'NodeTypeIndex' 'oldTypeIndex')
	{
		ret
	}
	.method public hidebysig 
		instance valuetype 'Graphs'.'NodeIndex' 'MapNodeIndex'(valuetype 'Graphs'.'NodeIndex' 'oldNodeIndex')
	{
		ret
	}
	.property instance float32[] 'CountScalingByType'()
	{
		.get instance float32[] 'GraphSampler'::'get_CountScalingByType'()
	}
}
.class public 'RefGraph'
	extends ['mscorlib']'System'.'Object'
{
	.method public hidebysig specialname 
		instance void '.ctor'(class 'Graphs'.'Graph' 'graph')
	{
		ret
	}
	.method public hidebysig 
		instance class 'RefNode' 'AllocNodeStorage'()
	{
		ret
	}
	.method public hidebysig 
		instance class 'RefNode' 'GetNode'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex', class 'RefNode' 'storage')
	{
		ret
	}
	.method public hidebysig 
		instance class 'RefNode' 'GetNode'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
	{
		ret
	}
}
.class public 'RefNode'
	extends ['mscorlib']'System'.'Object'
{
	.method public hidebysig 
		instance valuetype 'Graphs'.'NodeIndex' 'GetFirstChildIndex'()
	{
		ret
	}
	.method public hidebysig 
		instance valuetype 'Graphs'.'NodeIndex' 'GetNextChildIndex'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance int32 'get_ChildCount'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance class 'RefGraph' 'get_Graph'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance valuetype 'Graphs'.'NodeIndex' 'get_Index'()
	{
		ret
	}
	.method public hidebysig 
		instance bool 'Contains'(valuetype 'Graphs'.'NodeIndex' 'node')
	{
		ret
	}
	.method public virtual hidebysig 
		instance string 'ToString'()
	{
		ret
	}
	.method public hidebysig 
		instance void 'WriteXml'(class ['mscorlib']'System.IO'.'TextWriter' 'writer', [opt] string 'prefix')
	{
		.param [2] = ""
		ret
	}
	.property instance int32 'ChildCount'()
	{
		.get instance int32 'RefNode'::'get_ChildCount'()
	}
	.property instance class 'RefGraph' 'Graph'()
	{
		.get instance class 'RefGraph' 'RefNode'::'get_Graph'()
	}
	.property instance valuetype 'Graphs'.'NodeIndex' 'Index'()
	{
		.get instance valuetype 'Graphs'.'NodeIndex' 'RefNode'::'get_Index'()
	}
}
.class public 'SpanningTree'
	extends ['mscorlib']'System'.'Object'
{
	.method public hidebysig specialname 
		instance void '.ctor'(class 'Graphs'.'Graph' 'graph', class ['mscorlib']'System.IO'.'TextWriter' 'log')
	{
		ret
	}
	.method public hidebysig specialname 
		instance class 'Graphs'.'Graph' 'get_Graph'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance string 'get_PriorityRegExs'()
	{
		ret
	}
	.method public hidebysig specialname 
		instance void 'set_PriorityRegExs'(string 'value')
	{
		ret
	}
	.method public static hidebysig specialname 
		string 'get_DefaultPriorities'()
	{
		ret
	}
	.method public hidebysig 
		instance valuetype 'Graphs'.'NodeIndex' 'Parent'(valuetype 'Graphs'.'NodeIndex' 'node')
	{
		ret
	}
	.method public hidebysig 
		instance void 'ForEach'(class ['mscorlib']'System'.'Action`1'<valuetype 'Graphs'.'NodeIndex'> 'callback')
	{
		ret
	}
	.property string 'DefaultPriorities'()
	{
		.get string 'SpanningTree'::'get_DefaultPriorities'()
	}
	.property instance class 'Graphs'.'Graph' 'Graph'()
	{
		.get instance class 'Graphs'.'Graph' 'SpanningTree'::'get_Graph'()
	}
	.property instance string 'PriorityRegExs'()
	{
		.get instance string 'SpanningTree'::'get_PriorityRegExs'()
		.set instance void 'SpanningTree'::'set_PriorityRegExs'(string)
	}
}
.namespace 'Graphs'
{
	.class public 'Graph'
		extends ['mscorlib']'System'.'Object'
		implements ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializable', ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializableVersion'
	{
		.class nested public 'SizeAndCount'
			extends ['mscorlib']'System'.'Object'
		{
			.method public hidebysig specialname 
				instance void '.ctor'(valuetype 'Graphs'.'NodeTypeIndex' 'typeIdx')
			{
				ret
			}
			.field public int32 'Count'
			.field public int64 'Size'
			.field public initonly valuetype 'Graphs'.'NodeTypeIndex' 'TypeIdx'
		}
		.method public hidebysig 
			instance class 'Graphs'.'Node' 'GetNode'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex', class 'Graphs'.'Node' 'storage')
		{
			ret
		}
		.method public hidebysig 
			instance bool 'IsDefined'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Graphs'.'NodeType' 'GetType'(valuetype 'Graphs'.'NodeTypeIndex' 'nodeTypeIndex', class 'Graphs'.'NodeType' 'storage')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Graphs'.'Node' 'AllocNodeStorage'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Graphs'.'NodeType' 'AllocTypeNodeStorage'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeIndex' 'get_NodeIndexLimit'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_NodeCount'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeTypeIndex' 'get_NodeTypeIndexLimit'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_NodeTypeCount'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 'get_TotalSize'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_TotalNumberOfReferences'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void '.ctor'(int32 'expectedNodeCount')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype 'Graphs'.'NodeTypeIndex' 'CreateType'(string 'name', [opt] string 'moduleName', [opt] int32 'size')
		{
			.param [2] = nullref
			.param [3] = int32(0xFFFFFFFF)
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype 'Graphs'.'NodeIndex' 'CreateNode'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'SetNode'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex', valuetype 'Graphs'.'NodeTypeIndex' 'typeIndex', int32 'sizeInBytes', valuetype ['Microsoft.Diagnostics.FastSerialization']'System.Collections.Generic'.'GrowableArray`1'<valuetype 'Graphs'.'NodeIndex'> 'children')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void 'AllowReading'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int64 'SizeOfGraphDescription'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Graphs'.'NodeTypeIndex' 'CreateType'(int32 'typeID', class 'Graphs'.'Module' 'module', [opt] int32 'size', [opt] string 'typeNameSuffix')
		{
			.param [3] = int32(0xFFFFFFFF)
			.param [4] = nullref
			ret
		}
		.method public hidebysig specialname 
			instance class ['mscorlib']'System'.'Func`3'<int32,class 'Graphs'.'Module',string> 'get_ResolveTypeName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_ResolveTypeName'(class ['mscorlib']'System'.'Func`3'<int32,class 'Graphs'.'Module',string> 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_HasDeferedTypeNames'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'BreadthFirstVisit'(class ['mscorlib']'System'.'Action`1'<class 'Graphs'.'Node'> 'visitor')
		{
			ret
		}
		.method public hidebysig 
			instance class 'Graphs'.'Graph'/'SizeAndCount'[] 'GetHistogramByType'()
		{
			ret
		}
		.method public hidebysig 
			instance string 'HistogramByTypeXml'([opt] int64 'minSize')
		{
			.param [1] = int64(0x0)
			ret
		}
		.method family virtual hidebysig newslot 
			instance void 'Clear'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void 'ToStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Serializer' 'serializer')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'FromStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Deserializer' 'deserializer')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 'get_Version'()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 'get_MinimumVersionCanRead'()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 'get_MinimumReaderVersion'()
		{
			ret
		}
		.field public valuetype 'Graphs'.'NodeIndex' 'RootIndex'
		.property instance bool 'HasDeferedTypeNames'()
		{
			.get instance bool 'Graphs'.'Graph'::'get_HasDeferedTypeNames'()
		}
		.property instance int32 'MinimumReaderVersion'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_MinimumReaderVersion'()
		}
		.property instance int32 'MinimumVersionCanRead'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_MinimumVersionCanRead'()
		}
		.property instance int32 'NodeCount'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_NodeCount'()
		}
		.property instance valuetype 'Graphs'.'NodeIndex' 'NodeIndexLimit'()
		{
			.get instance valuetype 'Graphs'.'NodeIndex' 'Graphs'.'Graph'::'get_NodeIndexLimit'()
		}
		.property instance int32 'NodeTypeCount'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_NodeTypeCount'()
		}
		.property instance valuetype 'Graphs'.'NodeTypeIndex' 'NodeTypeIndexLimit'()
		{
			.get instance valuetype 'Graphs'.'NodeTypeIndex' 'Graphs'.'Graph'::'get_NodeTypeIndexLimit'()
		}
		.property instance class ['mscorlib']'System'.'Func`3'<int32,class 'Graphs'.'Module',string> 'ResolveTypeName'()
		{
			.get instance class ['mscorlib']'System'.'Func`3'<int32,class 'Graphs'.'Module',string> 'Graphs'.'Graph'::'get_ResolveTypeName'()
			.set instance void 'Graphs'.'Graph'::'set_ResolveTypeName'(class ['mscorlib']'System'.'Func`3'<int32,class 'Graphs'.'Module',string>)
		}
		.property instance int32 'TotalNumberOfReferences'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_TotalNumberOfReferences'()
		}
		.property instance int64 'TotalSize'()
		{
			.get instance int64 'Graphs'.'Graph'::'get_TotalSize'()
		}
		.property instance int32 'Version'()
		{
			.get instance int32 'Graphs'.'Graph'::'get_Version'()
		}
	}
	.class public abstract sealed 'GraphUtils'
		extends ['mscorlib']'System'.'Object'
	{
		.method public static hidebysig 
			string 'PrintGraph'(class 'Graphs'.'Graph' 'graph')
		{
			ret
		}
		.method public static hidebysig 
			string 'PrintNode'(class 'Graphs'.'Graph' 'graph', valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public static hidebysig 
			string 'PrintNode'(class 'Graphs'.'Graph' 'graph', int32 'nodeIndex')
		{
			ret
		}
		.method public static hidebysig 
			string 'PrintNodes'(class 'Graphs'.'Graph' 'graph', class ['mscorlib']'System.Collections.Generic'.'List`1'<valuetype 'Graphs'.'NodeIndex'> 'nodes')
		{
			ret
		}
		.method public static hidebysig 
			string 'PrintChildren'(class 'Graphs'.'Graph' 'graph', valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public static hidebysig 
			string 'PrintChildren'(class 'Graphs'.'Graph' 'graph', int32 'nodeIndex')
		{
			ret
		}
		.method public static hidebysig 
			void 'WriteXml'(class 'Graphs'.'Graph' 'graph', class ['mscorlib']'System.IO'.'TextWriter' 'writer')
		{
			ret
		}
		.method public static hidebysig 
			void 'DumpNormalized'(class 'Graphs'.'MemoryGraph' 'graph', class ['mscorlib']'System.IO'.'TextWriter' 'writer')
		{
			ret
		}
		.method public static hidebysig 
			class ['mscorlib']'System.Collections.Generic'.'List`1'<valuetype 'Graphs'.'NodeIndex'> 'NodeChildren'(class 'Graphs'.'Graph' 'graph', valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public static hidebysig 
			class ['mscorlib']'System.Collections.Generic'.'List`1'<valuetype 'Graphs'.'NodeIndex'> 'NodesOfType'(class 'Graphs'.'Graph' 'graph', string 'regExpression')
		{
			ret
		}
	}
	.class public 'MemoryGraph'
		extends 'Graphs'.'Graph'
		implements ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializable'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(int32 'expectedSize')
		{
			ret
		}
		.method public hidebysig 
			instance void 'WriteAsBinaryFile'(string 'outputFileName')
		{
			ret
		}
		.method public static hidebysig 
			class 'Graphs'.'MemoryGraph' 'ReadFromBinaryFile'(string 'inputFileName')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Is64Bit'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Is64Bit'(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance uint64 'GetAddress'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public hidebysig 
			instance void 'SetAddress'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex', uint64 'nodeAddress')
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype 'Graphs'.'NodeIndex' 'CreateNode'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class 'Graphs'.'Node' 'AllocNodeStorage'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 'SizeOfGraphDescription'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_DistinctRefCount'()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void 'Clear'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void 'AllowReading'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Graphs'.'NodeIndex' 'GetNodeIndex'(uint64 'objectAddress')
		{
			ret
		}
		.method public hidebysig 
			instance bool 'IsInGraph'(uint64 'objectAddress')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'FastSerialization.IFastSerializable.ToStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Serializer' 'serializer')
		{
			.override ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializable'::'ToStream'
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'FastSerialization.IFastSerializable.FromStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Deserializer' 'deserializer')
		{
			.override ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializable'::'FromStream'
			ret
		}
		.field family class ['mscorlib']'System.Collections.Generic'.'Dictionary`2'<uint64,valuetype 'Graphs'.'NodeIndex'> 'm_addressToNodeIndex'
		.field family valuetype ['Microsoft.Diagnostics.FastSerialization']'System.Collections.Generic'.'GrowableArray`1'<uint64> 'm_nodeAddresses'
		.property instance int32 'DistinctRefCount'()
		{
			.get instance int32 'Graphs'.'MemoryGraph'::'get_DistinctRefCount'()
		}
		.property instance bool 'Is64Bit'()
		{
			.get instance bool 'Graphs'.'MemoryGraph'::'get_Is64Bit'()
			.set instance void 'Graphs'.'MemoryGraph'::'set_Is64Bit'(bool)
		}
	}
	.class public 'MemoryNode'
		extends 'Graphs'.'Node'
	{
		.method public hidebysig specialname 
			instance uint64 'get_Address'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void 'WriteXml'(class ['mscorlib']'System.IO'.'TextWriter' 'writer', [opt] string 'prefix', [opt] class 'Graphs'.'NodeType' 'typeStorage', [opt] string 'additinalAttribs')
		{
			.param [2] = ""
			.param [3] = nullref
			.param [4] = ""
			ret
		}
		.property instance uint64 'Address'()
		{
			.get instance uint64 'Graphs'.'MemoryNode'::'get_Address'()
		}
	}
	.class public 'MemoryNodeBuilder'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(class 'Graphs'.'MemoryGraph' 'graph', string 'typeName', [opt] string 'moduleName', [opt] valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			.param [3] = nullref
			.param [4] = int32(0xFFFFFFFF)
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_TypeName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_ModuleName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Size'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_Size'(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeIndex' 'get_Index'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Graphs'.'MemoryNodeBuilder' 'FindOrCreateChild'(string 'childTypeName', [opt] string 'childModuleName')
		{
			.param [2] = nullref
			ret
		}
		.method public hidebysig 
			instance void 'AddChild'(class 'Graphs'.'MemoryNodeBuilder' 'child')
		{
			ret
		}
		.method public hidebysig 
			instance void 'AddChild'(valuetype 'Graphs'.'NodeIndex' 'child')
		{
			ret
		}
		.method public hidebysig 
			instance void 'AllocateTypeIndexes'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Graphs'.'NodeIndex' 'Build'()
		{
			ret
		}
		.property instance valuetype 'Graphs'.'NodeIndex' 'Index'()
		{
			.get instance valuetype 'Graphs'.'NodeIndex' 'Graphs'.'MemoryNodeBuilder'::'get_Index'()
		}
		.property instance string 'ModuleName'()
		{
			.get instance string 'Graphs'.'MemoryNodeBuilder'::'get_ModuleName'()
		}
		.property instance int32 'Size'()
		{
			.get instance int32 'Graphs'.'MemoryNodeBuilder'::'get_Size'()
			.set instance void 'Graphs'.'MemoryNodeBuilder'::'set_Size'(int32)
		}
		.property instance string 'TypeName'()
		{
			.get instance string 'Graphs'.'MemoryNodeBuilder'::'get_TypeName'()
		}
	}
	.class public 'Module'
		extends ['mscorlib']'System'.'Object'
		implements ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'IFastSerializable'
	{
		.method public hidebysig specialname 
			instance void '.ctor'(uint64 'imageBase')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'ToStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Serializer' 'serializer')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void 'FromStream'(class ['Microsoft.Diagnostics.FastSerialization']'FastSerialization'.'Deserializer' 'deserializer')
		{
			ret
		}
		.field public valuetype ['mscorlib']'System'.'DateTime' 'BuildTime'
		.field public uint64 'ImageBase'
		.field public string 'Path'
		.field public int32 'PdbAge'
		.field public valuetype ['mscorlib']'System'.'Guid' 'PdbGuid'
		.field public string 'PdbName'
		.field public int32 'Size'
	}
	.class public 'Node'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance int32 'get_Size'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool 'get_Defined'()
		{
			ret
		}
		.method public hidebysig 
			instance class 'Graphs'.'NodeType' 'GetType'(class 'Graphs'.'NodeType' 'storage')
		{
			ret
		}
		.method public hidebysig 
			instance void 'ResetChildrenEnumeration'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Graphs'.'NodeIndex' 'GetFirstChildIndex'()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'Graphs'.'NodeIndex' 'GetNextChildIndex'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_ChildCount'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeTypeIndex' 'get_TypeIndex'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeIndex' 'get_Index'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Graphs'.'Graph' 'get_Graph'()
		{
			ret
		}
		.method public hidebysig 
			instance bool 'Contains'(valuetype 'Graphs'.'NodeIndex' 'nodeIndex')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void 'WriteXml'(class ['mscorlib']'System.IO'.'TextWriter' 'writer', [opt] string 'prefix', [opt] class 'Graphs'.'NodeType' 'typeStorage', [opt] string 'additinalAttribs')
		{
			.param [2] = ""
			.param [3] = nullref
			.param [4] = ""
			ret
		}
		.method famorassem hidebysig specialname 
			instance void '.ctor'(class 'Graphs'.'Graph' 'graph')
		{
			ret
		}
		.property instance int32 'ChildCount'()
		{
			.get instance int32 'Graphs'.'Node'::'get_ChildCount'()
		}
		.property instance bool 'Defined'()
		{
			.get instance bool 'Graphs'.'Node'::'get_Defined'()
		}
		.property instance class 'Graphs'.'Graph' 'Graph'()
		{
			.get instance class 'Graphs'.'Graph' 'Graphs'.'Node'::'get_Graph'()
		}
		.property instance valuetype 'Graphs'.'NodeIndex' 'Index'()
		{
			.get instance valuetype 'Graphs'.'NodeIndex' 'Graphs'.'Node'::'get_Index'()
		}
		.property instance int32 'Size'()
		{
			.get instance int32 'Graphs'.'Node'::'get_Size'()
		}
		.property instance valuetype 'Graphs'.'NodeTypeIndex' 'TypeIndex'()
		{
			.get instance valuetype 'Graphs'.'NodeTypeIndex' 'Graphs'.'Node'::'get_TypeIndex'()
		}
	}
	.class public sealed 'NodeIndex'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Graphs'.'NodeIndex' 'Invalid' = int32(0xFFFFFFFF)
	}
	.class public 'NodeType'
		extends ['mscorlib']'System'.'Object'
	{
		.method public hidebysig specialname 
			instance string 'get_Name'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_FullName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_Size'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Graphs'.'NodeTypeIndex' 'get_Index'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Graphs'.'Graph' 'get_Graph'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string 'get_ModuleName'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void 'set_ModuleName'(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Graphs'.'Module' 'get_Module'()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 'get_RawTypeID'()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string 'ToString'()
		{
			ret
		}
		.method public hidebysig 
			instance void 'WriteXml'(class ['mscorlib']'System.IO'.'TextWriter' 'writer', [opt] string 'prefix')
		{
			.param [2] = ""
			ret
		}
		.method famorassem hidebysig specialname 
			instance void '.ctor'(class 'Graphs'.'Graph' 'graph')
		{
			ret
		}
		.property instance string 'FullName'()
		{
			.get instance string 'Graphs'.'NodeType'::'get_FullName'()
		}
		.property instance class 'Graphs'.'Graph' 'Graph'()
		{
			.get instance class 'Graphs'.'Graph' 'Graphs'.'NodeType'::'get_Graph'()
		}
		.property instance valuetype 'Graphs'.'NodeTypeIndex' 'Index'()
		{
			.get instance valuetype 'Graphs'.'NodeTypeIndex' 'Graphs'.'NodeType'::'get_Index'()
		}
		.property instance class 'Graphs'.'Module' 'Module'()
		{
			.get instance class 'Graphs'.'Module' 'Graphs'.'NodeType'::'get_Module'()
		}
		.property instance string 'ModuleName'()
		{
			.get instance string 'Graphs'.'NodeType'::'get_ModuleName'()
			.set instance void 'Graphs'.'NodeType'::'set_ModuleName'(string)
		}
		.property instance string 'Name'()
		{
			.get instance string 'Graphs'.'NodeType'::'get_Name'()
		}
		.property instance int32 'RawTypeID'()
		{
			.get instance int32 'Graphs'.'NodeType'::'get_RawTypeID'()
		}
		.property instance int32 'Size'()
		{
			.get instance int32 'Graphs'.'NodeType'::'get_Size'()
		}
	}
	.class public sealed 'NodeTypeIndex'
		extends ['mscorlib']'System'.'Enum'
	{
		.field public rtspecialname specialname int32 'value__'
		.field static public literal valuetype 'Graphs'.'NodeTypeIndex' 'Invalid' = int32(0xFFFFFFFF)
	}
}
